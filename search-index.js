var searchIndex = {};
searchIndex["adler32"] = {"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",null,null],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",null,{"i":[{"n":"r"}],"o":{"g":["u32"],"n":"result"}}],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,{"o":{"n":"rollingadler32"}}],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,{"i":[{"n":"u32"}],"o":{"n":"rollingadler32"}}],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,null],[11,"hash","","Returns the current hash.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,{"i":[{"n":"self"},{"n":"usize"},{"n":"u8"}]}],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,null]],"paths":[[3,"RollingAdler32"]]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"o":{"n":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"o":{"n":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"i":[{"n":"str"}],"o":{"g":["capacityerror"],"n":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"i":[{"n":"a"}],"o":{"g":["utf8error"],"n":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"try_push","","Adds the given char to the end of the string.",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"g":["capacityerror"],"n":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"i":[{"n":"self"},{"n":"str"}]}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["capacityerror"],"n":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char"}}],[11,"clear","","Make the string empty.",0,{"i":[{"n":"self"}]}],[11,"set_len","","Set the strings’s length.",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"borrow","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write_char","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[11,"write_str","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"arraystring"}}],[11,"clone_from","","",0,{"i":[{"n":"self"},{"n":"self"}]}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"capacityerror"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"ordering"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"i":[{"n":"t"}],"o":{"n":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"i":[{"n":"self"}],"o":{"n":"capacityerror"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"end","","End index (exclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"new","","Create a new empty `ArrayVec`.",4,{"o":{"n":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"clear","","Remove all elements in the vector.",4,{"i":[{"n":"self"}]}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"i":[{"n":"self"},{"n":"f"}]}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"i":[{"n":"self"}]}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"into_iter","","",4,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",4,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone_from","","",4,{"i":[{"n":"self"},{"n":"self"}]}],[11,"hash","","",4,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","Return an empty array",4,{"o":{"n":"arrayvec"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"arrayvec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"arrayvec"}],"o":{"n":"ordering"}}],[11,"start","","Start index (inclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"end","","End index (exclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"i":[{"n":"f"}]}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"name","","Returns the name of this function.",1,{"i":[{"n":"self"}],"o":{"g":["symbolname"],"n":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"backtrace"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"backtraceframe"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"o":{"n":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"o":{"n":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"i":[{"n":"self"}]}],[11,"from","","",3,{"i":[{"g":["backtraceframe"],"n":"vec"}],"o":{"n":"self"}}],[11,"into","","",3,{"i":[{"n":"self"}],"o":{"g":["backtraceframe"],"n":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"i":[{"n":"self"}],"o":{"g":["symbolname"],"n":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bigendian"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"n":"ordering"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"g":["ordering"],"n":"option"}}],[11,"default","","",3,{"o":{"n":"bigendian"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"littleendian"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"n":"ordering"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"g":["ordering"],"n":"option"}}],[11,"default","","",4,{"o":{"n":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["chrono"] = {"doc":"Chrono 0.2.25","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",0,null],[13,"Tue","","Tuesday.",0,null],[13,"Wed","","Wednesday.",0,null],[13,"Thu","","Thursday.",0,null],[13,"Fri","","Friday.",0,null],[13,"Sat","","Saturday.",0,null],[13,"Sun","","Sunday.",0,null],[0,"duration","","ISO 8601 duration.",null,null],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",1,null],[13,"Single","","Given local time representation has a single unique result.",1,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",1,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"utc"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"utc"}],"o":{"n":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",2,{"o":{"g":["utc"],"n":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",2,{"o":{"g":["utc"],"n":"datetime"}}],[11,"from_offset","","",2,{"i":[{"n":"utc"}],"o":{"n":"utc"}}],[11,"offset_from_local_date","","",2,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["utc"],"n":"localresult"}}],[11,"offset_from_local_datetime","","",2,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["utc"],"n":"localresult"}}],[11,"offset_from_utc_date","","",2,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"utc"}}],[11,"offset_from_utc_datetime","","",2,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"utc"}}],[11,"local_minus_utc","","",2,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"fixedoffset"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"i":[{"n":"i32"}],"o":{"n":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"i":[{"n":"i32"}],"o":{"g":["fixedoffset"],"n":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"i":[{"n":"i32"}],"o":{"n":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"i":[{"n":"i32"}],"o":{"g":["fixedoffset"],"n":"option"}}],[11,"from_offset","","",3,{"i":[{"n":"fixedoffset"}],"o":{"n":"fixedoffset"}}],[11,"offset_from_local_date","","",3,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_utc_date","","",3,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",3,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"fixedoffset"}}],[11,"local_minus_utc","","",3,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",4,{"o":{"g":["local"],"n":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",4,{"o":{"g":["local"],"n":"datetime"}}],[11,"from_offset","","",4,{"i":[{"n":"fixedoffset"}],"o":{"n":"local"}}],[11,"offset_from_local_date","","",4,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_local_datetime","","",4,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_utc_date","","",4,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",4,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"fixedoffset"}}],[11,"from_local_date","","",4,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["date"],"n":"localresult"}}],[11,"from_local_datetime","","",4,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"from_utc_date","","",4,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["local"],"n":"date"}}],[11,"from_utc_datetime","","",4,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["local"],"n":"datetime"}}],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",5,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",6,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["date"],"n":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"}],"o":{"n":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"}],"o":{"g":["date"],"n":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"n":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"g":["date"],"n":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"i":[{"n":"self"},{"n":"i64"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"i":[{"n":"self"},{"n":"i64"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",6,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",6,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",6,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",6,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",6,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["date"],"n":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",6,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["datetime"],"n":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",6,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",6,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"datetime"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"localresult"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"localresult"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"localresult"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",1,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",1,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"ordering"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"i":[{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"i":[{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"i":[{"n":"i32"},{"n":"u32"}],"o":{"n":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"i":[{"n":"i32"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"i":[{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"n":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"i":[{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"i":[{"n":"i32"}],"o":{"n":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"i":[{"n":"i32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",7,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["naivedate"],"n":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",7,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",7,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",7,{"i":[{"n":"self"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",7,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",7,{"i":[{"n":"self"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",7,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",7,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","Returns the month number starting from 1.",7,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","Returns the month number starting from 0.",7,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","Returns the day of month starting from 1.",7,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",7,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",7,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",7,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","Returns the day of week.",7,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"isoweekdate","","",7,null],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",7,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",7,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",7,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",7,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",7,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",7,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",7,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"hash","","",7,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"naivedate"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"duration"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"naivedate"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",7,{"i":[{"n":"str"}],"o":{"g":["naivedate"],"n":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"ordering"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",8,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",8,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",8,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["naivetime"],"n":"parseresult"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",8,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",8,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",8,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",8,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",8,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"hash","","",8,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"naivetime"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"duration"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"naivetime"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",8,{"i":[{"n":"str"}],"o":{"g":["naivetime"],"n":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"ordering"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"naivedatetime"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",9,{"i":[{"n":"naivedate"},{"n":"naivetime"}],"o":{"n":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"i":[{"n":"i64"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"i":[{"n":"i64"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"from_num_seconds_from_unix_epoch","","Deprecated: Same to `NaiveDateTime::from_timestamp`.",9,{"i":[{"n":"i64"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"from_num_seconds_from_unix_epoch_opt","","Deprecated: Same to `NaiveDateTime::from_timestamp_opt`.",9,{"i":[{"n":"i64"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",9,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["naivedatetime"],"n":"parseresult"}}],[11,"date","","Retrieves a date component.",9,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"time","","Retrieves a time component.",9,{"i":[{"n":"self"}],"o":{"n":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",9,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"num_seconds_from_unix_epoch","","Deprecated: Same to `NaiveDateTime::timestamp`.",9,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",9,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",9,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",9,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",9,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","Returns the month number starting from 1.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","Returns the month number starting from 0.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","Returns the day of month starting from 1.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","Returns the day of week.",9,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"isoweekdate","","",9,null],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",9,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"hash","","",9,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",9,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"naivedatetime"}}],[11,"sub","","",9,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"duration"}}],[11,"sub","","",9,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"naivedatetime"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",9,{"i":[{"n":"str"}],"o":{"g":["naivedatetime"],"n":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",10,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",10,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",10,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",10,{"i":[{"n":"self"}],"o":{"g":["date"],"n":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",10,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",10,{"i":[{"n":"self"}],"o":{"g":["date"],"n":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",10,null],[11,"timezone","","Retrieves an associated time zone.",10,{"i":[{"n":"self"}],"o":{"n":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",10,{"i":[{"n":"self"},{"n":"tz2"}],"o":{"n":"date"}}],[11,"checked_add","","Adds given `Duration` to the current date.",10,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["date"],"n":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date.",10,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["date"],"n":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",10,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",10,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",10,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",10,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","",10,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","",10,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"isoweekdate","","",10,null],[11,"with_year","","",10,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_month","","",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_month0","","",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_day","","",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_day0","","",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_ordinal","","",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_ordinal0","","",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"date"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"ordering"}}],[11,"hash","","",10,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",10,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"date"}}],[11,"sub","","",10,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"duration"}}],[11,"sub","","",10,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"date"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",11,null],[11,"date","","Retrieves a date component.",11,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",11,{"i":[{"n":"self"}],"o":{"n":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",11,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"num_seconds_from_unix_epoch","","Deprecated: Same to `DateTime::timestamp`.",11,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"offset","","Retrieves an associated offset from UTC.",11,null],[11,"timezone","","Retrieves an associated time zone.",11,{"i":[{"n":"self"}],"o":{"n":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",11,{"i":[{"n":"self"},{"n":"tz2"}],"o":{"n":"datetime"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",11,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["datetime"],"n":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",11,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["datetime"],"n":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",11,{"i":[{"n":"self"}],"o":{"n":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",11,{"i":[{"n":"self"}],"o":{"n":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",11,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",11,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",11,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",11,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","",11,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","",11,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"isoweekdate","","",11,null],[11,"with_year","","",11,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_month","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_month0","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_day","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_day0","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_ordinal","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_ordinal0","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"hour","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"minute","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"second","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"nanosecond","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_hour","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_minute","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_second","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_nanosecond","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"ordering"}}],[11,"hash","","",11,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",11,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"datetime"}}],[11,"sub","","",11,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"duration"}}],[11,"sub","","",11,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"datetime"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",11,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"from_str","","",11,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"from_str","","",11,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"ParseError","chrono::format","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",12,null],[13,"Zero","","Zero (`0`) padding.",12,null],[13,"Space","","Space padding.",12,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",13,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",13,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"Month","","Month (FW=PW=2).",13,null],[13,"Day","","Day of the month (FW=PW=2).",13,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",13,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",13,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",13,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",13,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",13,null],[13,"Ordinal","","Day of the year (FW=PW=3).",13,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",13,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",13,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",13,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",13,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",13,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",13,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",14,null],[13,"LongMonthName","","Full month names.",14,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",14,null],[13,"LongWeekdayName","","Full day of the week names.",14,null],[13,"LowerAmPm","","AM/PM.",14,null],[13,"UpperAmPm","","AM/PM.",14,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",14,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",14,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",14,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",14,null],[13,"TimezoneName","","Timezone name.",14,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",14,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",14,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",14,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",14,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",14,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",14,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",15,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",15,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",15,null],[13,"Fixed","","Fixed-format item.",15,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",15,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"i":[{"n":"parsed"},{"n":"str"},{"n":"i"}],"o":{"n":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"i":[{"n":"formatter"},{"g":["naivedate"],"n":"option"},{"g":["naivetime"],"n":"option"},{"n":"option"},{"n":"i"}],"o":{"n":"result"}}],[0,"parsed","","A collection of parsed date and time items. They can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",16,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear","","Year in the ISO week date.",16,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"month","","Month (1--12).",16,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",16,null],[12,"weekday","","Day of the week.",16,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",16,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",16,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",16,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",16,null],[12,"minute","","Minute number (0--59).",16,null],[12,"second","","Second number (0--60, accounting for leap seconds).",16,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",16,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",16,null],[12,"offset","","Offset from the local time to UTC, in seconds.",16,null],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"parsed"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"parsed"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"parsed"}],"o":{"n":"bool"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns the initial value of parsed parts.",16,{"o":{"n":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",16,{"i":[{"n":"self"},{"n":"weekday"}],"o":{"n":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",16,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",16,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",16,{"i":[{"n":"self"}],"o":{"g":["naivedate"],"n":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",16,{"i":[{"n":"self"}],"o":{"g":["naivetime"],"n":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",16,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["naivedatetime"],"n":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",16,{"i":[{"n":"self"}],"o":{"g":["fixedoffset"],"n":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",16,{"i":[{"n":"self"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",16,{"i":[{"n":"self"},{"n":"tz"}],"o":{"g":["datetime"],"n":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",17,{"i":[{"n":"str"}],"o":{"n":"strftimeitems"}}],[11,"next","","",17,{"i":[{"n":"self"}],"o":{"g":["item"],"n":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"pad"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"pad"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"numeric"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"numeric"}],"o":{"n":"bool"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"fixed"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"fixed"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"item"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"bool"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",18,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",19,{"i":[{"g":["naivedate"],"n":"option"},{"g":["naivetime"],"n":"option"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",19,{"i":[{"g":["naivedate"],"n":"option"},{"g":["naivetime"],"n":"option"},{"n":"off"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",20,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",20,null],[10,"month","","Returns the month number starting from 1.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"month0","","Returns the month number starting from 0.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"day","","Returns the day of month starting from 1.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"weekday","","Returns the day of week.",20,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",20,null],[10,"with_year","","Makes a new value with the year number changed.",20,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",20,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",21,null],[10,"minute","","Returns the minute number from 0 to 59.",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",21,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",21,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",21,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",21,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"weekday"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"succ","","The next day in the week.",0,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"pred","","The previous day in the week.",0,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"g":["weekday"],"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"g":["weekday"],"n":"option"}}],[11,"weeks","chrono::duration","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",22,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",22,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",22,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",22,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",22,{"i":[{"n":"f"}],"o":{"n":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",22,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",22,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",22,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",22,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",22,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",22,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",22,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",22,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",22,{"o":{"n":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",22,{"o":{"n":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",22,{"o":{"n":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",22,{"i":[{"n":"duration"}],"o":{"g":["duration","outofrangeerror"],"n":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",22,{"i":[{"n":"self"}],"o":{"g":["duration","outofrangeerror"],"n":"result"}}],[11,"neg","","",22,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"div","","",22,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"add","","",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"le","","",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"gt","","",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ge","","",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"sub","","",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"cmp","","",22,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"ordering"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"mul","","",22,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}]],"paths":[[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"]]};
searchIndex["cl_sys"] = {"doc":"FFI bindings for OpenCL.","items":[[4,"c_void","cl_sys","",null,null],[6,"size_t","","",null,null],[6,"c_char","","",null,null],[6,"c_double","","",null,null],[6,"c_float","","",null,null],[6,"c_int","","",null,null],[6,"c_longlong","","",null,null],[6,"c_short","","",null,null],[6,"c_uchar","","",null,null],[6,"c_uint","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_ushort","","",null,null],[3,"cl_image_format","","",null,null],[12,"image_channel_order","","",0,null],[12,"image_channel_data_type","","",0,null],[3,"cl_image_desc","","",null,null],[12,"image_type","","",1,null],[12,"image_width","","",1,null],[12,"image_height","","",1,null],[12,"image_depth","","",1,null],[12,"image_array_size","","",1,null],[12,"image_row_pitch","","",1,null],[12,"image_slice_pitch","","",1,null],[12,"num_mip_levels","","",1,null],[12,"num_samples","","",1,null],[12,"buffer","","",1,null],[3,"cl_buffer_region","","",null,null],[12,"origin","","",2,null],[12,"size","","",2,null],[5,"clCreateFromGLBuffer","","",null,null],[5,"clCreateFromGLTexture","","",null,null],[5,"clGetGLObjectInfo","","",null,null],[5,"clGetGLTextureInfo","","",null,null],[5,"clCreateFromGLRenderbuffer","","",null,null],[5,"clEnqueueAcquireGLObjects","","",null,null],[5,"clEnqueueReleaseGLObjects","","",null,null],[5,"clCreateFromGLTexture2D","","",null,null],[5,"clCreateFromGLTexture3D","","",null,null],[5,"clGetGLContextInfoKHR","","",null,null],[5,"clGetPlatformIDs","","",null,null],[5,"clGetPlatformInfo","","",null,null],[5,"clGetDeviceIDs","","",null,null],[5,"clGetDeviceInfo","","",null,null],[5,"clCreateContext","","",null,null],[5,"clCreateContextFromType","","",null,null],[5,"clRetainContext","","",null,null],[5,"clReleaseContext","","",null,null],[5,"clGetContextInfo","","",null,null],[5,"clCreateCommandQueue","","",null,null],[5,"clRetainCommandQueue","","",null,null],[5,"clReleaseCommandQueue","","",null,null],[5,"clGetCommandQueueInfo","","",null,null],[5,"clCreateBuffer","","",null,null],[5,"clCreateSubBuffer","","",null,null],[5,"clCreateImage2D","","",null,null],[5,"clCreateImage3D","","",null,null],[5,"clRetainMemObject","","",null,null],[5,"clReleaseMemObject","","",null,null],[5,"clGetSupportedImageFormats","","",null,null],[5,"clGetMemObjectInfo","","",null,null],[5,"clGetImageInfo","","",null,null],[5,"clSetMemObjectDestructorCallback","","",null,null],[5,"clCreateSampler","","",null,null],[5,"clRetainSampler","","",null,null],[5,"clReleaseSampler","","",null,null],[5,"clGetSamplerInfo","","",null,null],[5,"clCreateProgramWithSource","","",null,null],[5,"clCreateProgramWithBinary","","",null,null],[5,"clRetainProgram","","",null,null],[5,"clReleaseProgram","","",null,null],[5,"clBuildProgram","","",null,null],[5,"clUnloadCompiler","","",null,null],[5,"clGetProgramInfo","","",null,null],[5,"clGetProgramBuildInfo","","",null,null],[5,"clCreateKernel","","",null,null],[5,"clCreateKernelsInProgram","","",null,null],[5,"clRetainKernel","","",null,null],[5,"clReleaseKernel","","",null,null],[5,"clSetKernelArg","","",null,null],[5,"clGetKernelInfo","","",null,null],[5,"clGetKernelWorkGroupInfo","","",null,null],[5,"clWaitForEvents","","",null,null],[5,"clGetEventInfo","","",null,null],[5,"clCreateUserEvent","","",null,null],[5,"clRetainEvent","","",null,null],[5,"clReleaseEvent","","",null,null],[5,"clSetUserEventStatus","","",null,null],[5,"clSetEventCallback","","",null,null],[5,"clGetEventProfilingInfo","","",null,null],[5,"clFlush","","",null,null],[5,"clFinish","","",null,null],[5,"clEnqueueReadBuffer","","",null,null],[5,"clEnqueueReadBufferRect","","",null,null],[5,"clEnqueueWriteBuffer","","",null,null],[5,"clEnqueueWriteBufferRect","","",null,null],[5,"clEnqueueCopyBuffer","","",null,null],[5,"clEnqueueCopyBufferRect","","",null,null],[5,"clEnqueueReadImage","","",null,null],[5,"clEnqueueWriteImage","","",null,null],[5,"clEnqueueCopyImage","","",null,null],[5,"clEnqueueCopyImageToBuffer","","",null,null],[5,"clEnqueueCopyBufferToImage","","",null,null],[5,"clEnqueueMapBuffer","","",null,null],[5,"clEnqueueMapImage","","",null,null],[5,"clEnqueueUnmapMemObject","","",null,null],[5,"clEnqueueNDRangeKernel","","",null,null],[5,"clEnqueueTask","","",null,null],[5,"clEnqueueNativeKernel","","",null,null],[5,"clEnqueueMarker","","",null,null],[5,"clEnqueueWaitForEvents","","",null,null],[5,"clEnqueueBarrier","","",null,null],[5,"clGetExtensionFunctionAddress","","",null,null],[5,"clCreateSubDevices","","",null,null],[5,"clRetainDevice","","",null,null],[5,"clReleaseDevice","","",null,null],[5,"clCreateImage","","",null,null],[5,"clCreateProgramWithBuiltInKernels","","",null,null],[5,"clCompileProgram","","",null,null],[5,"clLinkProgram","","",null,null],[5,"clGetKernelArgInfo","","",null,null],[5,"clEnqueueFillBuffer","","",null,null],[5,"clEnqueueFillImage","","",null,null],[5,"clEnqueueMigrateMemObjects","","",null,null],[5,"clEnqueueMarkerWithWaitList","","",null,null],[5,"clEnqueueBarrierWithWaitList","","",null,null],[5,"clGetExtensionFunctionAddressForPlatform","","",null,null],[5,"clSetDefaultDeviceCommandQueue","","",null,null],[5,"clGetDeviceAndHostTimer","","",null,null],[5,"clGetHostTimer","","",null,null],[5,"clCreateProgramWithIL","","",null,null],[5,"clCloneKernel","","",null,null],[5,"clGetKernelSubGroupInfo","","",null,null],[5,"clEnqueueSVMMigrateMem","","",null,null],[6,"cl_GLuint","","",null,null],[6,"cl_GLint","","",null,null],[6,"cl_GLenum","","",null,null],[6,"cl_gl_object_type","","",null,null],[6,"cl_gl_texture_info","","",null,null],[6,"cl_gl_platform_info","","",null,null],[6,"cl_gl_context_info","","",null,null],[6,"clGetGLContextInfoKHR_fn","","",null,null],[6,"CLeglImageKHR","","",null,null],[6,"CLeglDisplayKHR","","",null,null],[6,"CLeglSyncKHR","","",null,null],[6,"cl_egl_image_properties_khr","","",null,null],[6,"cl_d3d10_device_source_khr","","",null,null],[6,"cl_d3d10_device_set_khr","","",null,null],[6,"cl_platform_id","","",null,null],[6,"cl_device_id","","",null,null],[6,"cl_context","","",null,null],[6,"cl_command_queue","","",null,null],[6,"cl_mem","","",null,null],[6,"cl_program","","",null,null],[6,"cl_kernel","","",null,null],[6,"cl_event","","",null,null],[6,"cl_sampler","","",null,null],[6,"cl_char","","",null,null],[6,"cl_uchar","","",null,null],[6,"cl_short","","",null,null],[6,"cl_ushort","","",null,null],[6,"cl_int","","",null,null],[6,"cl_uint","","",null,null],[6,"cl_long","","",null,null],[6,"cl_ulong","","",null,null],[6,"cl_half","","",null,null],[6,"cl_float","","",null,null],[6,"cl_double","","",null,null],[6,"cl_bool","","",null,null],[6,"cl_bitfield","","",null,null],[6,"cl_device_type","","",null,null],[6,"cl_platform_info","","",null,null],[6,"cl_device_info","","",null,null],[6,"cl_device_fp_config","","",null,null],[6,"cl_device_mem_cache_type","","",null,null],[6,"cl_device_local_mem_type","","",null,null],[6,"cl_device_exec_capabilities","","",null,null],[6,"cl_device_svm_capabilities","","",null,null],[6,"cl_command_queue_properties","","",null,null],[6,"cl_device_partition_property","","",null,null],[6,"cl_device_affinity_domain","","",null,null],[6,"cl_context_properties","","",null,null],[6,"cl_context_info","","",null,null],[6,"cl_queue_properties","","",null,null],[6,"cl_command_queue_info","","",null,null],[6,"cl_channel_order","","",null,null],[6,"cl_channel_type","","",null,null],[6,"cl_mem_flags","","",null,null],[6,"cl_svm_mem_flags","","",null,null],[6,"cl_mem_object_type","","",null,null],[6,"cl_mem_info","","",null,null],[6,"cl_mem_migration_flags","","",null,null],[6,"cl_image_info","","",null,null],[6,"cl_buffer_create_type","","",null,null],[6,"cl_addressing_mode","","",null,null],[6,"cl_filter_mode","","",null,null],[6,"cl_sampler_info","","",null,null],[6,"cl_map_flags","","",null,null],[6,"cl_pipe_properties","","",null,null],[6,"cl_pipe_info","","",null,null],[6,"cl_program_info","","",null,null],[6,"cl_program_build_info","","",null,null],[6,"cl_program_binary_type","","",null,null],[6,"cl_build_status","","",null,null],[6,"cl_kernel_info","","",null,null],[6,"cl_kernel_arg_info","","",null,null],[6,"cl_kernel_arg_address_qualifier","","",null,null],[6,"cl_kernel_arg_access_qualifier","","",null,null],[6,"cl_kernel_arg_type_qualifier","","",null,null],[6,"cl_kernel_work_group_info","","",null,null],[6,"cl_kernel_sub_group_info","","",null,null],[6,"cl_event_info","","",null,null],[6,"cl_command_type","","",null,null],[6,"cl_profiling_info","","",null,null],[6,"cl_sampler_properties","","",null,null],[6,"cl_kernel_exec_info","","",null,null],[17,"GL_TEXTURE_1D","","",null,null],[17,"GL_TEXTURE_1D_ARRAY","","",null,null],[17,"GL_TEXTURE_BUFFER","","",null,null],[17,"GL_TEXTURE_2D","","",null,null],[17,"GL_TEXTURE_2D_ARRAY","","",null,null],[17,"GL_TEXTURE_3D","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_POSITIVE_X","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_NEGATIVE_X","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_POSITIVE_Y","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_NEGATIVE_Y","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_POSITIVE_Z","","",null,null],[17,"GL_TEXTURE_CUBE_MAP_NEGATIVE_Z","","",null,null],[17,"GL_TEXTURE_RECTANGLE","","",null,null],[17,"CL_GL_OBJECT_BUFFER","","",null,null],[17,"CL_GL_OBJECT_TEXTURE2D","","",null,null],[17,"CL_GL_OBJECT_TEXTURE3D","","",null,null],[17,"CL_GL_OBJECT_RENDERBUFFER","","",null,null],[17,"CL_GL_OBJECT_TEXTURE2D_ARRAY","","",null,null],[17,"CL_GL_OBJECT_TEXTURE1D","","",null,null],[17,"CL_GL_OBJECT_TEXTURE1D_ARRAY","","",null,null],[17,"CL_GL_OBJECT_TEXTURE_BUFFER","","",null,null],[17,"CL_GL_TEXTURE_TARGET","","",null,null],[17,"CL_GL_MIPMAP_LEVEL","","",null,null],[17,"CL_GL_NUM_SAMPLES","","",null,null],[17,"CL_KHR_GL_SHARING","","",null,null],[17,"CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR","","",null,null],[17,"CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR","","",null,null],[17,"CL_DEVICES_FOR_GL_CONTEXT_KHR","","",null,null],[17,"CL_GL_CONTEXT_KHR","","",null,null],[17,"CL_EGL_DISPLAY_KHR","","",null,null],[17,"CL_GLX_DISPLAY_KHR","","",null,null],[17,"CL_WGL_HDC_KHR","","",null,null],[17,"CL_CGL_SHAREGROUP_KHR","","",null,null],[17,"CL_CONTEXT_PROPERTY_USE_CGL_SHAREGROUP_APPLE","","",null,null],[17,"CL_CONTEXT_D3D10_DEVICE_KHR","","",null,null],[17,"CL_CONTEXT_ADAPTER_D3D9_KHR","","",null,null],[17,"CL_CONTEXT_ADAPTER_D3D9EX_KHR","","",null,null],[17,"CL_CONTEXT_ADAPTER_DXVA_KHR","","",null,null],[17,"CL_CONTEXT_D3D11_DEVICE_KHR","","",null,null],[17,"CL_SUCCESS","","",null,null],[17,"CL_DEVICE_NOT_FOUND","","",null,null],[17,"CL_DEVICE_NOT_AVAILABLE","","",null,null],[17,"CL_COMPILER_NOT_AVAILABLE","","",null,null],[17,"CL_MEM_OBJECT_ALLOCATION_FAILURE","","",null,null],[17,"CL_OUT_OF_RESOURCES","","",null,null],[17,"CL_OUT_OF_HOST_MEMORY","","",null,null],[17,"CL_PROFILING_INFO_NOT_AVAILABLE","","",null,null],[17,"CL_MEM_COPY_OVERLAP","","",null,null],[17,"CL_IMAGE_FORMAT_MISMATCH","","",null,null],[17,"CL_IMAGE_FORMAT_NOT_SUPPORTED","","",null,null],[17,"CL_BUILD_PROGRAM_FAILURE","","",null,null],[17,"CL_MAP_FAILURE","","",null,null],[17,"CL_MISALIGNED_SUB_BUFFER_OFFSET","","",null,null],[17,"CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST","","",null,null],[17,"CL_COMPILE_PROGRAM_FAILURE","","",null,null],[17,"CL_LINKER_NOT_AVAILABLE","","",null,null],[17,"CL_LINK_PROGRAM_FAILURE","","",null,null],[17,"CL_DEVICE_PARTITION_FAILED","","",null,null],[17,"CL_KERNEL_ARG_INFO_NOT_AVAILABLE","","",null,null],[17,"CL_INVALID_VALUE","","",null,null],[17,"CL_INVALID_DEVICE_TYPE","","",null,null],[17,"CL_INVALID_PLATFORM","","",null,null],[17,"CL_INVALID_DEVICE","","",null,null],[17,"CL_INVALID_CONTEXT","","",null,null],[17,"CL_INVALID_QUEUE_PROPERTIES","","",null,null],[17,"CL_INVALID_COMMAND_QUEUE","","",null,null],[17,"CL_INVALID_HOST_PTR","","",null,null],[17,"CL_INVALID_MEM_OBJECT","","",null,null],[17,"CL_INVALID_IMAGE_FORMAT_DESCRIPTOR","","",null,null],[17,"CL_INVALID_IMAGE_SIZE","","",null,null],[17,"CL_INVALID_SAMPLER","","",null,null],[17,"CL_INVALID_BINARY","","",null,null],[17,"CL_INVALID_BUILD_OPTIONS","","",null,null],[17,"CL_INVALID_PROGRAM","","",null,null],[17,"CL_INVALID_PROGRAM_EXECUTABLE","","",null,null],[17,"CL_INVALID_KERNEL_NAME","","",null,null],[17,"CL_INVALID_KERNEL_DEFINITION","","",null,null],[17,"CL_INVALID_KERNEL","","",null,null],[17,"CL_INVALID_ARG_INDEX","","",null,null],[17,"CL_INVALID_ARG_VALUE","","",null,null],[17,"CL_INVALID_ARG_SIZE","","",null,null],[17,"CL_INVALID_KERNEL_ARGS","","",null,null],[17,"CL_INVALID_WORK_DIMENSION","","",null,null],[17,"CL_INVALID_WORK_GROUP_SIZE","","",null,null],[17,"CL_INVALID_WORK_ITEM_SIZE","","",null,null],[17,"CL_INVALID_GLOBAL_OFFSET","","",null,null],[17,"CL_INVALID_EVENT_WAIT_LIST","","",null,null],[17,"CL_INVALID_EVENT","","",null,null],[17,"CL_INVALID_OPERATION","","",null,null],[17,"CL_INVALID_GL_OBJECT","","",null,null],[17,"CL_INVALID_BUFFER_SIZE","","",null,null],[17,"CL_INVALID_MIP_LEVEL","","",null,null],[17,"CL_INVALID_GLOBAL_WORK_SIZE","","",null,null],[17,"CL_INVALID_PROPERTY","","",null,null],[17,"CL_INVALID_IMAGE_DESCRIPTOR","","",null,null],[17,"CL_INVALID_COMPILER_OPTIONS","","",null,null],[17,"CL_INVALID_LINKER_OPTIONS","","",null,null],[17,"CL_INVALID_DEVICE_PARTITION_COUNT","","",null,null],[17,"CL_INVALID_PIPE_SIZE","","",null,null],[17,"CL_INVALID_DEVICE_QUEUE","","",null,null],[17,"CL_PLATFORM_NOT_FOUND_KHR","","",null,null],[17,"CL_VERSION_1_0","","",null,null],[17,"CL_VERSION_1_1","","",null,null],[17,"CL_VERSION_1_2","","",null,null],[17,"CL_VERSION_2_0","","",null,null],[17,"CL_VERSION_2_1","","",null,null],[17,"CL_FALSE","","",null,null],[17,"CL_TRUE","","",null,null],[17,"CL_BLOCKING","","",null,null],[17,"CL_NON_BLOCKING","","",null,null],[17,"CL_PLATFORM_PROFILE","","",null,null],[17,"CL_PLATFORM_VERSION","","",null,null],[17,"CL_PLATFORM_NAME","","",null,null],[17,"CL_PLATFORM_VENDOR","","",null,null],[17,"CL_PLATFORM_EXTENSIONS","","",null,null],[17,"CL_PLATFORM_HOST_TIMER_RESOLUTION","","",null,null],[17,"CL_DEVICE_TYPE_DEFAULT","","",null,null],[17,"CL_DEVICE_TYPE_CPU","","",null,null],[17,"CL_DEVICE_TYPE_GPU","","",null,null],[17,"CL_DEVICE_TYPE_ACCELERATOR","","",null,null],[17,"CL_DEVICE_TYPE_CUSTOM","","",null,null],[17,"CL_DEVICE_TYPE_ALL","","",null,null],[17,"CL_DEVICE_TYPE","","",null,null],[17,"CL_DEVICE_VENDOR_ID","","",null,null],[17,"CL_DEVICE_MAX_COMPUTE_UNITS","","",null,null],[17,"CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS","","",null,null],[17,"CL_DEVICE_MAX_WORK_GROUP_SIZE","","",null,null],[17,"CL_DEVICE_MAX_WORK_ITEM_SIZES","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE","","",null,null],[17,"CL_DEVICE_MAX_CLOCK_FREQUENCY","","",null,null],[17,"CL_DEVICE_ADDRESS_BITS","","",null,null],[17,"CL_DEVICE_MAX_READ_IMAGE_ARGS","","",null,null],[17,"CL_DEVICE_MAX_WRITE_IMAGE_ARGS","","",null,null],[17,"CL_DEVICE_MAX_MEM_ALLOC_SIZE","","",null,null],[17,"CL_DEVICE_IMAGE2D_MAX_WIDTH","","",null,null],[17,"CL_DEVICE_IMAGE2D_MAX_HEIGHT","","",null,null],[17,"CL_DEVICE_IMAGE3D_MAX_WIDTH","","",null,null],[17,"CL_DEVICE_IMAGE3D_MAX_HEIGHT","","",null,null],[17,"CL_DEVICE_IMAGE3D_MAX_DEPTH","","",null,null],[17,"CL_DEVICE_IMAGE_SUPPORT","","",null,null],[17,"CL_DEVICE_MAX_PARAMETER_SIZE","","",null,null],[17,"CL_DEVICE_MAX_SAMPLERS","","",null,null],[17,"CL_DEVICE_MEM_BASE_ADDR_ALIGN","","",null,null],[17,"CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE","","",null,null],[17,"CL_DEVICE_SINGLE_FP_CONFIG","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_CACHE_TYPE","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_CACHE_SIZE","","",null,null],[17,"CL_DEVICE_GLOBAL_MEM_SIZE","","",null,null],[17,"CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE","","",null,null],[17,"CL_DEVICE_MAX_CONSTANT_ARGS","","",null,null],[17,"CL_DEVICE_LOCAL_MEM_TYPE","","",null,null],[17,"CL_DEVICE_LOCAL_MEM_SIZE","","",null,null],[17,"CL_DEVICE_ERROR_CORRECTION_SUPPORT","","",null,null],[17,"CL_DEVICE_PROFILING_TIMER_RESOLUTION","","",null,null],[17,"CL_DEVICE_ENDIAN_LITTLE","","",null,null],[17,"CL_DEVICE_AVAILABLE","","",null,null],[17,"CL_DEVICE_COMPILER_AVAILABLE","","",null,null],[17,"CL_DEVICE_EXECUTION_CAPABILITIES","","",null,null],[17,"CL_DEVICE_QUEUE_PROPERTIES","","",null,null],[17,"CL_DEVICE_QUEUE_ON_HOST_PROPERTIES","","",null,null],[17,"CL_DEVICE_NAME","","",null,null],[17,"CL_DEVICE_VENDOR","","",null,null],[17,"CL_DRIVER_VERSION","","",null,null],[17,"CL_DEVICE_PROFILE","","",null,null],[17,"CL_DEVICE_VERSION","","",null,null],[17,"CL_DEVICE_EXTENSIONS","","",null,null],[17,"CL_DEVICE_PLATFORM","","",null,null],[17,"CL_DEVICE_DOUBLE_FP_CONFIG","","",null,null],[17,"CL_DEVICE_HALF_FP_CONFIG","","",null,null],[17,"CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF","","",null,null],[17,"CL_DEVICE_HOST_UNIFIED_MEMORY","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_INT","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE","","",null,null],[17,"CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF","","",null,null],[17,"CL_DEVICE_OPENCL_C_VERSION","","",null,null],[17,"CL_DEVICE_LINKER_AVAILABLE","","",null,null],[17,"CL_DEVICE_BUILT_IN_KERNELS","","",null,null],[17,"CL_DEVICE_IMAGE_MAX_BUFFER_SIZE","","",null,null],[17,"CL_DEVICE_IMAGE_MAX_ARRAY_SIZE","","",null,null],[17,"CL_DEVICE_PARENT_DEVICE","","",null,null],[17,"CL_DEVICE_PARTITION_MAX_SUB_DEVICES","","",null,null],[17,"CL_DEVICE_PARTITION_PROPERTIES","","",null,null],[17,"CL_DEVICE_PARTITION_AFFINITY_DOMAIN","","",null,null],[17,"CL_DEVICE_PARTITION_TYPE","","",null,null],[17,"CL_DEVICE_REFERENCE_COUNT","","",null,null],[17,"CL_DEVICE_PREFERRED_INTEROP_USER_SYNC","","",null,null],[17,"CL_DEVICE_PRINTF_BUFFER_SIZE","","",null,null],[17,"CL_DEVICE_IMAGE_PITCH_ALIGNMENT","","",null,null],[17,"CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT","","",null,null],[17,"CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS","","",null,null],[17,"CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE","","",null,null],[17,"CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES","","",null,null],[17,"CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE","","",null,null],[17,"CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE","","",null,null],[17,"CL_DEVICE_MAX_ON_DEVICE_QUEUES","","",null,null],[17,"CL_DEVICE_MAX_ON_DEVICE_EVENTS","","",null,null],[17,"CL_DEVICE_SVM_CAPABILITIES","","",null,null],[17,"CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE","","",null,null],[17,"CL_DEVICE_MAX_PIPE_ARGS","","",null,null],[17,"CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS","","",null,null],[17,"CL_DEVICE_PIPE_MAX_PACKET_SIZE","","",null,null],[17,"CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT","","",null,null],[17,"CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT","","",null,null],[17,"CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT","","",null,null],[17,"CL_DEVICE_IL_VERSION","","",null,null],[17,"CL_DEVICE_MAX_NUM_SUB_GROUPS","","",null,null],[17,"CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS","","",null,null],[17,"CL_FP_DENORM","","",null,null],[17,"CL_FP_INF_NAN","","",null,null],[17,"CL_FP_ROUND_TO_NEAREST","","",null,null],[17,"CL_FP_ROUND_TO_ZERO","","",null,null],[17,"CL_FP_ROUND_TO_INF","","",null,null],[17,"CL_FP_FMA","","",null,null],[17,"CL_FP_SOFT_FLOAT","","",null,null],[17,"CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT","","",null,null],[17,"CL_NONE","","",null,null],[17,"CL_READ_ONLY_CACHE","","",null,null],[17,"CL_READ_WRITE_CACHE","","",null,null],[17,"CL_LOCAL","","",null,null],[17,"CL_GLOBAL","","",null,null],[17,"CL_EXEC_KERNEL","","",null,null],[17,"CL_EXEC_NATIVE_KERNEL","","",null,null],[17,"CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE","","",null,null],[17,"CL_QUEUE_PROFILING_ENABLE","","",null,null],[17,"CL_QUEUE_ON_DEVICE","","",null,null],[17,"CL_QUEUE_ON_DEVICE_DEFAULT","","",null,null],[17,"CL_CONTEXT_REFERENCE_COUNT","","",null,null],[17,"CL_CONTEXT_DEVICES","","",null,null],[17,"CL_CONTEXT_PROPERTIES","","",null,null],[17,"CL_CONTEXT_NUM_DEVICES","","",null,null],[17,"CL_CONTEXT_PLATFORM","","",null,null],[17,"CL_CONTEXT_INTEROP_USER_SYNC","","",null,null],[17,"CL_DEVICE_PARTITION_EQUALLY","","",null,null],[17,"CL_DEVICE_PARTITION_BY_COUNTS","","",null,null],[17,"CL_DEVICE_PARTITION_BY_COUNTS_LIST_END","","",null,null],[17,"CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_NUMA","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE","","",null,null],[17,"CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE","","",null,null],[17,"CL_DEVICE_SVM_COARSE_GRAIN_BUFFER","","",null,null],[17,"CL_DEVICE_SVM_FINE_GRAIN_BUFFER","","",null,null],[17,"CL_DEVICE_SVM_FINE_GRAIN_SYSTEM","","",null,null],[17,"CL_DEVICE_SVM_ATOMICS","","",null,null],[17,"CL_QUEUE_CONTEXT","","",null,null],[17,"CL_QUEUE_DEVICE","","",null,null],[17,"CL_QUEUE_REFERENCE_COUNT","","",null,null],[17,"CL_QUEUE_PROPERTIES","","",null,null],[17,"CL_QUEUE_SIZE","","",null,null],[17,"CL_QUEUE_DEVICE_DEFAULT","","",null,null],[17,"CL_MEM_READ_WRITE","","",null,null],[17,"CL_MEM_WRITE_ONLY","","",null,null],[17,"CL_MEM_READ_ONLY","","",null,null],[17,"CL_MEM_USE_HOST_PTR","","",null,null],[17,"CL_MEM_ALLOC_HOST_PTR","","",null,null],[17,"CL_MEM_COPY_HOST_PTR","","",null,null],[17,"CL_MEM_HOST_WRITE_ONLY","","",null,null],[17,"CL_MEM_HOST_READ_ONLY","","",null,null],[17,"CL_MEM_HOST_NO_ACCESS","","",null,null],[17,"CL_MEM_SVM_FINE_GRAIN_BUFFER","","",null,null],[17,"CL_MEM_SVM_ATOMICS","","",null,null],[17,"CL_MEM_KERNEL_READ_AND_WRITE","","",null,null],[17,"CL_MIGRATE_MEM_OBJECT_HOST","","",null,null],[17,"CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED","","",null,null],[17,"CL_R","","",null,null],[17,"CL_A","","",null,null],[17,"CL_RG","","",null,null],[17,"CL_RA","","",null,null],[17,"CL_RGB","","",null,null],[17,"CL_RGBA","","",null,null],[17,"CL_BGRA","","",null,null],[17,"CL_ARGB","","",null,null],[17,"CL_INTENSITY","","",null,null],[17,"CL_LUMINANCE","","",null,null],[17,"CL_Rx","","",null,null],[17,"CL_RGx","","",null,null],[17,"CL_RGBx","","",null,null],[17,"CL_DEPTH","","",null,null],[17,"CL_DEPTH_STENCIL","","",null,null],[17,"CL_sRGB","","",null,null],[17,"CL_sRGBx","","",null,null],[17,"CL_sRGBA","","",null,null],[17,"CL_sBGRA","","",null,null],[17,"CL_ABGR","","",null,null],[17,"CL_SNORM_INT8","","",null,null],[17,"CL_SNORM_INT16","","",null,null],[17,"CL_UNORM_INT8","","",null,null],[17,"CL_UNORM_INT16","","",null,null],[17,"CL_UNORM_SHORT_565","","",null,null],[17,"CL_UNORM_SHORT_555","","",null,null],[17,"CL_UNORM_INT_101010","","",null,null],[17,"CL_SIGNED_INT8","","",null,null],[17,"CL_SIGNED_INT16","","",null,null],[17,"CL_SIGNED_INT32","","",null,null],[17,"CL_UNSIGNED_INT8","","",null,null],[17,"CL_UNSIGNED_INT16","","",null,null],[17,"CL_UNSIGNED_INT32","","",null,null],[17,"CL_HALF_FLOAT","","",null,null],[17,"CL_FLOAT","","",null,null],[17,"CL_UNORM_INT24","","",null,null],[17,"CL_UNORM_INT_101010_2","","",null,null],[17,"CL_MEM_OBJECT_BUFFER","","",null,null],[17,"CL_MEM_OBJECT_IMAGE2D","","",null,null],[17,"CL_MEM_OBJECT_IMAGE3D","","",null,null],[17,"CL_MEM_OBJECT_IMAGE2D_ARRAY","","",null,null],[17,"CL_MEM_OBJECT_IMAGE1D","","",null,null],[17,"CL_MEM_OBJECT_IMAGE1D_ARRAY","","",null,null],[17,"CL_MEM_OBJECT_IMAGE1D_BUFFER","","",null,null],[17,"CL_MEM_OBJECT_PIPE","","",null,null],[17,"CL_MEM_TYPE","","",null,null],[17,"CL_MEM_FLAGS","","",null,null],[17,"CL_MEM_SIZE","","",null,null],[17,"CL_MEM_HOST_PTR","","",null,null],[17,"CL_MEM_MAP_COUNT","","",null,null],[17,"CL_MEM_REFERENCE_COUNT","","",null,null],[17,"CL_MEM_CONTEXT","","",null,null],[17,"CL_MEM_ASSOCIATED_MEMOBJECT","","",null,null],[17,"CL_MEM_OFFSET","","",null,null],[17,"CL_MEM_USES_SVM_POINTER","","",null,null],[17,"CL_IMAGE_FORMAT","","",null,null],[17,"CL_IMAGE_ELEMENT_SIZE","","",null,null],[17,"CL_IMAGE_ROW_PITCH","","",null,null],[17,"CL_IMAGE_SLICE_PITCH","","",null,null],[17,"CL_IMAGE_WIDTH","","",null,null],[17,"CL_IMAGE_HEIGHT","","",null,null],[17,"CL_IMAGE_DEPTH","","",null,null],[17,"CL_IMAGE_ARRAY_SIZE","","",null,null],[17,"CL_IMAGE_BUFFER","","",null,null],[17,"CL_IMAGE_NUM_MIP_LEVELS","","",null,null],[17,"CL_IMAGE_NUM_SAMPLES","","",null,null],[17,"CL_PIPE_PACKET_SIZE","","",null,null],[17,"CL_PIPE_MAX_PACKETS","","",null,null],[17,"CL_ADDRESS_NONE","","",null,null],[17,"CL_ADDRESS_CLAMP_TO_EDGE","","",null,null],[17,"CL_ADDRESS_CLAMP","","",null,null],[17,"CL_ADDRESS_REPEAT","","",null,null],[17,"CL_ADDRESS_MIRRORED_REPEAT","","",null,null],[17,"CL_FILTER_NEAREST","","",null,null],[17,"CL_FILTER_LINEAR","","",null,null],[17,"CL_SAMPLER_REFERENCE_COUNT","","",null,null],[17,"CL_SAMPLER_CONTEXT","","",null,null],[17,"CL_SAMPLER_NORMALIZED_COORDS","","",null,null],[17,"CL_SAMPLER_ADDRESSING_MODE","","",null,null],[17,"CL_SAMPLER_FILTER_MODE","","",null,null],[17,"CL_SAMPLER_MIP_FILTER_MODE","","",null,null],[17,"CL_SAMPLER_LOD_MIN","","",null,null],[17,"CL_SAMPLER_LOD_MAX","","",null,null],[17,"CL_MAP_READ","","",null,null],[17,"CL_MAP_WRITE","","",null,null],[17,"CL_MAP_WRITE_INVALIDATE_REGION","","",null,null],[17,"CL_PROGRAM_REFERENCE_COUNT","","",null,null],[17,"CL_PROGRAM_CONTEXT","","",null,null],[17,"CL_PROGRAM_NUM_DEVICES","","",null,null],[17,"CL_PROGRAM_DEVICES","","",null,null],[17,"CL_PROGRAM_SOURCE","","",null,null],[17,"CL_PROGRAM_BINARY_SIZES","","",null,null],[17,"CL_PROGRAM_BINARIES","","",null,null],[17,"CL_PROGRAM_NUM_KERNELS","","",null,null],[17,"CL_PROGRAM_KERNEL_NAMES","","",null,null],[17,"CL_PROGRAM_IL","","",null,null],[17,"CL_PROGRAM_BUILD_STATUS","","",null,null],[17,"CL_PROGRAM_BUILD_OPTIONS","","",null,null],[17,"CL_PROGRAM_BUILD_LOG","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE","","",null,null],[17,"CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_NONE","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_LIBRARY","","",null,null],[17,"CL_PROGRAM_BINARY_TYPE_EXECUTABLE","","",null,null],[17,"CL_BUILD_SUCCESS","","",null,null],[17,"CL_BUILD_NONE","","",null,null],[17,"CL_BUILD_ERROR","","",null,null],[17,"CL_BUILD_IN_PROGRESS","","",null,null],[17,"CL_KERNEL_FUNCTION_NAME","","",null,null],[17,"CL_KERNEL_NUM_ARGS","","",null,null],[17,"CL_KERNEL_REFERENCE_COUNT","","",null,null],[17,"CL_KERNEL_CONTEXT","","",null,null],[17,"CL_KERNEL_PROGRAM","","",null,null],[17,"CL_KERNEL_ATTRIBUTES","","",null,null],[17,"CL_KERNEL_MAX_NUM_SUB_GROUPS","","",null,null],[17,"CL_KERNEL_COMPILE_NUM_SUB_GROUPS","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_QUALIFIER","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_QUALIFIER","","",null,null],[17,"CL_KERNEL_ARG_TYPE_NAME","","",null,null],[17,"CL_KERNEL_ARG_TYPE_QUALIFIER","","",null,null],[17,"CL_KERNEL_ARG_NAME","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_GLOBAL","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_LOCAL","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_CONSTANT","","",null,null],[17,"CL_KERNEL_ARG_ADDRESS_PRIVATE","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_READ_ONLY","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_WRITE_ONLY","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_READ_WRITE","","",null,null],[17,"CL_KERNEL_ARG_ACCESS_NONE","","",null,null],[17,"CL_KERNEL_ARG_TYPE_NONE","","",null,null],[17,"CL_KERNEL_ARG_TYPE_CONST","","",null,null],[17,"CL_KERNEL_ARG_TYPE_RESTRICT","","",null,null],[17,"CL_KERNEL_ARG_TYPE_VOLATILE","","",null,null],[17,"CL_KERNEL_ARG_TYPE_PIPE","","",null,null],[17,"CL_KERNEL_WORK_GROUP_SIZE","","",null,null],[17,"CL_KERNEL_COMPILE_WORK_GROUP_SIZE","","",null,null],[17,"CL_KERNEL_LOCAL_MEM_SIZE","","",null,null],[17,"CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE","","",null,null],[17,"CL_KERNEL_PRIVATE_MEM_SIZE","","",null,null],[17,"CL_KERNEL_GLOBAL_WORK_SIZE","","",null,null],[17,"CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE","","",null,null],[17,"CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE","","",null,null],[17,"CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT","","",null,null],[17,"CL_KERNEL_EXEC_INFO_SVM_PTRS","","",null,null],[17,"CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM","","",null,null],[17,"CL_EVENT_COMMAND_QUEUE","","",null,null],[17,"CL_EVENT_COMMAND_TYPE","","",null,null],[17,"CL_EVENT_REFERENCE_COUNT","","",null,null],[17,"CL_EVENT_COMMAND_EXECUTION_STATUS","","",null,null],[17,"CL_EVENT_CONTEXT","","",null,null],[17,"CL_COMMAND_NDRANGE_KERNEL","","",null,null],[17,"CL_COMMAND_TASK","","",null,null],[17,"CL_COMMAND_NATIVE_KERNEL","","",null,null],[17,"CL_COMMAND_READ_BUFFER","","",null,null],[17,"CL_COMMAND_WRITE_BUFFER","","",null,null],[17,"CL_COMMAND_COPY_BUFFER","","",null,null],[17,"CL_COMMAND_READ_IMAGE","","",null,null],[17,"CL_COMMAND_WRITE_IMAGE","","",null,null],[17,"CL_COMMAND_COPY_IMAGE","","",null,null],[17,"CL_COMMAND_COPY_IMAGE_TO_BUFFER","","",null,null],[17,"CL_COMMAND_COPY_BUFFER_TO_IMAGE","","",null,null],[17,"CL_COMMAND_MAP_BUFFER","","",null,null],[17,"CL_COMMAND_MAP_IMAGE","","",null,null],[17,"CL_COMMAND_UNMAP_MEM_OBJECT","","",null,null],[17,"CL_COMMAND_MARKER","","",null,null],[17,"CL_COMMAND_ACQUIRE_GL_OBJECTS","","",null,null],[17,"CL_COMMAND_RELEASE_GL_OBJECTS","","",null,null],[17,"CL_COMMAND_READ_BUFFER_RECT","","",null,null],[17,"CL_COMMAND_WRITE_BUFFER_RECT","","",null,null],[17,"CL_COMMAND_COPY_BUFFER_RECT","","",null,null],[17,"CL_COMMAND_USER","","",null,null],[17,"CL_COMMAND_BARRIER","","",null,null],[17,"CL_COMMAND_MIGRATE_MEM_OBJECTS","","",null,null],[17,"CL_COMMAND_FILL_BUFFER","","",null,null],[17,"CL_COMMAND_FILL_IMAGE","","",null,null],[17,"CL_COMMAND_SVM_FREE","","",null,null],[17,"CL_COMMAND_SVM_MEMCPY","","",null,null],[17,"CL_COMMAND_SVM_MEMFILL","","",null,null],[17,"CL_COMMAND_SVM_MAP","","",null,null],[17,"CL_COMMAND_SVM_UNMAP","","",null,null],[17,"CL_COMPLETE","","",null,null],[17,"CL_RUNNING","","",null,null],[17,"CL_SUBMITTED","","",null,null],[17,"CL_QUEUED","","",null,null],[17,"CL_BUFFER_CREATE_TYPE_REGION","","",null,null],[17,"CL_PROFILING_COMMAND_QUEUED","","",null,null],[17,"CL_PROFILING_COMMAND_SUBMIT","","",null,null],[17,"CL_PROFILING_COMMAND_START","","",null,null],[17,"CL_PROFILING_COMMAND_END","","",null,null],[17,"CL_PROFILING_COMMAND_COMPLETE","","",null,null]],"paths":[[3,"cl_image_format"],[3,"cl_image_desc"],[3,"cl_buffer_region"]]};
searchIndex["color_quant"] = {"doc":"Color quantization library This library provides a color quantizer based on the NEUQUANT quantization algorithm by Anthony Dekker. ### Usage `let data = vec![0; 40]; let nq = color_quant::NeuQuant::new(10, 256, &data); let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect(); let color_map = nq.color_map_rgba();`","items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,null],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,null],[11,"index_of","","Finds the best-matching index in the color map.",0,null],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample. ",0,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample. ",0,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}]],"paths":[[3,"NeuQuant"]]};
searchIndex["colorify"] = {"doc":"Format text printed to the terminal using ANSI colors.","items":[[14,"colorify","colorify","Adds color to a formatting literal.",null,null],[14,"printc","","`print!` with all the glorious colors of the the ANSI rainbow.",null,null],[14,"printlnc","","`println!` with color.",null,null],[14,"help","","Returns a help string which lists all of the colors.",null,null]],"paths":[]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"CachePadded","","Pad `T` to the length of a cacheline.",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"i":[{"n":"f"}],"o":{"n":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"i":[{"n":"f"}],"o":{"n":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"i":[{"n":"builder"},{"n":"f"}],"o":{"g":["joinhandle"],"n":"result"}}],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",null,null],[5,"pin","","Pin the current epoch.",null,{"o":{"n":"guard"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"null","","",0,{"o":{"n":"atomic"}}],[11,"new","","Create a new atomic pointer",0,{"i":[{"n":"t"}],"o":{"n":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",0,{"i":[{"n":"self"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared"],"n":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["owned"],"n":"option"},{"n":"ordering"}]}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",0,{"i":[{"n":"self"},{"n":"owned"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"n":"ordering"}]}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"g":["owned"],"n":"option"},{"n":"ordering"}],"o":{"g":["option"],"n":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"n":"owned"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared","owned"],"n":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"g":["shared"],"n":"option"},{"n":"ordering"}],"o":{"n":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["owned"],"n":"option"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared"],"n":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",1,{"i":[{"n":"self"},{"n":"shared"}]}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,{"i":[{"n":"self"}]}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Move `t` to a new heap allocation.",2,{"i":[{"n":"t"}],"o":{"n":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"shared"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"shared"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[11,"deref","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_raw","","",3,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber's lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"new","","",4,{"o":{"n":"atomicoption"}}],[11,"swap_box","","",4,{"i":[{"n":"self"},{"n":"box"},{"n":"ordering"}],"o":{"g":["box"],"n":"option"}}],[11,"swap","","",4,{"i":[{"n":"self"},{"n":"t"},{"n":"ordering"}],"o":{"n":"option"}}],[11,"take","","",4,{"i":[{"n":"self"},{"n":"ordering"}],"o":{"n":"option"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty queue.",5,{"o":{"n":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",5,{"i":[{"n":"self"},{"n":"t"}]}],[11,"is_empty","","Check if this queue is empty.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty stack.",6,{"o":{"n":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",6,{"i":[{"n":"self"},{"n":"t"}]}],[11,"pop","","Attempt to pop the top element of the stack. Deprecated method, use try_pop",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"try_pop","","Attempt to pop the top element of the stack.",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"is_empty","","Check if this queue is empty.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"default","","",6,{"o":{"n":"self"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty queue.",7,{"o":{"n":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",7,{"i":[{"n":"self"},{"n":"t"}]}],[11,"is_empty","","Judge if the queue is empty.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",7,{"i":[{"n":"self"}]}],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",8,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",8,null],[13,"Data","","The stealer has successfully stolen some data.",8,null],[5,"deque","","Creates a new empty deque",null,null],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",9,{"i":[{"n":"self"},{"n":"t"}]}],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",10,{"i":[{"n":"self"}],"o":{"n":"steal"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"stealer"}}],[11,"fmt","crossbeam::sync","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",11,{"i":[{"n":"self"}]}],[11,"new","","Creates a new `ArcCell`.",11,{"i":[{"n":"arc"}],"o":{"n":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",11,{"i":[{"n":"self"},{"n":"arc"}],"o":{"n":"arc"}}],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",11,{"i":[{"n":"self"}],"o":{"n":"arc"}}],[11,"fmt","crossbeam","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",12,{"i":[{"n":"self"},{"n":"f"}]}],[11,"spawn","","Create a scoped thread.",12,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",12,{"i":[{"n":"self"}],"o":{"n":"scopedthreadbuilder"}}],[11,"join","","Join the scoped thread, returning the result it produced.",13,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"thread","","Get the underlying thread handle.",13,{"i":[{"n":"self"}],"o":{"n":"thread"}}],[11,"drop","","",12,{"i":[{"n":"self"}]}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"zeroed","","A const fn equivalent to mem::zeroed().",14,{"o":{"n":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",14,{"i":[{"n":"t"}],"o":{"n":"cachepadded"}}],[11,"deref","","",14,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",14,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"CachePadded"]]};
searchIndex["crossbeam_deque"] = {"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",null,null],[3,"Stealer","","A stealer that steals elements from the top of a deque.",null,null],[4,"Steal","","Possible outcomes of a steal operation.",null,null],[13,"Empty","","The deque was empty at the time of stealing.",0,null],[13,"Data","","Some data has been successfully stolen.",0,null],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"ordering"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"steal"}}],[11,"new","","Returns a new deque.",1,{"o":{"n":"deque"}}],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,{"i":[{"n":"usize"}],"o":{"n":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of elements in the deque.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"push","","Pushes an element into the bottom of the deque.",1,{"i":[{"n":"self"},{"n":"t"}]}],[11,"pop","","Pops an element from the bottom of the deque.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"i":[{"n":"self"}],"o":{"n":"steal"}}],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,{"i":[{"n":"self"}],"o":{"n":"stealer"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",1,{"o":{"n":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of elements in the deque.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",2,{"i":[{"n":"self"}],"o":{"n":"steal"}}],[11,"clone","","Creates another stealer.",2,{"i":[{"n":"self"}],"o":{"n":"stealer"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"] = {"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",null,null],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",null,null],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,null],[12,"new","","The new value, which the operation failed to store.",0,null],[3,"Owned","","An owned heap-allocated object.",null,null],[3,"Shared","","A pointer to an object protected by the epoch GC.",null,null],[3,"Guard","","A guard that keeps the current thread pinned.",null,null],[3,"Collector","","An epoch-based garbage collector.",null,null],[3,"Handle","","A handle to a garbage collector.",null,null],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",null,{"o":{"n":"guard"}}],[5,"default_handle","","Returns the default handle associated with the current thread.",null,{"o":{"n":"handle"}}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"o":{"n":"bool"}}],[5,"pin","","Pins the current thread.",null,{"o":{"n":"guard"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"null","","Returns a new null atomic pointer.",1,{"o":{"n":"atomic"}}],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,{"i":[{"n":"t"}],"o":{"n":"atomic"}}],[11,"load","","Loads a `Shared` from the atomic pointer.",1,{"i":[{"n":"self"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,{"i":[{"n":"self"},{"n":"p"},{"n":"ordering"}]}],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,{"i":[{"n":"self"},{"n":"p"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"i":[{"n":"self"},{"n":"shared"},{"n":"p"},{"n":"o"},{"n":"guard"}],"o":{"g":["shared","compareandseterror"],"n":"result"}}],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"i":[{"n":"self"},{"n":"shared"},{"n":"p"},{"n":"o"},{"n":"guard"}],"o":{"g":["shared","compareandseterror"],"n":"result"}}],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","Returns a copy of the atomic value.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",1,{"o":{"n":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,{"i":[{"n":"owned"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"box"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,{"i":[{"n":"shared"}],"o":{"n":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,null],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,{"i":[{"n":"t"}],"o":{"n":"owned"}}],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,null],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,{"i":[{"n":"self"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"into_box","","Converts the owned pointer into a `Box`.",2,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"tag","","Returns the tag stored within the pointer.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"owned"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",2,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from","","Returns a new owned pointer pointing to `b`.",2,{"i":[{"n":"box"}],"o":{"n":"self"}}],[11,"borrow","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"borrow_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"null","","Returns a new null pointer.",3,{"o":{"n":"shared"}}],[11,"is_null","","Returns `true` if the pointer is null.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,null],[11,"deref","","Dereferences the pointer.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","Converts the pointer to a reference.",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_owned","","Takes ownership of the pointee.",3,{"i":[{"n":"self"}],"o":{"n":"owned"}}],[11,"tag","","Returns the tag stored within the pointer.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"shared"}}],[11,"from","","Returns a new pointer pointing to `raw`.",3,null],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"self"}}],[11,"new","","Creates a new collector.",4,{"o":{"n":"self"}}],[11,"handle","","Creates a new handle for the collector.",4,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"clone","","Creates another reference to the same garbage collector.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"pin","","Pins the handle.",5,{"i":[{"n":"self"}],"o":{"n":"guard"}}],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,{"i":[{"n":"self"},{"n":"f"}]}],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,{"i":[{"n":"self"}]}],[11,"repin","","Unpins and then immediately re-pins the thread.",6,{"i":[{"n":"self"}]}],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"guard"}}],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",null,null],[10,"success","","The ordering of the operation when it succeeds.",7,{"i":[{"n":"self"}],"o":{"n":"ordering"}}],[10,"failure","","The ordering of the operation when it fails.",7,{"i":[{"n":"self"}],"o":{"n":"ordering"}}]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"]]};
searchIndex["crossbeam_utils"] = {"doc":"","items":[[0,"cache_padded","crossbeam_utils","",null,null],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",null,null],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"new","","Pads a value to the length of a cache line.",0,{"i":[{"n":"t"}],"o":{"n":"cachepadded"}}],[11,"deref","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"default","","",0,{"o":{"n":"self"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"self"}}],[0,"atomic_option","crossbeam_utils","",null,null],[3,"AtomicOption","crossbeam_utils::atomic_option","",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"new","","",1,{"o":{"n":"self"}}],[11,"swap_box","","",1,{"i":[{"n":"self"},{"n":"box"},{"n":"ordering"}],"o":{"g":["box"],"n":"option"}}],[11,"swap","","",1,{"i":[{"n":"self"},{"n":"t"},{"n":"ordering"}],"o":{"n":"option"}}],[11,"take","","",1,{"i":[{"n":"self"},{"n":"ordering"}],"o":{"n":"option"}}],[11,"default","","",1,{"o":{"n":"self"}}],[0,"scoped","crossbeam_utils","",null,null],[3,"Scope","crossbeam_utils::scoped","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",null,null],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"i":[{"n":"f"}],"o":{"n":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"i":[{"n":"builder"},{"n":"f"}],"o":{"g":["joinhandle"],"n":"result"}}],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"i":[{"n":"f"}],"o":{"n":"r"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",2,{"i":[{"n":"self"},{"n":"f"}]}],[11,"spawn","","Create a scoped thread.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",2,{"i":[{"n":"self"}],"o":{"n":"scopedthreadbuilder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",4,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"scopedthreadbuilder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"scopedthreadbuilder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["scopedjoinhandle"],"n":"result"}}],[11,"join","","Join the scoped thread, returning the result it produced.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"thread","","Get the underlying thread handle.",3,{"i":[{"n":"self"}],"o":{"n":"thread"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}]],"paths":[[3,"CachePadded"],[3,"AtomicOption"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"]]};
searchIndex["deflate"] = {"doc":"An implementation an encoder using DEFLATE compression algorightm in pure rust.","items":[[3,"CompressionOptions","deflate","A struct describing the options for a compressor or compression function.",null,null],[12,"max_hash_checks","","The maximum number of checks to make in the hash table for matches.",0,null],[12,"lazy_if_less_than","","Only lazy match if we have a length less than this value.",0,null],[12,"matching_type","","Whether to use lazy or greedy matching.",0,null],[12,"special","","Force fixed/stored blocks (Not implemented yet). * Default value: `SpecialOptions::Normal`",0,null],[4,"SpecialOptions","","Enum allowing some special options (not implemented yet)!",null,null],[13,"Normal","","Compress normally.",1,null],[13,"_ForceFixed","","Force fixed huffman tables. (Unimplemented!).",1,null],[13,"_ForceStored","","Force stored (uncompressed) blocks only. (Unimplemented!).",1,null],[4,"Compression","","An enum describing the level of compression to be used by the encoder",null,null],[13,"Fast","","Fast minimal compression (`CompressionOptions::fast()`).",2,null],[13,"Default","","Default level (`CompressionOptions::default()`).",2,null],[13,"Best","","Higher compression level (`CompressionOptions::high()`).",2,null],[4,"MatchingType","","An enum describing whether we use lazy or greedy matching.",null,null],[13,"Greedy","","Use greedy matching: the matching algorithm simply uses a match right away if found.",3,null],[13,"Lazy","","Use lazy matching: after finding a match, the next input byte is checked, to see if there is a better match starting at that byte.",3,null],[5,"deflate_bytes_conf","","Compress the given slice of bytes with DEFLATE compression.",null,null],[5,"deflate_bytes","","Compress the given slice of bytes with DEFLATE compression using the default compression level.",null,null],[5,"deflate_bytes_zlib_conf","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer.",null,null],[5,"deflate_bytes_zlib","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer, using the default compression level.",null,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"compression"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"compression"}],"o":{"n":"bool"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"compression"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"compression"}],"o":{"g":["ordering"],"n":"option"}}],[11,"hash","","",2,null],[11,"default","","",2,{"o":{"n":"compression"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"specialoptions"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"specialoptions"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"o":{"n":"specialoptions"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"compressionoptions"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"compressionoptions"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"compressionoptions"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"high","","Returns compression settings rouhgly corresponding to the `HIGH(9)` setting in miniz.",0,{"o":{"n":"compressionoptions"}}],[11,"fast","","Returns  a fast set of compression settings",0,{"o":{"n":"compressionoptions"}}],[11,"huffman_only","","Returns a set of compression settings that makes the compressor only compress using huffman coding. (Ignoring any length/distance matching)",0,{"o":{"n":"compressionoptions"}}],[11,"rle","","Returns a set of compression settings that makes the compressor compress only using run-length encoding (i.e only looking for matches one byte back).",0,{"o":{"n":"compressionoptions"}}],[11,"default","","Returns the options describing the default compression level.",0,{"o":{"n":"compressionoptions"}}],[11,"from","","",0,{"i":[{"n":"compression"}],"o":{"n":"compressionoptions"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"matchingtype"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"matchingtype"}],"o":{"n":"bool"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"matchingtype"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"matchingtype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"write","","Encoders implementing a `Write` interface.",null,null],[3,"DeflateEncoder","deflate::write","A DEFLATE encoder/compressor.",null,null],[3,"ZlibEncoder","","A Zlib encoder/compressor.",null,null],[11,"new","","Creates a new encoder using the provided compression options.",4,{"i":[{"n":"w"},{"n":"o"}],"o":{"n":"deflateencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `DeflateEncoder`, and return the contained writer if writing succeeds.",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",4,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"write","","",4,null],[11,"flush","","Flush the encoder.",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",4,{"i":[{"n":"self"}]}],[11,"new","","Create a new `ZlibEncoder` using the provided compression options.",5,{"i":[{"n":"w"},{"n":"o"}],"o":{"n":"zlibencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `ZlibEncoder`, and return the contained writer if writing succeeds.",5,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",5,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"checksum","","Return the adler32 checksum of the currently consumed data.",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"write","","",5,null],[11,"flush","","Flush the encoder.",5,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",5,{"i":[{"n":"self"}]}]],"paths":[[3,"CompressionOptions"],[4,"SpecialOptions"],[4,"Compression"],[4,"MatchingType"],[3,"DeflateEncoder"],[3,"ZlibEncoder"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",0,{"i":[{"n":"result"}],"o":{"n":"self"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"extend","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",0,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize"],"n":"result"}}],[11,"fill_buf","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"consume","","",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"write","","",0,null],[11,"flush","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an `enum` declaration and automatically adds an implementation of `num::FromPrimitive` (reexported here), to allow conversion from primitive integers to the enum.  It therefore provides an alternative to the built-in `#[derive(FromPrimitive)]`, which requires the unstable `std::num::FromPrimitive` and is disabled in Rust 1.0.","items":[[4,"Option","enum_primitive","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[14,"enum_from_primitive_impl_ty","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive","","Wrap this macro around an `enum` declaration to get an automatically generated implementation of `num::FromPrimitive`.",null,null],[11,"is_some","","Returns `true` if the option is a [`Some`] value.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_pin_mut","","Converts from `Option<T>` to `Option<PinMut<'_, T>>`",0,{"i":[{"g":["option"],"n":"pinmut"}],"o":{"g":["pinmut"],"n":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",0,{"i":[{"n":"self"},{"n":"u"},{"n":"f"}],"o":{"n":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",0,{"i":[{"n":"self"},{"n":"d"},{"n":"f"}],"o":{"n":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",0,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",0,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns `None`.",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",0,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"into_result","","",0,{"i":[{"n":"self"}],"o":{"g":["noneerror"],"n":"result"}}],[11,"from_ok","","",0,{"i":[{"n":"t"}],"o":{"n":"option"}}],[11,"from_error","","",0,{"i":[{"n":"noneerror"}],"o":{"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","","Returns [`None`].",0,{"o":{"n":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"option"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"ordering"}}],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",0,{"i":[{"n":"i"}],"o":{"n":"option"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"hash","","",0,null]],"paths":[[4,"Option"],[8,"FromPrimitive"]]};
searchIndex["failure"] = {"doc":"An experimental new error-handling library. Guide-style introduction is available here.","items":[[3,"Backtrace","failure","A `Backtrace`.",null,null],[3,"Compat","","A compatibility wrapper around an error type from this crate.",null,null],[3,"Context","","An error with context around it.",null,null],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",null,null],[3,"Error","","The `Error` type, which can contain any failure.",null,null],[3,"Causes","","A iterator over the causes of a `Fail`",null,null],[5,"err_msg","","Constructs a `Fail` type from a string.",null,{"i":[{"n":"d"}],"o":{"n":"error"}}],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,{"o":{"n":"backtrace"}}],[11,"default","","",0,{"o":{"n":"backtrace"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"compat"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"compat"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"compat"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"o":{"n":"compat"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_inner","","Unwraps this into the inner error.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"get_ref","","Gets a reference to the inner error.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Creates a new context without an underlying error message.",2,{"i":[{"n":"d"}],"o":{"n":"context"}}],[11,"get_context","","Returns a reference to the context provided with this error.",2,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"cause","","",2,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","",2,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",2,{"i":[{"n":"d"}],"o":{"n":"context"}}],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,{"i":[{"n":"e"}],"o":{"n":"self"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"f"}],"o":{"n":"error"}}],[11,"from_boxed_compat","","Creates an `Error` from `Box<std::error::Error>`.",4,{"i":[{"g":["stderror"],"n":"box"}],"o":{"n":"error"}}],[11,"as_fail","","Return a reference to the underlying failure that this `Error` contains.",4,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,{"i":[{"n":"self"}],"o":{"n":"backtrace"}}],[11,"context","","Provides context for this `Error`.",4,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"context"}}],[11,"compat","","Wraps `Error` in a compatibility type.",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"compat"}}],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"find_root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"iter_causes","","Returns a iterator over the causes of this error with the cause of the fail as the first item and the `root_cause` as the final item.",4,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",4,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"root_cause","","Deprecated alias to `find_root_cause`.",4,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"causes","","Deprecated alias to `iter_causes`.",4,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",4,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[6,"Fallible","","A common result with an `Error`.",null,null],[8,"ResultExt","","Extension methods for `Result`.",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,{"i":[{"n":"self"}],"o":{"g":["compat"],"n":"result"}}],[10,"context","","Wraps the error type in a context type.",5,{"i":[{"n":"self"},{"n":"d"}],"o":{"g":["context"],"n":"result"}}],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["context"],"n":"result"}}],[8,"Fail","","The `Fail` trait.",null,null],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"context","","Provides context for this failure.",6,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"context"}}],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,{"i":[{"n":"self"}],"o":{"n":"compat"}}],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"find_root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"iter_causes","","Returns a iterator over the causes of this `Fail` with the cause of this fail as the first item and the `root_cause` as the final item.",6,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",6,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"root_cause","","Deprecated alias to `find_root_cause`.",6,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"causes","","Deprecated alias to `iter_causes`.",6,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[14,"bail","","Exits a function early with an `Error`.",null,null],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",null,null],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",null,null]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"] = {"doc":"","items":[[5,"Fail","failure_derive","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["find_folder"] = {"doc":"","items":[[3,"SearchFolder","find_folder","A search defined as a starting path and a route to take.",null,null],[12,"start","","The starting path of the search.",0,null],[12,"direction","","The route to take while searching.",0,null],[4,"Search","","The direction in which `find_folder` should search for the folder.",null,null],[13,"Parents","","Search recursively through parent directories with the given depth.",1,null],[13,"Kids","","Search recursively through children directories with the given depth.",1,null],[13,"ParentsThenKids","","Search parents and then kids (same as `Both`).",1,null],[13,"KidsThenParents","","Search kids and then parents.",1,null],[4,"Error","","If the search was unsuccessful.",null,null],[13,"IO","","Some std io Error occurred.",2,null],[13,"NotFound","","The directory requested was not found.",2,null],[5,"check_kids","","Check the contents of this folder and children folders.",null,{"i":[{"n":"u8"},{"n":"str"},{"n":"path"}],"o":{"g":["pathbuf","error"],"n":"result"}}],[5,"check_parents","","Check the given path and `depth` number of parent directories for a folder with the given name.",null,{"i":[{"n":"u8"},{"n":"str"},{"n":"path"}],"o":{"g":["pathbuf","error"],"n":"result"}}],[5,"check_dir","","Check the given directory for a folder with the matching name.",null,{"i":[{"n":"str"},{"n":"path"}],"o":{"g":["pathbuf","error"],"n":"result"}}],[6,"KidsDepth","","Depth of recursion through kids.",null,null],[6,"ParentsDepth","","Depth of recursion through parents.",null,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"search"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"search"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"search"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"searchfolder"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",2,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"for_folder","","An easy API method for finding a folder with a given name. i.e. `Search::Kids(u8).for_folder(\"assets\")`",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["pathbuf","error"],"n":"result"}}],[11,"of","","Use this to search in a specific folder.",1,{"i":[{"n":"self"},{"n":"pathbuf"}],"o":{"n":"searchfolder"}}],[11,"for_folder","","Search for a folder with the given name.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["pathbuf","error"],"n":"result"}}]],"paths":[[3,"SearchFolder"],[4,"Search"],[4,"Error"]]};
searchIndex["futures"] = {"doc":"Abstractions for asynchronous programming.","items":[[8,"Future","futures","A future represents an asychronous computation that may fail.",null,null],[16,"Item","","A successful value",0,null],[16,"Error","","An error",0,null],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[8,"IntoFuture","","Types that can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",1,null],[16,"Item","","The item that the future may resolve with.",1,null],[16,"Error","","The error that the future may resolve with.",1,null],[10,"into_future","","Consumes this object and produces a future.",1,null],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",null,null],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",2,{"i":[{"n":"self"}],"o":{"n":"errinto"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"select","","Waits for either one of two differently-typed futures to complete.",2,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",2,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"join"}}],[11,"join3","","Same as `join`, but with more futures.",2,{"i":[{"n":"self"},{"n":"b"},{"n":"c"}],"o":{"n":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",2,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"}],"o":{"n":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",2,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"},{"n":"e"}],"o":{"n":"join5"}}],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"into_stream","","Convert this future into a single element stream.",2,{"i":[{"n":"self"}],"o":{"n":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",2,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",2,{"i":[{"n":"self"}],"o":{"n":"flattensink"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",2,{"i":[{"n":"self"}],"o":{"n":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",2,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of a future, passing it on.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",2,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",2,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"recover"}}],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",2,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"withexecutor"}}],[8,"Stream","","A stream of values produced asynchronously.",null,null],[16,"Item","","Values yielded by the stream.",3,null],[16,"Error","","Errors yielded by the stream.",3,null],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",null,null],[11,"next","","Converts this stream into a `Future`.",4,{"i":[{"n":"self"}],"o":{"n":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",4,{"i":[{"n":"self"}],"o":{"n":"collect"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",4,{"i":[{"n":"self"}],"o":{"n":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",4,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",4,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreach"}}],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreachconcurrent"}}],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",4,{"i":[{"n":"self"}],"o":{"n":"errinto"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",4,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",4,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",4,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",4,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferunordered"}}],[11,"zip","","An adapter for zipping two streams together.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"zip"}}],[11,"chain","","Adapter for chaining two stream.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",4,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",4,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"recover"}}],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",5,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",5,null],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be preceded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",5,null],[10,"poll_flush","","Flush any remaining output from this sink.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",null,null],[11,"with","","Composes a function in front of the sink.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"sinkmaperr"}}],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",6,{"i":[{"n":"self"}],"o":{"n":"sinkerrinto"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffer"}}],[11,"close","","Close the sink.",6,{"i":[{"n":"self"}],"o":{"n":"close"}}],[11,"fanout","","Fanout items to multiple sinks.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"fanout"}}],[11,"flush","","Flush the sync, processing all pending items.",6,{"i":[{"n":"self"}],"o":{"n":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",6,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"sendall"}}],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",6,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",6,{"i":[{"n":"self"}],"o":{"n":"either"}}],[4,"Async","","Indicates whether a value is available, or if the current task has been scheduled for later wake-up instead.",null,null],[13,"Ready","","Represents that a value is immediately ready.",7,null],[13,"Pending","","Represents that a value is not ready yet.",7,null],[6,"Poll","","A convenience wrapper for `Result<Async<T>, E>`.",null,null],[4,"Never","","A type with no possible values.",null,null],[0,"channel","","Cross-task communication.",null,null],[0,"oneshot","futures::channel","A channel for sending a single message between asynchronous tasks.",null,null],[3,"Receiver","futures::channel::oneshot","A future for a value that will be provided by another asynchronous task.",null,null],[3,"Sender","","A means of transmitting a single value to another task.",null,null],[5,"channel","","Creates a new one-shot channel for sending values across asynchronous tasks.",null,null],[3,"Canceled","","Error returned from a `Receiver` when the corresponding `Sender` is dropped.",null,null],[0,"mpsc","futures::channel","A multi-producer, single-consumer queue for sending values across asynchronous tasks.",null,null],[3,"Sender","futures::channel::mpsc","The transmission end of a bounded mpsc channel.",null,null],[3,"Receiver","","The receiving end of a bounded mpsc channel.",null,null],[3,"SendError","","The error type for `Sender`s used as `Sink`s.",null,null],[3,"TrySendError","","The error type returned from `try_send`.",null,null],[3,"TryRecvError","","The error type returned from `try_next`.",null,null],[5,"channel","","Creates a bounded mpsc channel for communicating between asynchronous tasks.",null,null],[5,"unbounded","","Creates an unbounded mpsc channel for communicating between asynchronous tasks.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded mpsc channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded mpsc channel.",null,null],[0,"executor","futures","Task execution.",null,null],[3,"BlockingStream","futures::executor","An iterator which blocks on values from a stream until they become available.",null,null],[3,"Enter","","Represents an executor context.",null,null],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",null,null],[3,"LocalExecutor","","A handle to a `LocalPool` that implements `Executor`.",null,null],[3,"LocalPool","","A single-threaded task pool.",null,null],[3,"Spawn","","A future representing the completion of task spawning.",null,null],[3,"SpawnWithHandle","","A future representing the completion of task spawning, yielding a `JoinHandle` to the spawned task.",null,null],[3,"ThreadPool","","A general-purpose thread pool for scheduling asynchronous tasks.",null,null],[3,"ThreadPoolBuilder","","Thread pool configuration object.",null,null],[3,"JoinHandle","","The type of future returned from the `ThreadPool::spawn` function, which proxies the futures running on the thread pool.",null,null],[5,"block_on","","Run a future to completion on the current thread.",null,{"i":[{"n":"f"}],"o":{"n":"result"}}],[5,"block_on_stream","","Turn a stream into a blocking iterator.",null,{"i":[{"n":"s"}],"o":{"n":"blockingstream"}}],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",null,{"o":{"g":["enter","entererror"],"n":"result"}}],[5,"spawn","","Spawn a task onto the default executor.",null,{"i":[{"n":"f"}],"o":{"n":"spawn"}}],[5,"spawn_with_handle","","Spawn a task onto the default executor, yielding a `JoinHandle` to the spawned task.",null,{"i":[{"n":"f"}],"o":{"n":"spawnwithhandle"}}],[3,"SpawnError","","Provides the reason that an executor was unable to spawn.",null,null],[8,"Executor","","A task executor.",null,null],[10,"spawn","","Spawn the given task, polling it until completion.",8,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"status","","Determine whether the executor is able to spawn new tasks.",8,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[0,"future","futures","Asynchronous values.",null,null],[3,"FutureOption","futures::future","A future representing a value which may or may not be present.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[8,"Future","","A future represents an asychronous computation that may fail.",null,null],[16,"Item","","A successful value",0,null],[16,"Error","","An error",0,null],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[8,"IntoFuture","","Types that can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",1,null],[16,"Item","","The item that the future may resolve with.",1,null],[16,"Error","","The error that the future may resolve with.",1,null],[10,"into_future","","Consumes this object and produces a future.",1,null],[5,"err","","Creates a new future that will immediately fail with the given error.",null,{"i":[{"n":"e"}],"o":{"n":"futureresult"}}],[5,"ok","","Creates a new future that will immediately resolve successfully to the given value.",null,{"i":[{"n":"t"}],"o":{"n":"futureresult"}}],[5,"result","","Creates a new future that will immediate resolve with the given result.",null,{"i":[{"n":"result"}],"o":{"n":"futureresult"}}],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Empty","","A future which is never resolved.",null,null],[3,"Flatten","","Future for the `flatten` combinator.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"ErrInto","","Future for the `err_into` combinator, changing the error type of a future.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"IntoStream","","A type which converts a `Future` into a `Stream` containing a single element.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Lazy","","A future which defers creation of the actual future until the future is `poll`ed.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[4,"Either","","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",9,null],[13,"Right","","A value of type `R`.",9,null],[4,"Loop","","An enum describing whether to `break` or `continue` a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",10,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",10,null],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",null,null],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",2,{"i":[{"n":"self"}],"o":{"n":"errinto"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"select","","Waits for either one of two differently-typed futures to complete.",2,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",2,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"join"}}],[11,"join3","","Same as `join`, but with more futures.",2,{"i":[{"n":"self"},{"n":"b"},{"n":"c"}],"o":{"n":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",2,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"}],"o":{"n":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",2,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"},{"n":"e"}],"o":{"n":"join5"}}],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"into_stream","","Convert this future into a single element stream.",2,{"i":[{"n":"self"}],"o":{"n":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",2,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",2,{"i":[{"n":"self"}],"o":{"n":"flattensink"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",2,{"i":[{"n":"self"}],"o":{"n":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",2,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of a future, passing it on.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",2,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",2,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"recover"}}],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",2,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"withexecutor"}}],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"o":{"n":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"i":[{"n":"f"}],"o":{"n":"lazy"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"i":[{"n":"s"},{"n":"f"}],"o":{"n":"loopfn"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"i":[{"n":"f"}],"o":{"n":"pollfn"}}],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"i":[{"n":"i"}],"o":{"n":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"i":[{"n":"i"}],"o":{"n":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"i":[{"n":"i"}],"o":{"n":"selectok"}}],[0,"io","futures","Asynchronous I/O.",null,null],[3,"Error","futures::io","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[3,"Initializer","","A type used to conditionally initialize buffers passed to `AsyncRead` methods, modeled after `std`.",null,null],[3,"IoVec","","A specialized byte slice type for performing vectored I/O operations.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",11,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",11,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",11,null],[13,"ConnectionReset","","The connection was reset by the remote server.",11,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",11,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",11,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",11,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",11,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",11,null],[13,"AlreadyExists","","An entity already exists, often a file.",11,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",11,null],[13,"InvalidInput","","A parameter was incorrect.",11,null],[13,"InvalidData","","Data not valid for the operation were encountered.",11,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",11,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",11,null],[13,"Interrupted","","This operation was interrupted.",11,null],[13,"Other","","Any I/O error not part of this list.",11,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",11,null],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",12,{"i":[{"n":"self"}],"o":{"n":"initializer"}}],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",12,null],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",12,null],[8,"AsyncWrite","","Write bytes asynchronously.",null,null],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",13,null],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",13,null],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",13,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[10,"poll_close","","Attempt to close the object.",13,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",null,null],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",14,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"copyinto"}}],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"read"}}],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"readexact"}}],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",14,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"readtoend"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",14,null],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",null,null],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite` and then return `self`.",15,{"i":[{"n":"self"}],"o":{"n":"flush"}}],[11,"close","","Creates a future which will entirely close this `AsyncWrite` and then return `self`.",15,{"i":[{"n":"self"}],"o":{"n":"close"}}],[11,"write_all","","Write a `Buf` into this value, returning how many bytes were written. Creates a future that will write the entire contents of the buffer `buf` into this `AsyncWrite`.",15,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"writeall"}}],[3,"AllowStdIo","","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",null,null],[3,"Close","","A future used to fully close an I/O object.",null,null],[3,"CopyInto","","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[0,"never","futures","This module contains the `Never` type.",null,null],[4,"Never","futures::never","A type with no possible values.",null,null],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",null,null],[8,"Future","futures::prelude","A future represents an asychronous computation that may fail.",null,null],[16,"Item","","A successful value",0,null],[16,"Error","","An error",0,null],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[8,"IntoFuture","","Types that can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",1,null],[16,"Item","","The item that the future may resolve with.",1,null],[16,"Error","","The error that the future may resolve with.",1,null],[10,"into_future","","Consumes this object and produces a future.",1,null],[8,"Stream","","A stream of values produced asynchronously.",null,null],[16,"Item","","Values yielded by the stream.",3,null],[16,"Error","","Errors yielded by the stream.",3,null],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[4,"Async","","Indicates whether a value is available, or if the current task has been scheduled for later wake-up instead.",null,null],[13,"Ready","","Represents that a value is immediately ready.",7,null],[13,"Pending","","Represents that a value is not ready yet.",7,null],[6,"Poll","","A convenience wrapper for `Result<Async<T>, E>`.",null,null],[4,"Never","","A type with no possible values.",null,null],[0,"task","","Task notification.",null,null],[3,"LocalMap","futures::prelude::task","A map storing task-local data.",null,null],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",null,null],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"Context","","Information about the currently-running task.",null,null],[8,"Wake","","A way of waking up a specific task.",null,null],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",16,null],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker`.",null,null],[10,"clone_raw","","Creates a new `Waker` from this instance of `UnsafeWake`.",17,{"i":[{"n":"self"}],"o":{"n":"waker"}}],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",17,null],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",17,null],[8,"Executor","futures::prelude","A task executor.",null,null],[10,"spawn","","Spawn the given task, polling it until completion.",8,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"status","","Determine whether the executor is able to spawn new tasks.",8,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",5,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",5,null],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be preceded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",5,null],[10,"poll_flush","","Flush any remaining output from this sink.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",12,{"i":[{"n":"self"}],"o":{"n":"initializer"}}],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",12,null],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",12,null],[8,"AsyncWrite","","Write bytes asynchronously.",null,null],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",13,null],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",13,null],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",13,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[10,"poll_close","","Attempt to close the object.",13,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",null,null],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",2,{"i":[{"n":"self"}],"o":{"n":"errinto"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"select","","Waits for either one of two differently-typed futures to complete.",2,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",2,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"join"}}],[11,"join3","","Same as `join`, but with more futures.",2,{"i":[{"n":"self"},{"n":"b"},{"n":"c"}],"o":{"n":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",2,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"}],"o":{"n":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",2,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"},{"n":"e"}],"o":{"n":"join5"}}],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"into_stream","","Convert this future into a single element stream.",2,{"i":[{"n":"self"}],"o":{"n":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",2,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",2,{"i":[{"n":"self"}],"o":{"n":"flattensink"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",2,{"i":[{"n":"self"}],"o":{"n":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",2,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of a future, passing it on.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",2,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",2,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"recover"}}],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",2,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"withexecutor"}}],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",null,null],[11,"next","","Converts this stream into a `Future`.",4,{"i":[{"n":"self"}],"o":{"n":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",4,{"i":[{"n":"self"}],"o":{"n":"collect"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",4,{"i":[{"n":"self"}],"o":{"n":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",4,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",4,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreach"}}],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreachconcurrent"}}],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",4,{"i":[{"n":"self"}],"o":{"n":"errinto"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",4,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",4,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",4,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",4,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferunordered"}}],[11,"zip","","An adapter for zipping two streams together.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"zip"}}],[11,"chain","","Adapter for chaining two stream.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",4,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",4,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"recover"}}],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",null,null],[11,"with","","Composes a function in front of the sink.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"sinkmaperr"}}],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",6,{"i":[{"n":"self"}],"o":{"n":"sinkerrinto"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffer"}}],[11,"close","","Close the sink.",6,{"i":[{"n":"self"}],"o":{"n":"close"}}],[11,"fanout","","Fanout items to multiple sinks.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"fanout"}}],[11,"flush","","Flush the sync, processing all pending items.",6,{"i":[{"n":"self"}],"o":{"n":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",6,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"sendall"}}],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",6,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",6,{"i":[{"n":"self"}],"o":{"n":"either"}}],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",null,null],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",14,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"copyinto"}}],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"read"}}],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"readexact"}}],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",14,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"readtoend"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",14,null],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",null,null],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite` and then return `self`.",15,{"i":[{"n":"self"}],"o":{"n":"flush"}}],[11,"close","","Creates a future which will entirely close this `AsyncWrite` and then return `self`.",15,{"i":[{"n":"self"}],"o":{"n":"close"}}],[11,"write_all","","Write a `Buf` into this value, returning how many bytes were written. Creates a future that will write the entire contents of the buffer `buf` into this `AsyncWrite`.",15,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"writeall"}}],[0,"sink","futures","Asynchronous sinks.",null,null],[8,"Sink","futures::sink","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",5,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",5,null],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be preceded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",5,null],[10,"poll_flush","","Flush any remaining output from this sink.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[3,"Close","","Future for the `close` combinator, which polls the sink until all data has been closed.",null,null],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",null,null],[3,"Flush","","Future for the `flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"SinkErrInto","","A sink combinator to change the error type of a sink.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",null,null],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",null,null],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",null,null],[11,"with","","Composes a function in front of the sink.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"sinkmaperr"}}],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",6,{"i":[{"n":"self"}],"o":{"n":"sinkerrinto"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffer"}}],[11,"close","","Close the sink.",6,{"i":[{"n":"self"}],"o":{"n":"close"}}],[11,"fanout","","Fanout items to multiple sinks.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"fanout"}}],[11,"flush","","Flush the sync, processing all pending items.",6,{"i":[{"n":"self"}],"o":{"n":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",6,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"sendall"}}],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",6,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",6,{"i":[{"n":"self"}],"o":{"n":"either"}}],[3,"Buffer","","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[0,"stream","futures","Asynchronous streams.",null,null],[8,"Stream","futures::stream","A stream of values produced asynchronously.",null,null],[16,"Item","","Values yielded by the stream.",3,null],[16,"Error","","Errors yielded by the stream.",3,null],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"ErrInto","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",null,null],[11,"next","","Converts this stream into a `Future`.",4,{"i":[{"n":"self"}],"o":{"n":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",4,{"i":[{"n":"self"}],"o":{"n":"collect"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",4,{"i":[{"n":"self"}],"o":{"n":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",4,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",4,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreach"}}],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreachconcurrent"}}],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",4,{"i":[{"n":"self"}],"o":{"n":"errinto"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",4,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",4,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",4,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",4,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferunordered"}}],[11,"zip","","An adapter for zipping two streams together.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"zip"}}],[11,"chain","","Adapter for chaining two stream.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",4,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",4,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"recover"}}],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,{"i":[{"n":"self"}],"o":{"n":"either"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"o":{"n":"empty"}}],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"i":[{"n":"i"}],"o":{"n":"iterok"}}],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"i":[{"n":"j"}],"o":{"n":"iterresult"}}],[5,"once","","Creates a stream of single element",null,{"i":[{"n":"f"}],"o":{"n":"once"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"i":[{"n":"f"}],"o":{"n":"pollfn"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"i":[{"n":"t"}],"o":{"n":"repeat"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"i":[{"n":"t"},{"n":"f"}],"o":{"n":"unfold"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"i":[{"n":"i"}],"o":{"n":"futuresunordered"}}],[5,"select_all","","Convert a list of streams into a `Stream` of results from the streams.",null,{"i":[{"n":"i"}],"o":{"n":"selectall"}}],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"FuturesUnordered","","A set of `Future`s which may complete in any order.",null,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",18,null],[12,"1","","",18,null],[3,"SelectAll","","An unbounded set of streams",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"i":[{"n":"i"}],"o":{"n":"futuresordered"}}],[0,"task","futures","Tools for working with tasks.",null,null],[3,"Context","futures::task","Information about the currently-running task.",null,null],[3,"LocalMap","","A map storing task-local data.",null,null],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",null,null],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker`.",null,null],[10,"clone_raw","","Creates a new `Waker` from this instance of `UnsafeWake`.",17,{"i":[{"n":"self"}],"o":{"n":"waker"}}],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",17,null],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",17,null],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[8,"Wake","","A way of waking up a specific task.",null,null],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",16,null],[14,"try_ready","futures","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`.",null,null],[11,"poll_next","futures::future","",9,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::prelude","",19,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","never"],"n":"result"}}],[11,"partial_cmp","","",19,{"i":[{"n":"self"},{"n":"never"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","futures::future","",20,{"i":[{"n":"self"}],"o":{"n":"futureresult"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"futureoption"}}],[11,"clone","futures::prelude","",19,{"i":[{"n":"self"}],"o":{"n":"never"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"async"}}],[11,"clone","futures::task","",22,{"i":[{"n":"self"}],"o":{"n":"waker"}}],[11,"eq","futures::prelude","",19,{"i":[{"n":"self"},{"n":"never"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"async"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"async"}],"o":{"n":"bool"}}],[11,"from","futures::future","",21,{"i":[{"n":"option"}],"o":{"n":"futureoption"}}],[11,"from","futures::prelude","",7,{"i":[{"n":"t"}],"o":{"n":"async"}}],[11,"from","futures::future","",20,{"i":[{"n":"result"}],"o":{"n":"futureresult"}}],[11,"from","futures::task","",22,{"i":[{"n":"arc"}],"o":{"n":"waker"}}],[11,"drop","","",22,null],[11,"poll","futures::future","",9,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",21,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",20,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::prelude","",19,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","never"],"n":"result"}}],[11,"fmt","futures::future","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::task","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::prelude","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::task","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::executor","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::prelude","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::task","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","","",24,{"o":{"n":"atomicwaker"}}],[11,"cmp","futures::prelude","",19,{"i":[{"n":"self"},{"n":"never"}],"o":{"n":"ordering"}}],[11,"eq","futures::io","",11,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"hash","","",11,null],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"ordering"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",28,{"i":[{"n":"intoinnererror"}],"o":{"n":"error"}}],[11,"from","","",28,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"from","","",28,{"i":[{"n":"nulerror"}],"o":{"n":"error"}}],[11,"description","","",28,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",28,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"as_mut","","",9,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"as_ref","","",9,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"extend","","",9,null],[11,"from","","",9,{"i":[{"n":"result"}],"o":{"n":"either"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"write","","",9,null],[11,"flush","","",9,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",9,null],[11,"read_to_end","","",9,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"into","","",9,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"next_back","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"deref_mut","","",9,null],[11,"description","","",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",9,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"fill_buf","","",9,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"consume","","",9,null],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"hash","","",9,null],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",9,null],[11,"fold","","",9,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",9,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",9,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"deref","","",9,null],[11,"poll_next","futures::channel::mpsc","",29,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",30,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"trysenderror"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"clone","futures::channel::oneshot","",33,{"i":[{"n":"self"}],"o":{"n":"canceled"}}],[11,"clone","futures::channel::mpsc","",34,{"i":[{"n":"self"}],"o":{"n":"unboundedsender"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"senderror"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"senderror"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"senderror"}],"o":{"n":"bool"}}],[11,"eq","futures::channel::oneshot","",33,{"i":[{"n":"self"},{"n":"canceled"}],"o":{"n":"bool"}}],[11,"eq","futures::channel::mpsc","",31,{"i":[{"n":"self"},{"n":"trysenderror"}],"o":{"n":"bool"}}],[11,"ne","","",31,{"i":[{"n":"self"},{"n":"trysenderror"}],"o":{"n":"bool"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::channel::oneshot","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"drop","futures::channel::mpsc","",34,null],[11,"drop","","",32,null],[11,"drop","","",29,null],[11,"drop","futures::channel::oneshot","",37,null],[11,"drop","","",38,null],[11,"drop","futures::channel::mpsc","",30,null],[11,"poll","futures::channel::oneshot","",37,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","canceled"],"n":"result"}}],[11,"description","futures::channel::mpsc","",36,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",31,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","futures::channel::oneshot","",33,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","futures::channel::mpsc","",35,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::channel::oneshot","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::channel::mpsc","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::channel::oneshot","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::channel::mpsc","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::channel::oneshot","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::channel::mpsc","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"spawn","futures::executor","",39,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"status","","",39,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"spawn","","",40,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"poll","","",41,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",42,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","never"],"n":"result"}}],[11,"poll","","",43,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","never"],"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"localexecutor"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"threadpool"}}],[11,"drop","","",40,null],[11,"drop","","",44,null],[11,"next","","",45,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"write","futures::io","",48,null],[11,"flush","","",48,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"write_all","","",48,null],[11,"write_fmt","","",48,{"i":[{"n":"self"},{"n":"arguments"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","futures::sink","",49,{"i":[{"n":"self"}],"o":{"n":"with"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"sinkerrinto"}}],[11,"clone","futures::future","",51,{"i":[{"n":"self"}],"o":{"n":"shareditem"}}],[11,"clone","futures::sink","",52,{"i":[{"n":"self"}],"o":{"n":"fanout"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"sinkmaperr"}}],[11,"clone","futures::future","",54,{"i":[{"n":"self"}],"o":{"n":"sharederror"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[11,"clone","futures::io","",48,{"i":[{"n":"self"}],"o":{"n":"allowstdio"}}],[11,"poll_read","","",48,null],[11,"poll_read","","",56,null],[11,"poll_vectored_read","","",56,null],[11,"description","futures::stream","",18,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","futures::future","",54,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",54,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"eq","futures::io","",48,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"fmt","futures::future","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"poll_ready","","",57,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",57,null],[11,"poll_flush","","",57,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",57,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::sink","",49,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",49,null],[11,"poll_flush","","",49,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",49,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::stream","",58,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",58,null],[11,"poll_flush","","",58,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",58,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::sink","",53,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",53,null],[11,"poll_flush","","",53,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",53,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::stream","",59,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",59,null],[11,"poll_flush","","",59,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",59,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",60,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",60,null],[11,"poll_flush","","",60,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",60,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",61,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",61,null],[11,"poll_flush","","",61,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",61,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",62,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",62,null],[11,"poll_flush","","",62,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",62,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::sink","",50,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",50,null],[11,"poll_flush","","",50,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",50,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::stream","",63,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",63,null],[11,"poll_flush","","",63,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",63,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",64,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",64,null],[11,"poll_flush","","",64,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",64,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",65,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",65,null],[11,"poll_flush","","",65,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",65,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::sink","",66,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",66,null],[11,"poll_flush","","",66,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",66,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::stream","",67,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",67,null],[11,"poll_flush","","",67,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",67,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",68,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",68,null],[11,"poll_flush","","",68,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",68,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",69,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",69,null],[11,"poll_flush","","",69,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",69,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",70,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",70,null],[11,"poll_flush","","",70,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",70,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",71,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",71,null],[11,"poll_flush","","",71,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",71,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",72,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",72,null],[11,"poll_flush","","",72,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",72,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",73,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",73,null],[11,"poll_flush","","",73,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",73,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",74,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",74,null],[11,"poll_flush","","",74,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",74,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",75,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",75,null],[11,"poll_flush","","",75,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",75,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::sink","",52,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",52,null],[11,"poll_flush","","",52,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",52,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",76,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",76,null],[11,"poll_flush","","",76,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",76,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::stream","",77,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",77,null],[11,"poll_flush","","",77,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",77,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",78,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",78,null],[11,"poll_flush","","",78,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",78,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","","",79,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",79,null],[11,"poll_flush","","",79,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",79,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"as_ref","futures::io","",80,null],[11,"hash","","",48,null],[11,"read","","",48,null],[11,"read_to_end","","",48,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"read_to_string","","",48,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"read_exact","","",48,null],[11,"poll_write","","",48,null],[11,"poll_flush","","",48,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_close","","",48,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_write","","",81,null],[11,"poll_vectored_write","","",81,null],[11,"poll_flush","","",81,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_close","","",81,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","futures::future","",82,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::io","",83,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","futures::future","",84,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",85,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",86,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",87,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::sink","",88,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::future","",89,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::io","",90,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","futures::stream","",91,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::io","",92,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","futures::stream","",93,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::future","",94,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::stream","",95,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::future","",96,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",97,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",98,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",99,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",100,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::io","",101,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","futures::future","",102,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::sink","",103,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::future","",104,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",55,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::stream","",105,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::future","",106,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::io","",107,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","futures::stream","",108,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",109,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::sink","",110,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::future","",111,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::io","",112,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","futures::future","",113,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",114,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",115,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::io","",116,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","futures::sink","",117,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","futures::future","",118,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",119,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",120,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"partial_cmp","futures::io","",48,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",48,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"le","","",48,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"gt","","",48,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"ge","","",48,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"poll_next","futures::stream","",58,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",62,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",61,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",121,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",72,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",74,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",122,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::future","",123,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::stream","",124,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",125,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",126,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",79,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",127,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",69,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",57,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",128,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",60,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::sink","",76,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::stream","",71,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",77,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",129,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",130,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",70,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",65,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::future","",131,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::stream","",67,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",132,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",133,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",73,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",64,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::sink","",50,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::stream","",134,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",135,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",59,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::sink","",49,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::stream","",136,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",75,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",137,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",68,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::sink","",53,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","","",66,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_next","futures::stream","",63,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"drop","","",129,null],[11,"drop","futures::future","",55,null],[11,"deref","","",54,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"deref","","",51,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","futures::io","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::io","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::io","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::sink","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::io","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::sink","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::io","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::sink","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::io","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::io","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::sink","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::io","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::sink","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::sink","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::io","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::io","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::io","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::sink","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::sink","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::sink","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::future","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::stream","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","futures::sink","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"as_mut","futures::io","",80,null],[11,"cmp","","",48,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"ordering"}}],[11,"from_iter","futures::future","",98,{"i":[{"n":"t"}],"o":{"n":"joinall"}}],[11,"from_iter","futures::stream","",135,{"i":[{"n":"t"}],"o":{"n":"futuresordered"}}],[11,"from_iter","","",129,{"i":[{"n":"t"}],"o":{"n":"futuresunordered"}}],[11,"fmt","futures::io","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref_mut","","",139,null],[11,"deref","","",139,null],[11,"poll_ready","futures::channel::mpsc","",32,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",32,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"poll_flush","","",32,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",32,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::future","",9,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",9,null],[11,"poll_flush","","",9,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",9,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_ready","futures::channel::mpsc","",34,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",34,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"poll_flush","","",34,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",34,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"map","futures::prelude","Change the success value of this `Async` with the closure provided",7,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_pending","","Returns whether this is `Async::Pending`",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"never_into","","Convert the `Never` type into any other type.",19,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"close","futures::channel::oneshot","Gracefully close this receiver, preventing any subsequent attempts to send to it.",37,null],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",37,{"i":[{"n":"self"}],"o":{"g":["option","canceled"],"n":"result"}}],[11,"send","","Completes this oneshot with a successful result.",38,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether its associated `Receiver` with has been dropped.",38,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","never"],"n":"result"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has been dropped.",38,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"try_send","futures::channel::mpsc","Attempts to send a message on this `Sender`, returning the message if there was an error.",32,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["trysenderror"],"n":"result"}}],[11,"start_send","","Send a message on the channel.",32,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["senderror"],"n":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed capacity to send at least one item without waiting.",32,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","senderror"],"n":"result"}}],[11,"is_closed","","Returns whether this channel is closed without needing a context.",32,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",32,null],[11,"close","","Closes the receiving half of a channel, without dropping it.",30,null],[11,"try_next","","Tries to receive the next message without wakeing a context if empty.",30,{"i":[{"n":"self"}],"o":{"g":["option","tryrecverror"],"n":"result"}}],[11,"is_full","","Returns true if this error is a result of the channel being full.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_full","","Returns true if this error is a result of the channel being full.",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",31,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_send_error","","Drops the message and converts into a `SendError`.",31,{"i":[{"n":"self"}],"o":{"n":"senderror"}}],[11,"poll_ready","","Check if the channel is ready to receive a message.",34,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","senderror"],"n":"result"}}],[11,"is_closed","","Returns whether this channel is closed without needing a context.",34,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",34,null],[11,"start_send","","Send a message on the channel.",34,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["senderror"],"n":"result"}}],[11,"unbounded_send","","Sends a message along this channel.",34,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["trysenderror"],"n":"result"}}],[11,"close","","Closes the receiving half of the channel, without dropping it.",29,null],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",29,{"i":[{"n":"self"}],"o":{"g":["option","tryrecverror"],"n":"result"}}],[11,"into_inner","futures::executor","Convert this `BlockingStream` into the inner `Stream` type.",45,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"spawn_local","","Spawn a non-`Send` future onto the associated `LocalPool`.",39,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"new","","Create a new, empty pool of tasks.",140,{"o":{"n":"localpool"}}],[11,"executor","","Get a clonable handle to the pool as an executor.",140,{"i":[{"n":"self"}],"o":{"n":"localexecutor"}}],[11,"run","","Run all tasks in the pool to completion.",140,null],[11,"run_until","","Runs all the tasks in the pool until the given future completes.",140,{"i":[{"n":"self"},{"n":"f"},{"n":"executor"}],"o":{"n":"result"}}],[11,"new","","Creates a new thread pool with the default configuration.",40,{"o":{"g":["threadpool","error"],"n":"result"}}],[11,"builder","","Create a default thread pool configuration, which can then be customized.",40,{"o":{"n":"threadpoolbuilder"}}],[11,"run","","Runs the given future with this thread pool as the default executor for spawning tasks.",40,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"new","","Create a default thread pool configuration.",47,{"o":{"n":"threadpoolbuilder"}}],[11,"pool_size","","Set size of a future ThreadPool",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"threadpoolbuilder"}}],[11,"stack_size","","Set stack size of threads in the pool.",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"threadpoolbuilder"}}],[11,"name_prefix","","Set thread name prefix of a future ThreadPool.",47,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"threadpoolbuilder"}}],[11,"after_start","","Execute the closure `f` immediately after each worker thread is started, but before running any tasks on it.",47,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"threadpoolbuilder"}}],[11,"before_stop","","Execute closure `f` just prior to shutting down each worker thread.",47,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"threadpoolbuilder"}}],[11,"create","","Create a `ThreadPool` with the given configuration.",47,{"i":[{"n":"self"}],"o":{"g":["threadpool","error"],"n":"result"}}],[11,"forget","","Drop this handle without canceling the underlying future.",41,null],[11,"shutdown","","Spawning is failing because the executor has been shut down.",26,{"o":{"n":"spawnerror"}}],[11,"is_shutdown","","Check whether this error is the `shutdown` error.",26,{"o":{"n":"bool"}}],[11,"is_left","futures::future","Return true if the value is the `Left` variant.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",9,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",9,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",9,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",9,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",9,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",9,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",9,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",9,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",9,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",55,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"into_inner","","Expose the inner Arc",54,{"i":[{"n":"self"}],"o":{"n":"arc"}}],[11,"into_inner","","Expose the inner Arc",51,{"i":[{"n":"self"}],"o":{"n":"arc"}}],[11,"new","futures::io","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",28,{"i":[{"n":"errorkind"},{"n":"e"}],"o":{"n":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",28,{"o":{"n":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",28,{"i":[{"n":"i32"}],"o":{"n":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",28,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",28,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",28,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",28,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",28,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",138,{"o":{"n":"initializer"}}],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",138,{"o":{"n":"initializer"}}],[11,"should_initialize","","Indicates if a buffer should be initialized.",138,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"initialize","","Initializes a buffer if necessary.",138,null],[11,"from_bytes","","",139,null],[11,"from_bytes_mut","","",139,null],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",48,{"i":[{"n":"t"}],"o":{"n":"allowstdio"}}],[11,"get_ref","","Returns a reference to the contained IO object.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained IO object.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes self and returns the contained IO object.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",80,{"i":[{"n":"t"}],"o":{"n":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",80,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",80,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",80,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",80,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",80,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",80,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",80,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"window"}}],[11,"new","futures::task","Create an empty set of task-local data.",27,{"o":{"n":"localmap"}}],[11,"new","","Constructs a new `Waker` directly.",22,null],[11,"wake","","Wake up the task associated with this `Waker`.",22,null],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",22,{"i":[{"n":"self"},{"n":"waker"}],"o":{"n":"bool"}}],[11,"new","","Create an `AtomicWaker`.",24,{"o":{"n":"atomicwaker"}}],[11,"register","","Registers the waker to be notified on calls to `wake`.",24,null],[11,"wake","","Calls `wake` on the last `Waker` passed to `register`.",24,null],[11,"get_mut","","Access this task-local key.",25,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"t"}}],[11,"without_spawn","","Create a new task context without the ability to `spawn`.",23,{"i":[{"n":"localmap"},{"n":"waker"}],"o":{"n":"context"}}],[11,"waker","","Get the `Waker` associated with the current task.",23,{"i":[{"n":"self"}],"o":{"n":"waker"}}],[11,"with_waker","","Produce a context like the current one, but using the given waker instead.",23,{"i":[{"n":"self"},{"n":"waker"}],"o":{"n":"context"}}],[11,"with_locals","","Produce a context like the current one, but using the given task locals instead.",23,{"i":[{"n":"self"},{"n":"localmap"}],"o":{"n":"context"}}],[11,"new","","Create a new task context.",23,{"i":[{"n":"localmap"},{"n":"waker"},{"n":"executor"}],"o":{"n":"context"}}],[11,"executor","","Get the default executor associated with this task, if any",23,{"i":[{"n":"self"}],"o":{"n":"executor"}}],[11,"spawn","","Spawn a future onto the default executor.",23,null],[11,"with_executor","","Produce a context like the current one, but using the given executor instead.",23,{"i":[{"n":"self"},{"n":"executor"}],"o":{"n":"context"}}],[11,"get_ref","futures::sink","Get a shared reference to the inner sink. Returns `None` if the sink has already been closed.",110,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been closed.",110,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_inner","","Consume the `Close` and return the inner sink. Returns `None` if the sink has already been closed.",110,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",52,null],[11,"get_ref","","Get a shared reference to the inner sink. Returns `None` if the sink has already been flushed.",88,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been flushed.",88,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_inner","","Consume the `Flush` and return the inner sink. Returns `None` if the sink has already been flushed.",88,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_ref","","Get a shared reference to the inner sink.",103,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",103,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_ref","","Get a shared reference to the inner sink.",50,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",50,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",50,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Get a shared reference to the inner sink.",53,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",53,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",53,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Get a shared reference to the inner sink.",49,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",49,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",49,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Get a shared reference to the inner sink.",66,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",66,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",66,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Get a shared reference to the inner sink.",76,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",76,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",76,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","futures::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",68,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",68,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",68,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",108,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",108,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",108,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",108,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",79,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",79,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",79,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",62,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",64,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",64,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",64,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",75,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",75,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",75,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",73,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",63,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",63,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",63,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",105,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",105,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",105,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",67,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",67,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",67,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",74,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",74,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",74,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"new","","Constructs a new, empty `FuturesUnordered`",129,{"o":{"n":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",129,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",129,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push a future into the set.",129,null],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",129,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",135,{"o":{"n":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",135,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",135,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push a future into the queue.",135,null],[11,"new","","Constructs a new, empty `SelectAll`",130,{"o":{"n":"selectall"}}],[11,"len","","Returns the number of streams contained in the set.",130,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no streams",130,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push a stream into the set.",130,null],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",78,{"i":[{"n":"self"},{"n":"splitstream"}],"o":{"g":["reuniteerror"],"n":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",127,{"i":[{"n":"self"},{"n":"splitsink"}],"o":{"g":["reuniteerror"],"n":"result"}}]],"paths":[[8,"Future"],[8,"IntoFuture"],[8,"FutureExt"],[8,"Stream"],[8,"StreamExt"],[8,"Sink"],[8,"SinkExt"],[4,"Async"],[8,"Executor"],[4,"Either"],[4,"Loop"],[4,"ErrorKind"],[8,"AsyncRead"],[8,"AsyncWrite"],[8,"AsyncReadExt"],[8,"AsyncWriteExt"],[8,"Wake"],[8,"UnsafeWake"],[3,"ReuniteError"],[4,"Never"],[3,"FutureResult"],[3,"FutureOption"],[3,"Waker"],[3,"Context"],[3,"AtomicWaker"],[3,"LocalKey"],[3,"SpawnError"],[3,"LocalMap"],[3,"Error"],[3,"UnboundedReceiver"],[3,"Receiver"],[3,"TrySendError"],[3,"Sender"],[3,"Canceled"],[3,"UnboundedSender"],[3,"SendError"],[3,"TryRecvError"],[3,"Receiver"],[3,"Sender"],[3,"LocalExecutor"],[3,"ThreadPool"],[3,"JoinHandle"],[3,"SpawnWithHandle"],[3,"Spawn"],[3,"Enter"],[3,"BlockingStream"],[3,"EnterError"],[3,"ThreadPoolBuilder"],[3,"AllowStdIo"],[3,"With"],[3,"SinkErrInto"],[3,"SharedItem"],[3,"Fanout"],[3,"SinkMapErr"],[3,"SharedError"],[3,"Shared"],[3,"ReadHalf"],[3,"Take"],[3,"FilterMap"],[3,"Then"],[3,"SkipWhile"],[3,"Inspect"],[3,"Fuse"],[3,"Skip"],[3,"InspectErr"],[3,"OrElse"],[3,"WithFlatMap"],[3,"TakeWhile"],[3,"AndThen"],[3,"Map"],[3,"BufferUnordered"],[3,"Buffered"],[3,"Filter"],[3,"Peekable"],[3,"Chunks"],[3,"MapErr"],[3,"Buffer"],[3,"Flatten"],[3,"SplitSink"],[3,"ErrInto"],[3,"Window"],[3,"WriteHalf"],[3,"ErrInto"],[3,"Flush"],[3,"Join3"],[3,"LoopFn"],[3,"PollFn"],[3,"Flatten"],[3,"Flush"],[3,"MapErr"],[3,"ReadToEnd"],[3,"ForEach"],[3,"Read"],[3,"Concat"],[3,"Map"],[3,"Fold"],[3,"Join5"],[3,"Fuse"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"ReadExact"],[3,"Empty"],[3,"Send"],[3,"Join4"],[3,"StreamFuture"],[3,"OrElse"],[3,"WriteAll"],[3,"Forward"],[3,"Collect"],[3,"Close"],[3,"Then"],[3,"CopyInto"],[3,"Inspect"],[3,"Lazy"],[3,"CatchUnwind"],[3,"Close"],[3,"SendAll"],[3,"Join"],[3,"AndThen"],[3,"Select"],[3,"PollFn"],[3,"IterOk"],[3,"FlattenStream"],[3,"CatchUnwind"],[3,"Once"],[3,"Unfold"],[3,"SplitStream"],[3,"Repeat"],[3,"FuturesUnordered"],[3,"SelectAll"],[3,"IntoStream"],[3,"Empty"],[3,"Select"],[3,"Zip"],[3,"FuturesOrdered"],[3,"IterResult"],[3,"Chain"],[3,"Initializer"],[3,"IoVec"],[3,"LocalPool"]]};
searchIndex["futures_async_runtime"] = {"doc":"","items":[],"paths":[]};
searchIndex["futures_channel"] = {"doc":"Asynchronous channels.","items":[[0,"mpsc","futures_channel","A multi-producer, single-consumer queue for sending values across asynchronous tasks.",null,null],[3,"Sender","futures_channel::mpsc","The transmission end of a bounded mpsc channel.",null,null],[3,"Receiver","","The receiving end of a bounded mpsc channel.",null,null],[3,"SendError","","The error type for `Sender`s used as `Sink`s.",null,null],[3,"TrySendError","","The error type returned from `try_send`.",null,null],[3,"TryRecvError","","The error type returned from `try_next`.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded mpsc channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded mpsc channel.",null,null],[5,"channel","","Creates a bounded mpsc channel for communicating between asynchronous tasks.",null,null],[5,"unbounded","","Creates an unbounded mpsc channel for communicating between asynchronous tasks.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"senderror"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"senderror"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"senderror"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"trysenderror"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"trysenderror"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"trysenderror"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_send_error","","Drops the message and converts into a `SendError`.",3,{"i":[{"n":"self"}],"o":{"n":"senderror"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"try_send","","Attempts to send a message on this `Sender`, returning the message if there was an error.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["trysenderror"],"n":"result"}}],[11,"start_send","","Send a message on the channel.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["senderror"],"n":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed capacity to send at least one item without waiting.",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["senderror"],"n":"poll"}}],[11,"is_closed","","Returns whether this channel is closed without needing a context.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",0,{"i":[{"n":"self"}]}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"close","","Closes the receiving half of a channel, without dropping it.",1,{"i":[{"n":"self"}]}],[11,"try_next","","Tries to receive the next message without wakeing a context if empty.",1,{"i":[{"n":"self"}],"o":{"g":["option","tryrecverror"],"n":"result"}}],[11,"poll_next","","",1,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"unboundedsender"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_ready","","Check if the channel is ready to receive a message.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["senderror"],"n":"poll"}}],[11,"is_closed","","Returns whether this channel is closed without needing a context.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",5,{"i":[{"n":"self"}]}],[11,"start_send","","Send a message on the channel.",5,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["senderror"],"n":"result"}}],[11,"unbounded_send","","Sends a message along this channel.",5,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["trysenderror"],"n":"result"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"close","","Closes the receiving half of the channel, without dropping it.",6,{"i":[{"n":"self"}]}],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",6,{"i":[{"n":"self"}],"o":{"g":["option","tryrecverror"],"n":"result"}}],[11,"poll_next","","",6,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[0,"oneshot","futures_channel","A channel for sending a single message between asynchronous tasks.",null,null],[3,"Receiver","futures_channel::oneshot","A future for a value that will be provided by another asynchronous task.",null,null],[3,"Sender","","A means of transmitting a single value to another task.",null,null],[3,"Canceled","","Error returned from a `Receiver` when the corresponding `Sender` is dropped.",null,null],[5,"channel","","Creates a new one-shot channel for sending values across asynchronous tasks.",null,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"send","","Completes this oneshot with a successful result.",8,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether its associated `Receiver` with has been dropped.",8,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["never"],"n":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has been dropped.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"drop","","",8,{"i":[{"n":"self"}]}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"canceled"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"canceled"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"close","","Gracefully close this receiver, preventing any subsequent attempts to send to it.",7,{"i":[{"n":"self"}]}],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",7,{"i":[{"n":"self"}],"o":{"g":["option","canceled"],"n":"result"}}],[11,"poll","","",7,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["canceled"],"n":"poll"}}],[11,"drop","","",7,{"i":[{"n":"self"}]}]],"paths":[[3,"Sender"],[3,"Receiver"],[3,"SendError"],[3,"TrySendError"],[3,"TryRecvError"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"]]};
searchIndex["futures_core"] = {"doc":"Core traits and types for asynchronous operations in Rust.","items":[[4,"Async","futures_core","Indicates whether a value is available, or if the current task has been scheduled for later wake-up instead.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"Pending","","Represents that a value is not ready yet.",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"async"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"async"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"async"}],"o":{"n":"bool"}}],[11,"map","","Change the success value of this `Async` with the closure provided",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_pending","","Returns whether this is `Async::Pending`",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"async"}}],[0,"future","","Futures.",null,null],[3,"FutureOption","futures_core::future","A future representing a value which may or may not be present.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[5,"result","","Creates a new future that will immediate resolve with the given result.",null,{"i":[{"n":"result"}],"o":{"n":"futureresult"}}],[5,"ok","","Creates a new future that will immediately resolve successfully to the given value.",null,{"i":[{"n":"t"}],"o":{"n":"futureresult"}}],[5,"err","","Creates a new future that will immediately fail with the given error.",null,{"i":[{"n":"e"}],"o":{"n":"futureresult"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"futureoption"}}],[11,"poll","","",1,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"from","","",1,{"i":[{"n":"option"}],"o":{"n":"self"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"futureresult"}}],[11,"poll","","",2,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"from","","",2,{"i":[{"n":"result"}],"o":{"n":"self"}}],[8,"Future","","A future represents an asychronous computation that may fail.",null,null],[16,"Item","","A successful value",3,null],[16,"Error","","An error",3,null],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",3,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[8,"IntoFuture","","Types that can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",4,null],[16,"Item","","The item that the future may resolve with.",4,null],[16,"Error","","The error that the future may resolve with.",4,null],[10,"into_future","","Consumes this object and produces a future.",4,null],[0,"stream","futures_core","Asynchronous streams.",null,null],[8,"Stream","futures_core::stream","A stream of values produced asynchronously.",null,null],[16,"Item","","Values yielded by the stream.",5,null],[16,"Error","","Errors yielded by the stream.",5,null],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[0,"task","futures_core","Task notification.",null,null],[3,"Waker","futures_core::task","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",null,null],[3,"Context","","Information about the currently-running task.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",null,null],[3,"LocalMap","","A map storing task-local data.",null,null],[11,"new","","Constructs a new `Waker` directly.",6,null],[11,"wake","","Wake up the task associated with this `Waker`.",6,{"i":[{"n":"self"}]}],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",6,{"i":[{"n":"self"},{"n":"waker"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"from","","",6,{"i":[{"n":"arc"}],"o":{"n":"waker"}}],[11,"without_spawn","","Create a new task context without the ability to `spawn`.",7,{"i":[{"n":"localmap"},{"n":"waker"}],"o":{"n":"context"}}],[11,"waker","","Get the `Waker` associated with the current task.",7,{"i":[{"n":"self"}],"o":{"n":"waker"}}],[11,"with_waker","","Produce a context like the current one, but using the given waker instead.",7,{"i":[{"n":"self"},{"n":"waker"}],"o":{"n":"context"}}],[11,"with_locals","","Produce a context like the current one, but using the given task locals instead.",7,{"i":[{"n":"self"},{"n":"localmap"}],"o":{"n":"context"}}],[11,"new","","Create a new task context.",7,{"i":[{"n":"localmap"},{"n":"waker"},{"n":"executor"}],"o":{"n":"context"}}],[11,"executor","","Get the default executor associated with this task, if any",7,{"i":[{"n":"self"}],"o":{"n":"executor"}}],[11,"spawn","","Spawn a future onto the default executor.",7,{"i":[{"n":"self"},{"n":"f"}]}],[11,"with_executor","","Produce a context like the current one, but using the given executor instead.",7,{"i":[{"n":"self"},{"n":"executor"}],"o":{"n":"context"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_mut","","Access this task-local key.",8,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"t"}}],[11,"new","","Create an `AtomicWaker`.",9,{"o":{"n":"atomicwaker"}}],[11,"register","","Registers the waker to be notified on calls to `wake`.",9,{"i":[{"n":"self"},{"n":"waker"}]}],[11,"wake","","Calls `wake` on the last `Waker` passed to `register`.",9,{"i":[{"n":"self"}]}],[11,"default","","",9,{"o":{"n":"self"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker`.",null,null],[10,"clone_raw","","Creates a new `Waker` from this instance of `UnsafeWake`.",10,{"i":[{"n":"self"}],"o":{"n":"waker"}}],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",10,{"i":[{"n":"self"}]}],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",10,{"i":[{"n":"self"}]}],[8,"Wake","","A way of waking up a specific task.",null,null],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",11,{"i":[{"n":"arc"}]}],[11,"new","","Create an empty set of task-local data.",12,{"o":{"n":"localmap"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"executor","futures_core","Executors.",null,null],[3,"SpawnError","futures_core::executor","Provides the reason that an executor was unable to spawn.",null,null],[8,"Executor","","A task executor.",null,null],[10,"spawn","","Spawn the given task, polling it until completion.",13,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"status","","Determine whether the executor is able to spawn new tasks.",13,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"shutdown","","Spawning is failing because the executor has been shut down.",14,{"o":{"n":"spawnerror"}}],[11,"is_shutdown","","Check whether this error is the `shutdown` error.",14,{"o":{"n":"bool"}}],[0,"never","futures_core","Definition and trait implementations for the `Never` type, a stand-in for the `!` type until it becomes stable.",null,null],[4,"Never","futures_core::never","A type with no possible values.",null,null],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"never"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"never"}],"o":{"n":"bool"}}],[11,"cmp","","",15,{"i":[{"n":"self"},{"n":"never"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",15,{"i":[{"n":"self"},{"n":"never"}],"o":{"g":["ordering"],"n":"option"}}],[11,"never_into","","Convert the `Never` type into any other type.",15,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"poll","","",15,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["never","never"],"n":"poll"}}],[11,"poll_next","","",15,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option","never"],"n":"poll"}}],[6,"Poll","futures_core","A convenience wrapper for `Result<Async<T>, E>`.",null,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null]],"paths":[[4,"Async"],[3,"FutureOption"],[3,"FutureResult"],[8,"Future"],[8,"IntoFuture"],[8,"Stream"],[3,"Waker"],[3,"Context"],[3,"LocalKey"],[3,"AtomicWaker"],[8,"UnsafeWake"],[8,"Wake"],[3,"LocalMap"],[8,"Executor"],[3,"SpawnError"],[4,"Never"]]};
searchIndex["futures_cpupool"] = {"doc":"A simple crate for executing work on a thread pool, and getting back a future.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",null,null],[3,"Builder","","Thread pool configuration object",null,null],[3,"CpuFuture","","The type of future returned from the `CpuPool::spawn` function, which proxies the futures running on the thread pool.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,{"i":[{"n":"usize"}],"o":{"n":"cpupool"}}],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number of CPUs on the host.",0,{"o":{"n":"cpupool"}}],[11,"spawn","","Spawns a future to run on this thread pool, returning a future representing the produced value.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"cpufuture"}}],[11,"spawn_fn","","Spawns a closure on this thread pool.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"cpufuture"}}],[11,"execute","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["executeerror"],"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"cpupool"}}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"forget","","Drop this future without canceling the underlying future.",2,{"i":[{"n":"self"}]}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"new","","Create a builder a number of workers equal to the number of CPUs on the host.",1,{"o":{"n":"builder"}}],[11,"pool_size","","Set size of a future CpuPool",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"stack_size","","Set stack size of threads in the pool.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"name_prefix","","Set thread name prefix of a future CpuPool",1,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"after_start","","Execute function `f` right after each thread is started but before running any jobs on it.",1,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"before_stop","","Execute function `f` before each worker thread stops.",1,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"create","","Create CpuPool with configured parameters",1,{"i":[{"n":"self"}],"o":{"n":"cpupool"}}]],"paths":[[3,"CpuPool"],[3,"Builder"],[3,"CpuFuture"]]};
searchIndex["futures_executor"] = {"doc":"Built-in executors and related tools.","items":[[3,"BlockingStream","futures_executor","An iterator which blocks on values from a stream until they become available.",null,null],[3,"LocalPool","","A single-threaded task pool.",null,null],[3,"LocalExecutor","","A handle to a `LocalPool` that implements `Executor`.",null,null],[3,"ThreadPool","","A general-purpose thread pool for scheduling asynchronous tasks.",null,null],[3,"ThreadPoolBuilder","","Thread pool configuration object.",null,null],[3,"Enter","","Represents an executor context.",null,null],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",null,null],[3,"Spawn","","A future representing the completion of task spawning.",null,null],[3,"SpawnWithHandle","","A future representing the completion of task spawning, yielding a `JoinHandle` to the spawned task.",null,null],[3,"JoinHandle","","The type of future returned from the `ThreadPool::spawn` function, which proxies the futures running on the thread pool.",null,null],[5,"block_on","","Run a future to completion on the current thread.",null,{"i":[{"n":"f"}],"o":{"n":"result"}}],[5,"block_on_stream","","Turn a stream into a blocking iterator.",null,{"i":[{"n":"s"}],"o":{"n":"blockingstream"}}],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",null,{"o":{"g":["enter","entererror"],"n":"result"}}],[5,"spawn","","Spawn a task onto the default executor.",null,{"i":[{"n":"f"}],"o":{"n":"spawn"}}],[5,"spawn_with_handle","","Spawn a task onto the default executor, yielding a `JoinHandle` to the spawned task.",null,{"i":[{"n":"f"}],"o":{"n":"spawnwithhandle"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"localexecutor"}}],[11,"new","","Create a new, empty pool of tasks.",1,{"o":{"n":"localpool"}}],[11,"executor","","Get a clonable handle to the pool as an executor.",1,{"i":[{"n":"self"}],"o":{"n":"localexecutor"}}],[11,"run","","Run all tasks in the pool to completion.",1,{"i":[{"n":"self"},{"n":"executor"}]}],[11,"run_until","","Runs all the tasks in the pool until the given future completes.",1,{"i":[{"n":"self"},{"n":"f"},{"n":"executor"}],"o":{"n":"result"}}],[11,"into_inner","","Convert this `BlockingStream` into the inner `Stream` type.",2,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"spawn","","",0,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"status","","",0,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"spawn_local","","Spawn a non-`Send` future onto the associated `LocalPool`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new thread pool with the default configuration.",3,{"o":{"g":["threadpool","error"],"n":"result"}}],[11,"builder","","Create a default thread pool configuration, which can then be customized.",3,{"o":{"n":"threadpoolbuilder"}}],[11,"run","","Runs the given future with this thread pool as the default executor for spawning tasks.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"spawn","","",3,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"threadpool"}}],[11,"drop","","",3,{"i":[{"n":"self"}]}],[11,"new","","Create a default thread pool configuration.",4,{"o":{"n":"threadpoolbuilder"}}],[11,"pool_size","","Set size of a future ThreadPool",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"stack_size","","Set stack size of threads in the pool.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"name_prefix","","Set thread name prefix of a future ThreadPool.",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"after_start","","Execute the closure `f` immediately after each worker thread is started, but before running any tasks on it.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"before_stop","","Execute closure `f` just prior to shutting down each worker thread.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"create","","Create a `ThreadPool` with the given configuration.",4,{"i":[{"n":"self"}],"o":{"g":["threadpool","error"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",7,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["never"],"n":"poll"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",8,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["never"],"n":"poll"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"forget","","Drop this handle without canceling the underlying future.",9,{"i":[{"n":"self"}]}],[11,"poll","","",9,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}]],"paths":[[3,"LocalExecutor"],[3,"LocalPool"],[3,"BlockingStream"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"EnterError"],[3,"Enter"],[3,"Spawn"],[3,"SpawnWithHandle"],[3,"JoinHandle"]]};
searchIndex["futures_io"] = {"doc":"Asynchronous I/O","items":[[3,"IoVec","futures_io","A specialized byte slice type for performing vectored I/O operations.",null,null],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",0,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",0,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",0,null],[13,"ConnectionReset","","The connection was reset by the remote server.",0,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",0,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",0,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",0,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",0,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",0,null],[13,"AlreadyExists","","An entity already exists, often a file.",0,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",0,null],[13,"InvalidInput","","A parameter was incorrect.",0,null],[13,"InvalidData","","Data not valid for the operation were encountered.",0,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",0,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",0,null],[13,"Interrupted","","This operation was interrupted.",0,null],[13,"Other","","Any I/O error not part of this list.",0,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",0,null],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[3,"Initializer","","A type used to conditionally initialize buffers passed to `AsyncRead` methods, modeled after `std`.",null,null],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",1,{"i":[{"n":"self"}],"o":{"n":"initializer"}}],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",1,null],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",1,null],[8,"AsyncWrite","","Write bytes asynchronously.",null,null],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",2,null],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",2,null],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",2,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[10,"poll_close","","Attempt to close the object.",2,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",3,{"o":{"n":"initializer"}}],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",3,{"o":{"n":"initializer"}}],[11,"should_initialize","","Indicates if a buffer should be initialized.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"initialize","","Initializes a buffer if necessary.",3,null],[11,"from_bytes","","",4,null],[11,"from_bytes_mut","","",4,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"ordering"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",5,{"i":[{"n":"intoinnererror"}],"o":{"n":"error"}}],[11,"from","","",5,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"from","","",5,{"i":[{"n":"nulerror"}],"o":{"n":"error"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref_mut","","",4,null],[11,"deref","","",4,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",5,{"i":[{"n":"errorkind"},{"n":"e"}],"o":{"n":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",5,{"o":{"n":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",5,{"i":[{"n":"i32"}],"o":{"n":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",5,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",5,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",5,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}]],"paths":[[4,"ErrorKind"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"Initializer"],[3,"IoVec"],[3,"Error"]]};
searchIndex["futures_sink"] = {"doc":"Asynchronous sinks","items":[[8,"Sink","futures_sink","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",0,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",0,null],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be preceded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",0,null],[10,"poll_flush","","Flush any remaining output from this sink.",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}]],"paths":[[8,"Sink"]]};
searchIndex["futures_stable"] = {"doc":"","items":[],"paths":[]};
searchIndex["futures_util"] = {"doc":"Combinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.","items":[[0,"future","futures_util","Futures",null,null],[4,"Either","futures_util::future","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[3,"Empty","","A future which is never resolved.",null,null],[3,"Lazy","","A future which defers creation of the actual future until the future is `poll`ed.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator.",null,null],[3,"FlattenSink","","Future for the `flatten_sink` combinator, flattening a future-of-a-sink to get just the result of the final sink as a sink.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"IntoStream","","A type which converts a `Future` into a `Stream` containing a single element.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"ErrInto","","Future for the `err_into` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"InspectErr","","Do something with the error of a future, passing it on.",null,null],[3,"Recover","","Future for the `recover` combinator, handling errors by converting them into an `Item`, compatible with any error type of the caller's choosing.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"WithExecutor","","Future for the `with_executor` combinator, assigning an executor to be used when spawning other futures.",null,null],[4,"Loop","","An enum describing whether to `break` or `continue` a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",1,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",1,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"o":{"n":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"i":[{"n":"f"}],"o":{"n":"lazy"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"i":[{"n":"f"}],"o":{"n":"pollfn"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"i":[{"n":"s"},{"n":"f"}],"o":{"n":"loopfn"}}],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"i":[{"n":"i"}],"o":{"n":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"i":[{"n":"i"}],"o":{"n":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"i":[{"n":"i"}],"o":{"n":"selectok"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",2,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",3,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",4,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",5,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",6,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",7,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_ready","","",8,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",8,null],[11,"poll_flush","","",8,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",8,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",9,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",10,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",11,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",12,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",13,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",14,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",15,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",16,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",17,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",18,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",19,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",20,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",21,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",22,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",23,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",24,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",25,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",26,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"from_iter","","",26,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",27,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",28,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",29,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"poll","","",29,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drop","","",29,{"i":[{"n":"self"}]}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"shareditem"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_inner","","Expose the inner Arc",30,{"i":[{"n":"self"}],"o":{"n":"arc"}}],[11,"deref","","",30,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"sharederror"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_inner","","Expose the inner Arc",31,{"i":[{"n":"self"}],"o":{"n":"arc"}}],[11,"deref","","",31,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",31,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",31,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",32,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",null,null],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",33,{"i":[{"n":"self"}],"o":{"n":"errinto"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"select","","Waits for either one of two differently-typed futures to complete.",33,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",33,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"join"}}],[11,"join3","","Same as `join`, but with more futures.",33,{"i":[{"n":"self"},{"n":"b"},{"n":"c"}],"o":{"n":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",33,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"}],"o":{"n":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",33,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"},{"n":"e"}],"o":{"n":"join5"}}],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",33,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",33,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",33,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",33,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"into_stream","","Convert this future into a single element stream.",33,{"i":[{"n":"self"}],"o":{"n":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",33,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",33,{"i":[{"n":"self"}],"o":{"n":"flattensink"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",33,{"i":[{"n":"self"}],"o":{"n":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",33,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of a future, passing it on.",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",33,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",33,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"recover"}}],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",33,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"withexecutor"}}],[0,"io","futures_util","IO",null,null],[8,"AsyncRead","futures_util::io","Read bytes asynchronously.",null,null],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",34,{"i":[{"n":"self"}],"o":{"n":"initializer"}}],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",34,null],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",34,null],[8,"AsyncWrite","","Write bytes asynchronously.",null,null],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",35,null],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",35,null],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",35,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[10,"poll_close","","Attempt to close the object.",35,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async","error"],"n":"result"}}],[3,"IoVec","","A specialized byte slice type for performing vectored I/O operations.",null,null],[3,"AllowStdIo","","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",null,null],[3,"CopyInto","","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"Close","","A future used to fully close an I/O object.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"allowstdio"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"cmp","","",36,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",36,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",36,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"le","","",36,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"gt","","",36,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"ge","","",36,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"hash","","",36,null],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",36,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"get_ref","","Returns a reference to the contained IO object.",36,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained IO object.",36,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes self and returns the contained IO object.",36,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"write","","",36,null],[11,"flush","","",36,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"write_all","","",36,null],[11,"write_fmt","","",36,{"i":[{"n":"self"},{"n":"arguments"}],"o":{"n":"result"}}],[11,"poll_write","","",36,null],[11,"poll_flush","","",36,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"poll_close","","",36,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"read","","",36,null],[11,"read_to_end","","",36,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize"],"n":"result"}}],[11,"read_to_string","","",36,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["usize"],"n":"result"}}],[11,"read_exact","","",36,null],[11,"poll_read","","",36,null],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",37,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",38,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",39,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",40,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",41,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",42,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_read","","",43,null],[11,"poll_vectored_read","","",43,null],[11,"poll_write","","",44,null],[11,"poll_vectored_write","","",44,null],[11,"poll_flush","","",44,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"poll_close","","",44,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",45,{"i":[{"n":"t"}],"o":{"n":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",45,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",45,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",45,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",45,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",45,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",45,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",45,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"window"}}],[11,"as_ref","","",45,null],[11,"as_mut","","",45,null],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",46,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["error"],"n":"poll"}}],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",null,null],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",47,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"copyinto"}}],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",47,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"read"}}],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",47,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"readexact"}}],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",47,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"readtoend"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",47,null],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",null,null],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite` and then return `self`.",48,{"i":[{"n":"self"}],"o":{"n":"flush"}}],[11,"close","","Creates a future which will entirely close this `AsyncWrite` and then return `self`.",48,{"i":[{"n":"self"}],"o":{"n":"close"}}],[11,"write_all","","Write a `Buf` into this value, returning how many bytes were written. Creates a future that will write the entire contents of the buffer `buf` into this `AsyncWrite`.",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"writeall"}}],[0,"stream","futures_util","Streams",null,null],[3,"IterOk","futures_util::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"ErrInto","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Recover","","Future for the `recover` combinator, handling errors by converting them into an `Option<Item>`, such that a `None` value terminates the stream. `Recover` is compatible with any error type of the caller's choosing.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"SelectAll","","An unbounded set of streams",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",49,null],[12,"1","","",49,null],[3,"ForEachConcurrent","","A stream combinator which executes a unit closure over each item on a stream concurrently.",null,null],[3,"FuturesUnordered","","A set of `Future`s which may complete in any order.",null,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"i":[{"n":"i"}],"o":{"n":"iterok"}}],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"i":[{"n":"j"}],"o":{"n":"iterresult"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"i":[{"n":"t"}],"o":{"n":"repeat"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"o":{"n":"empty"}}],[5,"once","","Creates a stream of single element",null,{"i":[{"n":"f"}],"o":{"n":"once"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"i":[{"n":"f"}],"o":{"n":"pollfn"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"i":[{"n":"t"},{"n":"f"}],"o":{"n":"unfold"}}],[5,"select_all","","Convert a list of streams into a `Stream` of results from the streams.",null,{"i":[{"n":"i"}],"o":{"n":"selectall"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"i":[{"n":"i"}],"o":{"n":"futuresunordered"}}],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"i":[{"n":"i"}],"o":{"n":"futuresordered"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",50,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",51,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",52,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",53,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",53,null],[11,"poll_flush","","",53,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",53,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",53,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",54,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"poll","","",55,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",56,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",57,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",57,null],[11,"poll_flush","","",57,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",57,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",57,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",58,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",58,null],[11,"poll_flush","","",58,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",58,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",58,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",59,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",59,null],[11,"poll_flush","","",59,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",59,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",59,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",60,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",61,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_next","","",62,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"poll_ready","","",62,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",62,null],[11,"poll_flush","","",62,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",62,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_ready","","",63,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",63,null],[11,"poll_flush","","",63,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",63,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",63,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",63,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",63,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",63,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",63,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",64,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",64,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",64,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"poll","","",64,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",65,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",65,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",65,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",65,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",65,null],[11,"poll_flush","","",65,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",65,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",65,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",66,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",66,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",66,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",66,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",66,null],[11,"poll_flush","","",66,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",66,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",66,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",67,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",67,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",67,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",67,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",67,null],[11,"poll_flush","","",67,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",67,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",67,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",68,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",68,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",68,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",68,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",68,null],[11,"poll_flush","","",68,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",68,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",68,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",69,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_ready","","",70,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",70,null],[11,"poll_flush","","",70,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",70,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",70,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_ready","","",71,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",71,null],[11,"poll_flush","","",71,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",71,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",71,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",71,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",72,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",73,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",74,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",74,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",74,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",74,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",74,null],[11,"poll_flush","","",74,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",74,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",74,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",75,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",75,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",75,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",75,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",75,null],[11,"poll_flush","","",75,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",75,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",75,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",76,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",76,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",76,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",76,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",76,null],[11,"poll_flush","","",76,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",76,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",76,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",77,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",77,null],[11,"poll_flush","","",77,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",77,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",77,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_ready","","",78,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",78,null],[11,"poll_flush","","",78,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",78,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",78,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",79,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",80,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",81,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",81,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",81,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",81,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"poll","","",81,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",82,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",83,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",83,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",83,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",83,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",83,null],[11,"poll_flush","","",83,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",83,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",83,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",84,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",84,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",84,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_next","","",84,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"poll_ready","","",84,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",84,null],[11,"poll_flush","","",84,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",84,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",85,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_ready","","",86,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",86,null],[11,"poll_flush","","",86,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",86,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",86,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",86,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",86,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_next","","",86,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",87,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",88,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Constructs a new, empty `SelectAll`",89,{"o":{"n":"selectall"}}],[11,"len","","Returns the number of streams contained in the set.",89,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no streams",89,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push a stream into the set.",89,{"i":[{"n":"self"},{"n":"s"}]}],[11,"poll_next","","",89,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",90,{"i":[{"n":"self"},{"n":"splitsink"}],"o":{"g":["reuniteerror"],"n":"result"}}],[11,"poll_next","","",90,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",91,{"i":[{"n":"self"},{"n":"splitstream"}],"o":{"g":["reuniteerror"],"n":"result"}}],[11,"poll_ready","","",91,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",91,null],[11,"poll_flush","","",91,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",91,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",49,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Constructs a new, empty `FuturesUnordered`",92,{"o":{"n":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",92,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",92,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push a future into the set.",92,{"i":[{"n":"self"},{"n":"t"}]}],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",92,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"poll_next","","",92,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",92,{"i":[{"n":"self"}]}],[11,"from_iter","","",92,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",93,{"o":{"n":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",93,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",93,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push a future into the queue.",93,{"i":[{"n":"self"},{"n":"t"}]}],[11,"poll_next","","",93,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_iter","","",93,{"i":[{"n":"t"}],"o":{"n":"self"}}],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",null,null],[11,"next","","Converts this stream into a `Future`.",94,{"i":[{"n":"self"}],"o":{"n":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",94,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",94,{"i":[{"n":"self"}],"o":{"n":"collect"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",94,{"i":[{"n":"self"}],"o":{"n":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",94,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",94,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",94,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",94,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreach"}}],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreachconcurrent"}}],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",94,{"i":[{"n":"self"}],"o":{"n":"errinto"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",94,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",94,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",94,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",94,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",94,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",94,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",94,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferunordered"}}],[11,"zip","","An adapter for zipping two streams together.",94,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"zip"}}],[11,"chain","","Adapter for chaining two stream.",94,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",94,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",94,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",94,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",94,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",94,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",94,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"recover"}}],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",94,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",94,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",94,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",94,{"i":[{"n":"self"}],"o":{"n":"either"}}],[0,"sink","futures_util","Sinks",null,null],[3,"Buffer","futures_util::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[3,"Close","","Future for the `close` combinator, which polls the sink until all data has been closed.",null,null],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",null,null],[3,"Flush","","Future for the `flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"SinkErrInto","","A sink combinator to change the error type of a sink.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",null,null],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",null,null],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink. Returns `None` if the sink has already been closed.",95,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been closed.",95,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_inner","","Consume the `Close` and return the inner sink. Returns `None` if the sink has already been closed.",95,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"poll","","",95,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"fanout"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,null],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"poll_ready","","",96,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",96,null],[11,"poll_flush","","",96,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",96,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink. Returns `None` if the sink has already been flushed.",97,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been flushed.",97,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_inner","","Consume the `Flush` and return the inner sink. Returns `None` if the sink has already been flushed.",97,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"poll","","",97,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"sinkerrinto"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",98,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",98,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",98,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",98,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",98,null],[11,"poll_flush","","",98,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",98,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",98,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"sinkmaperr"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",99,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",99,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",99,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",99,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",99,null],[11,"poll_flush","","",99,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",99,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_next","","",99,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",100,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",100,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"poll","","",100,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",101,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"with"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll_next","","",102,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",102,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",102,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",102,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_ready","","",102,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",102,null],[11,"poll_flush","","",102,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",102,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",103,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",103,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",103,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_next","","",103,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"poll_ready","","",103,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",103,null],[11,"poll_flush","","",103,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",103,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",104,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",104,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",104,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"poll_next","","",104,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["option"],"n":"poll"}}],[11,"poll_ready","","",104,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"start_send","","",104,null],[11,"poll_flush","","",104,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[11,"poll_close","","",104,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"poll"}}],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",null,null],[11,"with","","Composes a function in front of the sink.",105,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",105,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",105,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"sinkmaperr"}}],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",105,{"i":[{"n":"self"}],"o":{"n":"sinkerrinto"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",105,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffer"}}],[11,"close","","Close the sink.",105,{"i":[{"n":"self"}],"o":{"n":"close"}}],[11,"fanout","","Fanout items to multiple sinks.",105,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"fanout"}}],[11,"flush","","Flush the sync, processing all pending items.",105,{"i":[{"n":"self"}],"o":{"n":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",105,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",105,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"sendall"}}],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",105,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",105,{"i":[{"n":"self"}],"o":{"n":"either"}}],[0,"prelude","futures_util","Prelude containing the extension traits, which add functionality to existing asynchronous types.",null,null],[11,"is_left","futures_util::future","Return true if the value is the `Left` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"poll_next","","",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"extend","","",0,null],[11,"from","","",0,{"i":[{"n":"result"}],"o":{"n":"either"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"write","","",0,null],[11,"flush","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"deref_mut","","",0,null],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"fill_buf","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"consume","","",0,null],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"hash","","",0,null],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",0,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"deref","","",0,null],[11,"deref_mut","futures_util::io","",106,null],[11,"deref","","",106,null],[11,"poll_ready","futures_util::future","",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",0,null],[11,"poll_flush","","",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_close","","",0,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["async"],"n":"result"}}],[11,"from_bytes","futures_util::io","",106,null],[11,"from_bytes_mut","","",106,null]],"paths":[[4,"Either"],[4,"Loop"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenSink"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"ErrInto"],[3,"OrElse"],[3,"Select"],[3,"Then"],[3,"Inspect"],[3,"InspectErr"],[3,"Recover"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[3,"WithExecutor"],[8,"FutureExt"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"AllowStdIo"],[3,"CopyInto"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Close"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[3,"WriteAll"],[8,"AsyncReadExt"],[8,"AsyncWriteExt"],[3,"ReuniteError"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"ErrInto"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Recover"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"ForEachConcurrent"],[3,"SelectAll"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[8,"StreamExt"],[3,"Close"],[3,"Fanout"],[3,"Flush"],[3,"SinkErrInto"],[3,"SinkMapErr"],[3,"Send"],[3,"SendAll"],[3,"With"],[3,"WithFlatMap"],[3,"Buffer"],[8,"SinkExt"],[3,"IoVec"]]};
searchIndex["gif"] = {"doc":"GIF en- and decoding library Build Status","items":[[3,"Frame","gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",0,null],[12,"dispose","","Disposal method.",0,null],[12,"transparent","","Transparent index (if available).",0,null],[12,"needs_user_input","","True if the frame needs user input to be displayed.",0,null],[12,"top","","Offset from the top border of the canvas.",0,null],[12,"left","","Offset from the left border of the canvas.",0,null],[12,"width","","Width of the frame.",0,null],[12,"height","","Height of the frame.",0,null],[12,"interlaced","","True if the image is interlaced.",0,null],[12,"palette","","Frame local color palette if available.",0,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",0,null],[3,"StreamingDecoder","","GIF decoder which supports streaming",null,null],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means that there is no memory limit set.",null,null],[12,"0","","",1,null],[3,"Reader","","GIF decoder",null,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[4,"Block","","Known GIF block types",null,null],[13,"Image","","Image block.",2,null],[13,"Extension","","Extension block.",2,null],[13,"Trailer","","Image trailer.",2,null],[4,"Extension","","Known GIF extensions",null,null],[13,"Text","","Text extension.",3,null],[13,"Control","","Control extension.",3,null],[13,"Comment","","Comment extension.",3,null],[13,"Application","","Application extension.",3,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",4,null],[13,"Keep","","Do not dispose.",4,null],[13,"Background","","Restore to background color.",4,null],[13,"Previous","","Restore to previous.",4,null],[4,"Decoded","","Indicates whether a certain object has been decoded",null,null],[13,"Nothing","","Decoded nothing.",5,null],[13,"GlobalPalette","","Global palette.",5,null],[13,"BackgroundColor","","Index of the background color in the global palette.",5,null],[13,"Trailer","","Decoded the image trailer.",5,null],[13,"BlockStart","","The start of a block.",5,null],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",5,null],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",5,null],[13,"Frame","","Decoded all information of the next frame. The returned frame does not any image data.",5,null],[13,"Data","","Decoded some data of the current frame.",5,null],[13,"DataEnd","","No more data available the current frame.",5,null],[4,"DecodingError","","Decoding error.",null,null],[13,"Format","","Returned if the image is found to be malformed.",6,null],[13,"Internal","","Internal (logic) error.",6,null],[13,"Io","","Wraps `std::io::Error`.",6,null],[4,"ColorOutput","","Output mode for the image data",null,null],[13,"RGBA","","The decoder expands the image data to 32bit RGBA. This affects:",7,null],[13,"Indexed","","The decoder returns the raw indexed data.",7,null],[4,"Extensions","","Configures how extensions should be handled",null,null],[13,"Save","","Saves all extention data",8,null],[13,"Skip","","Skips the data of unknown extensions and extracts the data from known ones",8,null],[4,"ExtensionData","","Extension data.",null,null],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",9,null],[12,"flags","gif::ExtensionData","Flags.",9,null],[12,"delay","","Frame delay.",9,null],[12,"trns","","Transparent index.",9,null],[13,"Repetitions","gif","Sets the number of repetitions",9,null],[4,"Repeat","","Number of repetitions",null,null],[13,"Finite","","Finite number of repetitions",10,null],[13,"Infinite","","Infinite number of repetitions",10,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"disposalmethod"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"disposalmethod"}],"o":{"n":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",4,{"i":[{"n":"u8"}],"o":{"g":["disposalmethod"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"block"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"block"}],"o":{"n":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",2,{"i":[{"n":"u8"}],"o":{"g":["block"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"extension"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"extension"}],"o":{"n":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",3,{"i":[{"n":"u8"}],"o":{"g":["extension"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"default","","",0,{"o":{"n":"frame"}}],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,null],[11,"from_palette_pixels","","Creates a frame from a palette and indexed pixels",0,null],[11,"from_indexed_pixels","","Creates a frame from indexed pixels in the global palette",0,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",6,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",6,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",6,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"extensions"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set_param","","",8,{"i":[{"n":"self"},{"n":"streamingdecoder"}]}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new streaming decoder",11,{"o":{"n":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder. ",11,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",11,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",11,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"current_frame","","Current frame info as a ref.",11,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"width","","Width of the image",11,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"height","","Height of the image",11,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"coloroutput"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set_param","","",7,{"i":[{"n":"self"},{"n":"decoder"}]}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set_param","","",1,{"i":[{"n":"self"},{"n":"decoder"}]}],[11,"new","","Creates a new decoder builder",12,{"i":[{"n":"r"}],"o":{"n":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,{"i":[{"n":"self"}],"o":{"g":["reader","decodingerror"],"n":"result"}}],[11,"next_frame_info","","Returns the next frame info",13,{"i":[{"n":"self"}],"o":{"g":["option","decodingerror"],"n":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",13,{"i":[{"n":"self"}],"o":{"g":["option","decodingerror"],"n":"result"}}],[11,"read_into_buffer","","Reads the data of the current frame into a pre-allocated buffer.",13,null],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been filled completely.",13,null],[11,"buffer_size","","Output buffer size",13,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"line_length","","Line length of the current frame",13,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,{"i":[{"n":"self"}],"o":{"g":["decodingerror"],"n":"result"}}],[11,"global_palette","","The global color palette",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"width","","Width of the image",13,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"height","","Height of the image",13,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",13,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"set_param","","",10,null],[11,"new_control_ext","","Constructor for control extension data.",9,{"i":[{"n":"u16"},{"n":"disposalmethod"},{"n":"bool"},{"g":["u8"],"n":"option"}],"o":{"n":"extensiondata"}}],[11,"new","","Creates a new encoder.",14,null],[11,"write_global_palette","","Writes the global color palette.",14,null],[11,"write_frame","","Writes a frame to the image.",14,{"i":[{"n":"self"},{"n":"frame"}],"o":{"n":"result"}}],[11,"write_extension","","Writes an extension to the image.",14,{"i":[{"n":"self"},{"n":"extensiondata"}],"o":{"n":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",14,null],[11,"drop","","",14,{"i":[{"n":"self"}]}],[8,"SetParameter","","Implemented for objects that have parameters.",null,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null],[8,"Parameter","","Configuration parameter trait.",null,null],[16,"Result","","Result type of `set_param`.",16,null],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null]],"paths":[[3,"Frame"],[3,"MemoryLimit"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex["image"] = {"doc":"This crate provides native rust implementations of image encoders and decoders and basic image manipulation functions.","items":[[3,"Luma","image","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Holds the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder to decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"DecodingResult","","Result of a decoding process",null,null],[13,"U8","","A vector of unsigned bytes",6,null],[13,"U16","","A vector of unsigned words",6,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[4,"ImageFormat","","An enumeration of supported image formats. Not all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",8,null],[13,"JPEG","","An Image in JPEG Format",8,null],[13,"GIF","","An Image in GIF Format",8,null],[13,"WEBP","","An Image in WEBP Format",8,null],[13,"PNM","","An Image in general PNM Format",8,null],[13,"TIFF","","An Image in TIFF Format",8,null],[13,"TGA","","An Image in TGA Format",8,null],[13,"BMP","","An Image in BMP Format",8,null],[13,"ICO","","An Image in ICO Format",8,null],[13,"HDR","","An Image in Radiance HDR Format",8,null],[4,"ImageOutputFormat","","An enumeration of supported image formats for encoding.",null,null],[13,"PNG","","An Image in PNG Format",9,null],[13,"JPEG","","An Image in JPEG Format with specified quality",9,null],[13,"PNM","","An Image in one of the PNM Formats",9,null],[13,"GIF","","An Image in GIF Format",9,null],[13,"ICO","","An Image in ICO Format",9,null],[13,"BMP","","An Image in BMP Format",9,null],[13,"Unsupported","","A value for signalling an error: An unsupported format was requested",9,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",10,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",10,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",10,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",10,null],[5,"Luma","","",null,null],[5,"LumaA","","",null,null],[5,"Rgb","","",null,null],[5,"Rgba","","",null,null],[5,"open","","Open the image located at the path specified. The image's format is determined from the path's file extension.",null,{"i":[{"n":"p"}],"o":{"g":["dynamicimage"],"n":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"i":[{"n":"r"},{"n":"imageformat"}],"o":{"g":["dynamicimage"],"n":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"guess_format","","Guess image format from memory block",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"i":[{"n":"n"},{"n":"n"},{"n":"n"}],"o":{"n":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See \"Kohonen neural networks for optimal colour quantization\" in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of the algorithm. See also http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neural network and trains it with the supplied data",11,null],[11,"init","","Initializes the neural network and trains it with the supplied data",11,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",11,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",11,null],[0,"imageops","image","Image Processing Functions",null,null],[4,"FilterType","image::imageops","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[5,"rotate90","","Rotate an image 90 degrees clockwise.",null,{"i":[{"n":"i"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"i":[{"n":"i"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"i":[{"n":"i"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"i":[{"n":"i"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"i":[{"n":"i"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image. `kernel` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions. `nwidth` and `nheight` are the new dimensions. `filter` is the sampling filter to use.",null,{"i":[{"n":"i"},{"n":"u32"},{"n":"u32"},{"n":"filtertype"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"thumbnail","","Resize the supplied image down to the specific dimensions.",null,{"i":[{"n":"i"},{"n":"u32"},{"n":"u32"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image. `sigma` is a measure of how much to blur by.",null,{"i":[{"n":"i"},{"n":"f32"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image. `sigma` is the amount to blur the image by. `threshold` is the threshold for the difference between",null,{"i":[{"n":"i"},{"n":"f32"},{"n":"i32"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"i":[{"n":"i"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"i":[{"n":"i"},{"n":"i"},{"n":"u32"},{"n":"u32"}]}],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",null,{"i":[{"n":"i"},{"n":"i"},{"n":"u32"},{"n":"u32"}]}],[0,"colorops","","Functions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"i":[{"n":"i"}],"o":{"g":["luma","vec"],"n":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image. This function operates in place.",null,{"i":[{"n":"i"}]}],[5,"contrast","","Adjust the contrast of the supplied image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",null,{"i":[{"n":"i"},{"n":"f32"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",null,{"i":[{"n":"i"},{"n":"i32"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",null,{"i":[{"n":"i"},{"n":"i32"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying Floyd-Steinberg dithering to improve the visual conception",null,{"i":[{"n":"imagebuffer"},{"n":"map"}]}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"i":[{"n":"imagebuffer"},{"n":"map"}],"o":{"g":["luma","vec"],"n":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","","The color type on which the map operates on",12,null],[10,"index_of","","Returns the index of the closed match of `color` in the color map.",12,null],[10,"map_color","","Maps `color` to the closest color in the color map.",12,null],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"bilevel"}}],[11,"index_of","","",13,{"i":[{"n":"self"},{"n":"luma"}],"o":{"n":"usize"}}],[11,"map_color","","",13,{"i":[{"n":"self"},{"n":"luma"}]}],[11,"index_of","image::math::nq","",11,{"i":[{"n":"self"},{"n":"rgba"}],"o":{"n":"usize"}}],[11,"map_color","","",11,{"i":[{"n":"self"},{"n":"rgba"}]}],[11,"clone","image","",7,{"i":[{"n":"self"}],"o":{"n":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader `r`. This function takes ownership of the Reader.",14,{"i":[{"n":"r"}],"o":{"n":"webpdecoder"}}],[11,"dimensions","","",14,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",14,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",14,null],[11,"read_image","","",14,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",15,null],[12,"height","","The height of the luma plane",15,null],[12,"ybuf","","The luma plane of the frame",15,null],[12,"keyframe","","Indicates whether this frame is a keyframe",15,null],[12,"for_display","","Indicates whether this frame is intended for display",15,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2 of the VP8 Specification",15,null],[3,"VP8Decoder","","VP8 Decoder",null,null],[11,"default","","",15,{"o":{"n":"frame"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"new","","Create a new decoder. The reader must present a raw vp8 bitstream to the decoder",16,{"i":[{"n":"r"}],"o":{"n":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",16,{"i":[{"n":"self"}],"o":{"g":["frame"],"n":"result"}}],[0,"pnm","image","Decoding of netpbm image formats (pbm, pgm, ppm and pam).",null,null],[3,"PNMDecoder","image::pnm","PNM decoder",null,null],[3,"PNMEncoder","","Encodes images to any of the `pnm` image formats.",null,null],[3,"PNMHeader","","Stores the complete header data of a file.",null,null],[3,"ArbitraryHeader","","Header produced by a `pam` file (\"Portable Arbitrary Map\")",null,null],[12,"height","","Height of the image file",17,null],[12,"width","","Width of the image file",17,null],[12,"depth","","Number of color channels",17,null],[12,"maxval","","Maximum sample value within the image",17,null],[12,"tupltype","","Color interpretation of image pixels",17,null],[3,"BitmapHeader","","Header produced by a `pbm` file (\"Portable Bit Map\")",null,null],[12,"encoding","","Binary or Ascii encoded file",18,null],[12,"height","","Height of the image file",18,null],[12,"width","","Width of the image file",18,null],[3,"GraymapHeader","","Header produced by a `pgm` file (\"Portable Gray Map\")",null,null],[12,"encoding","","Binary or Ascii encoded file",19,null],[12,"height","","Height of the image file",19,null],[12,"width","","Width of the image file",19,null],[12,"maxwhite","","Maximum sample value within the image",19,null],[3,"PixmapHeader","","Header produced by a `ppm` file (\"Portable Pixel Map\")",null,null],[12,"encoding","","Binary or Ascii encoded file",20,null],[12,"height","","Height of the image file",20,null],[12,"width","","Width of the image file",20,null],[12,"maxval","","Maximum sample value within the image",20,null],[4,"PNMSubtype","","Denotes the category of the magic number",null,null],[13,"Bitmap","","Magic numbers P1 and P4",21,null],[13,"Graymap","","Magic numbers P2 and P5",21,null],[13,"Pixmap","","Magic numbers P3 and P6",21,null],[13,"ArbitraryMap","","Magic number P7",21,null],[4,"SampleEncoding","","The kind of encoding used to store sample values",null,null],[13,"Binary","","Samples are unsigned binary integers in big endian",22,null],[13,"Ascii","","Samples are encoded as decimal ascii strings separated by whitespace",22,null],[4,"ArbitraryTuplType","","Standardized tuple type specifiers in the header of a `pam`.",null,null],[13,"BlackAndWhite","","Pixels are either black (0) or white (1)",23,null],[13,"BlackAndWhiteAlpha","","Pixels are either black (0) or white (1) and a second alpha channel",23,null],[13,"Grayscale","","Pixels represent the amount of white",23,null],[13,"GrayscaleAlpha","","Grayscale with an additional alpha channel",23,null],[13,"RGB","","Three channels: Red, Green, Blue",23,null],[13,"RGBAlpha","","Four channels: Red, Green, Blue, Alpha",23,null],[13,"Custom","","An image format which is not standardized",23,null],[11,"new","","Create a new decoder that decodes from the stream `read`",24,{"i":[{"n":"r"}],"o":{"g":["pnmdecoder"],"n":"imageresult"}}],[11,"into_inner","","Extract the reader and header after an image has been read.",24,null],[11,"dimensions","","",24,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",24,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",24,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",24,null],[11,"read_image","","",24,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[11,"subtype","","Get the pnm subtype, depending on the magic constant contained in the header",24,{"i":[{"n":"self"}],"o":{"n":"pnmsubtype"}}],[11,"new","","Create new PNMEncoder from the `writer`.",25,{"i":[{"n":"w"}],"o":{"n":"self"}}],[11,"with_subtype","","Encode a specific pnm subtype image.",25,{"i":[{"n":"self"},{"n":"pnmsubtype"}],"o":{"n":"self"}}],[11,"with_header","","Enforce the use of a chosen header.",25,{"i":[{"n":"self"},{"n":"pnmheader"}],"o":{"n":"self"}}],[11,"with_dynamic_header","","Create the header dynamically for each image.",25,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"encode","","Encode an image whose samples are represented as `u8`.",25,{"i":[{"n":"self"},{"n":"s"},{"n":"u32"},{"n":"u32"},{"n":"colortype"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"sampleencoding"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"sampleencoding"}],"o":{"n":"bool"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"pnmsubtype"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"pnmsubtype"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"pnmsubtype"}],"o":{"n":"bool"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"bitmapheader"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"graymapheader"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"pixmapheader"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"arbitraryheader"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"arbitrarytupltype"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"magic_constant","","Get the two magic constant bytes corresponding to this format subtype.",21,null],[11,"sample_encoding","","Whether samples are stored as binary or as decimal ascii",21,{"i":[{"n":"self"}],"o":{"n":"sampleencoding"}}],[11,"subtype","","Retrieve the format subtype from which the header was created.",26,{"i":[{"n":"self"}],"o":{"n":"pnmsubtype"}}],[11,"width","","The width of the image this header is for.",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","The height of the image this header is for.",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"maximal_sample","","The biggest value a sample can have. In other words, the colour resolution.",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"as_bitmap","","Retrieve the underlying bitmap header if any",26,{"i":[{"n":"self"}],"o":{"g":["bitmapheader"],"n":"option"}}],[11,"as_graymap","","Retrieve the underlying graymap header if any",26,{"i":[{"n":"self"}],"o":{"g":["graymapheader"],"n":"option"}}],[11,"as_pixmap","","Retrieve the underlying pixmap header if any",26,{"i":[{"n":"self"}],"o":{"g":["pixmapheader"],"n":"option"}}],[11,"as_arbitrary","","Retrieve the underlying arbitrary header if any",26,{"i":[{"n":"self"}],"o":{"g":["arbitraryheader"],"n":"option"}}],[11,"write","","Write the header back into a binary stream",26,{"i":[{"n":"self"},{"n":"write"}],"o":{"n":"result"}}],[11,"from","","",26,{"i":[{"n":"bitmapheader"}],"o":{"n":"self"}}],[11,"from","","",26,{"i":[{"n":"graymapheader"}],"o":{"n":"self"}}],[11,"from","","",26,{"i":[{"n":"pixmapheader"}],"o":{"n":"self"}}],[11,"from","","",26,{"i":[{"n":"arbitraryheader"}],"o":{"n":"self"}}],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","PNG decoder",null,null],[3,"PNGEncoder","","PNG encoder",null,null],[11,"new","","Creates a new decoder that decodes from the stream `r`",27,{"i":[{"n":"r"}],"o":{"n":"pngdecoder"}}],[11,"dimensions","","",27,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",27,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",27,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",27,null],[11,"read_image","","",27,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to `w`",28,{"i":[{"n":"w"}],"o":{"n":"pngencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",28,null],[11,"from","image","",4,null],[11,"from","","",5,{"i":[{"n":"decodingerror"}],"o":{"n":"imageerror"}}],[0,"ico","","Decoding and Encoding of ICO files",null,null],[3,"ICODecoder","image::ico","An ico decoder",null,null],[3,"ICOEncoder","","ICO encoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",29,{"i":[{"n":"r"}],"o":{"g":["icodecoder"],"n":"imageresult"}}],[11,"dimensions","","",29,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",29,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",29,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",29,null],[11,"read_image","","",29,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to `w`.",30,{"i":[{"n":"w"}],"o":{"n":"icoencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.  The dimensions of the image must be between 1 and 256 (inclusive) or an error will be returned.",30,null],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[11,"new","","Create a new encoder that writes its output to `w`",31,{"i":[{"n":"w"}],"o":{"n":"jpegencoder"}}],[11,"new_with_quality","","Create a new encoder that writes its output to `w`, and has the quality parameter `quality` with a value in the range 1-100 where 1 is the worst and 100 is the best.",31,{"i":[{"n":"w"},{"n":"u8"}],"o":{"n":"jpegencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",31,null],[11,"new","","Create a new decoder that decodes from the stream `r`",32,{"i":[{"n":"r"}],"o":{"n":"jpegdecoder"}}],[11,"dimensions","","",32,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",32,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",32,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",32,null],[11,"read_image","","",32,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[11,"from","image","",4,{"i":[{"n":"pixelformat"}],"o":{"n":"colortype"}}],[11,"from","","",5,{"i":[{"n":"error"}],"o":{"n":"imageerror"}}],[0,"gif","","Decoding of GIF Images",null,null],[3,"Frame","image::gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",33,null],[12,"dispose","","Disposal method.",33,null],[12,"transparent","","Transparent index (if available).",33,null],[12,"needs_user_input","","True if the frame needs user input to be displayed.",33,null],[12,"top","","Offset from the top border of the canvas.",33,null],[12,"left","","Offset from the left border of the canvas.",33,null],[12,"width","","Width of the frame.",33,null],[12,"height","","Height of the frame.",33,null],[12,"interlaced","","True if the image is interlaced.",33,null],[12,"palette","","Frame local color palette if available.",33,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",33,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",34,null],[13,"Keep","","Do not dispose.",34,null],[13,"Background","","Restore to background color.",34,null],[13,"Previous","","Restore to previous.",34,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[11,"new","","Creates a new decoder that decodes the input steam `r`",35,{"i":[{"n":"r"}],"o":{"n":"decoder"}}],[11,"dimensions","","",35,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",35,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",35,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",35,null],[11,"read_image","","",35,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[11,"is_animated","","",35,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"imageresult"}}],[11,"into_frames","","",35,{"i":[{"n":"self"}],"o":{"g":["image_frames"],"n":"imageresult"}}],[11,"new","","Creates a new GIF encoder.",36,{"i":[{"n":"w"}],"o":{"n":"encoder"}}],[11,"encode","","Encodes a frame.",36,{"i":[{"n":"self"},{"n":"frame"}],"o":{"n":"imageresult"}}],[11,"from","image","",5,{"i":[{"n":"decodingerror"}],"o":{"n":"imageerror"}}],[0,"tiff","","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",null,null],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new decoder that decodes from the stream `r`",37,{"i":[{"n":"r"}],"o":{"g":["tiffdecoder"],"n":"imageresult"}}],[11,"init","","Initializes the decoder.",37,{"i":[{"n":"self"}],"o":{"g":["tiffdecoder"],"n":"imageresult"}}],[11,"next_image","","Reads in the next image. If there is no further image in the TIFF file a format error is returned. To determine whether there are more images call `TIFFDecoder::more_images` instead.",37,{"i":[{"n":"self"}],"o":{"g":["tiffdecoder"],"n":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"byte_order","","Returns the byte_order",37,{"i":[{"n":"self"}],"o":{"n":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",37,{"i":[{"n":"self"}],"o":{"g":["u16","error"],"n":"result"}}],[11,"read_long","","Reads a TIFF long value",37,{"i":[{"n":"self"}],"o":{"g":["u32","error"],"n":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",37,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",37,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"dimensions","","",37,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",37,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",37,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",37,null],[11,"read_image","","",37,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",38,{"i":[{"n":"r"}],"o":{"n":"tgadecoder"}}],[11,"dimensions","","",38,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",38,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",38,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",38,null],[11,"read_image","","",38,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[0,"bmp","image","Decoding and Encoding of BMP Images",null,null],[3,"BMPEncoder","image::bmp","The representation of a BMP encoder.",null,null],[3,"BMPDecoder","","A bmp decoder",null,null],[11,"new","","Create a new encoder that writes its output to `w`.",39,{"i":[{"n":"w"}],"o":{"n":"self"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.",39,null],[11,"new","","Create a new decoder that decodes from the stream `r`",40,{"i":[{"n":"r"}],"o":{"n":"bmpdecoder"}}],[11,"dimensions","","",40,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",40,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",40,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",40,null],[11,"read_image","","",40,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[0,"hdr","image","Decoding of Radiance HDR Images",null,null],[3,"HDRAdapter","image::hdr","Adapter to conform to `ImageDecoder` trait",null,null],[3,"HDRDecoder","","An Radiance HDR decoder",null,null],[3,"RGBE8Pixel","","Refer to wikipedia",null,null],[12,"c","","Color components",41,null],[12,"e","","Exponent",41,null],[3,"HDRImageDecoderIterator","","Scanline buffered pixel by pixel iterator",null,null],[3,"HDRMetadata","","Metadata for Radiance HDR image",null,null],[12,"width","","Width of decoded image. It could be either scanline length, or scanline count, depending on image orientation.",42,null],[12,"height","","Height of decoded image. It depends on orientation too.",42,null],[12,"orientation","","Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom. First pair tells how resulting pixel coordinates change along a scanline. Second pair tells how they change from one scanline to the next.",42,null],[12,"exposure","","Divide color values by exposure to get to get physical radiance in watts/steradian/m2",42,null],[12,"color_correction","","Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance in watts/steradian/m2",42,null],[12,"pixel_aspect_ratio","","Pixel height divided by pixel width",42,null],[12,"custom_attributes","","All lines contained in image header are put here. Ordering of lines is preserved. Lines in the form \"key=value\" are represented as (\"key\", \"value\"). All other lines are (\"\", \"line\")",42,null],[3,"HDREncoder","","Radiance HDR encoder",null,null],[5,"rgbe8","","Creates `RGBE8Pixel` from components",null,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"rgbe8pixel"}}],[5,"read_raw_file","","Helper function for reading raw 3-channel f32 images",null,{"i":[{"n":"p"}],"o":{"g":["vec"],"n":"result"}}],[5,"to_rgbe8","","Converts `Rgb<f32>` into `RGBE8Pixel`",null,{"i":[{"g":["f32"],"n":"rgb"}],"o":{"n":"rgbe8pixel"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates adapter",43,{"i":[{"n":"r"}],"o":{"g":["hdradapter"],"n":"imageresult"}}],[11,"new_nonstrict","","Allows reading old Radiance HDR images",43,{"i":[{"n":"r"}],"o":{"g":["hdradapter"],"n":"imageresult"}}],[11,"dimensions","","",43,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",43,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",43,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",43,null],[11,"read_image","","",43,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"rgbe8pixel"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"rgbe8pixel"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"rgbe8pixel"}],"o":{"n":"bool"}}],[11,"to_hdr","","Converts `RGBE8Pixel` into `Rgb<f32>` linearly",41,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"rgb"}}],[11,"to_ldr","","Converts `RGBE8Pixel` into `Rgb<T>` with scale=1 and gamma=2.2",41,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[11,"to_ldr_scale_gamma","","Converts RGBE8Pixel into Rgb using provided scale and gamma",41,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"}],"o":{"n":"rgb"}}],[11,"new","","Reads Radiance HDR image header from stream `r` if the header is valid, creates HDRDecoder strict mode is enabled",44,{"i":[{"n":"r"}],"o":{"g":["hdrdecoder"],"n":"imageresult"}}],[11,"with_strictness","","Reads Radiance HDR image header from stream `reader`, if the header is valid, creates `HDRDecoder`.",44,{"i":[{"n":"r"},{"n":"bool"}],"o":{"g":["hdrdecoder"],"n":"imageresult"}}],[11,"metadata","","Returns file metadata. Refer to `HDRMetadata` for details.",44,{"i":[{"n":"self"}],"o":{"n":"hdrmetadata"}}],[11,"read_image_native","","Consumes decoder and returns a vector of RGBE8 pixels",44,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"imageresult"}}],[11,"read_image_transform","","Consumes decoder and returns a vector of transformed pixels",44,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["vec"],"n":"imageresult"}}],[11,"read_image_ldr","","Consumes decoder and returns a vector of Rgb pixels. scale = 1, gamma = 2.2",44,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"imageresult"}}],[11,"read_image_hdr","","Consumes decoder and returns a vector of Rgb pixels.",44,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"imageresult"}}],[11,"into_iter","","",44,null],[11,"next","","",45,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",45,null],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"hdrmetadata"}}],[11,"new","","Creates encoder",46,{"i":[{"n":"w"}],"o":{"n":"hdrencoder"}}],[11,"encode","","Encodes the image `data` that has dimensions `width` and `height`",46,null],[17,"SIGNATURE","","Radiance HDR file signature",null,null],[0,"dxt","image","Decoding of DXT (S3TC) compression",null,null],[3,"DXTDecoder","image::dxt","DXT decoder",null,null],[3,"DXTEncoder","","DXT encoder",null,null],[4,"DXTVariant","","What version of DXT compression are we using? Note that DXT2 and DXT4 are left away as they're just DXT3 and DXT5 with premultiplied alpha",null,null],[13,"DXT1","","The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is compressed into an 8 byte block of DXT1 data",47,null],[13,"DXT3","","The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is compressed into a 16 byte block of DXT3 data",47,null],[13,"DXT5","","The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is compressed into a 16 byte block of DXT5 data",47,null],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"dxtvariant"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"dxtvariant"}],"o":{"n":"bool"}}],[11,"colortype","","Returns the colortype that is stored in this DXT variant",47,{"i":[{"n":"self"}],"o":{"n":"colortype"}}],[11,"new","","Create a new DXT decoder that decodes from the stream `r`. As DXT is often stored as raw buffers with the width/height somewhere else the width and height of the image need to be passed in `width` and `height`, as well as the DXT variant in `variant`. width and height are required to be powers of 2 and at least 4. otherwise an error will be returned",48,{"i":[{"n":"r"},{"n":"u32"},{"n":"u32"},{"n":"dxtvariant"}],"o":{"g":["dxtdecoder","imageerror"],"n":"result"}}],[11,"dimensions","","",48,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[11,"colortype","","",48,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[11,"row_len","","",48,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[11,"read_scanline","","",48,null],[11,"read_image","","",48,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to `w`",49,{"i":[{"n":"w"}],"o":{"n":"dxtencoder"}}],[11,"encode","","Encodes the image data `data` that has dimensions `width` and `height` in `DXTVariant` `variant` data is assumed to be in variant.colortype()",49,null],[11,"fmt","image","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",5,{"i":[{"n":"error"}],"o":{"n":"imageerror"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"imageformat"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"imageformat"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"imageoutputformat"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"imageoutputformat"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"imageoutputformat"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",9,{"i":[{"n":"imageformat"}],"o":{"n":"self"}}],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",51,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Construct a new subimage",52,{"i":[{"n":"i"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",52,{"i":[{"n":"self"}],"o":{"n":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",52,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}]}],[11,"to_image","","Convert this subimage to an ImageBuffer",52,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[11,"dimensions","","",52,null],[11,"bounds","","",52,null],[11,"get_pixel","","",52,null],[11,"put_pixel","","",52,null],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",52,null],[11,"get_pixel_mut","","",52,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",10,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey pixels with transparency.",10,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",10,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",10,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",10,{"i":[{"n":"self"}],"o":{"n":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",10,{"i":[{"n":"self"}],"o":{"n":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",10,{"i":[{"n":"self"}],"o":{"n":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",10,{"i":[{"n":"self"}],"o":{"n":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",10,{"i":[{"n":"self"}],"o":{"g":["rgbimage"],"n":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",10,{"i":[{"n":"self"}],"o":{"g":["rgbimage"],"n":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",10,{"i":[{"n":"self"}],"o":{"g":["rgbaimage"],"n":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",10,{"i":[{"n":"self"}],"o":{"g":["rgbaimage"],"n":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",10,{"i":[{"n":"self"}],"o":{"g":["grayimage"],"n":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",10,{"i":[{"n":"self"}],"o":{"g":["grayimage"],"n":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",10,{"i":[{"n":"self"}],"o":{"g":["grayalphaimage"],"n":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",10,{"i":[{"n":"self"}],"o":{"g":["grayalphaimage"],"n":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",10,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"color","","Return this image's color type.",10,{"i":[{"n":"self"}],"o":{"n":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",10,{"i":[{"n":"self"}],"o":{"n":"dynamicimage"}}],[11,"invert","","Invert the colors of this image. This method operates inplace.",10,{"i":[{"n":"self"}]}],[11,"resize","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by `nwidth` and `nheight`.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"filtertype"}],"o":{"n":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm. Returns a new image. Does not preserve aspect ratio. `nwidth` and `nheight` are the new image's dimensions",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"filtertype"}],"o":{"n":"dynamicimage"}}],[11,"thumbnail","","Scale this image down to fit within a specific size. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by `nwidth` and `nheight`.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"dynamicimage"}}],[11,"thumbnail_exact","","Scale this image down to a specific size. Returns a new image. Does not preserve aspect ratio. `nwidth` and `nheight` are the new image's dimensions. This method uses a fast integer algorithm where each source pixel contributes to exactly one target pixel. May give aliasing artifacts if new size is close to old size.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"dynamicimage"}}],[11,"resize_to_fill","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the larger (relative to aspect ratio) of the bounds specified by `nwidth` and `nheight`, then cropped to fit within the other bound.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"filtertype"}],"o":{"n":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image. `sigma` is a measure of how much to blur by.",10,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image. `sigma` is the amount to blur the image by. `threshold` is a control of how much to sharpen.",10,{"i":[{"n":"self"},{"n":"f32"},{"n":"i32"}],"o":{"n":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",10,null],[11,"adjust_contrast","","Adjust the contrast of this image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",10,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",10,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"dynamicimage"}}],[11,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",10,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",10,{"i":[{"n":"self"}],"o":{"n":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",10,{"i":[{"n":"self"}],"o":{"n":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",10,{"i":[{"n":"self"}],"o":{"n":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",10,{"i":[{"n":"self"}],"o":{"n":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",10,{"i":[{"n":"self"}],"o":{"n":"dynamicimage"}}],[11,"write_to","","Encode this image and write it to `w`",10,{"i":[{"n":"self"},{"n":"w"},{"n":"f"}],"o":{"n":"imageresult"}}],[11,"save","","Saves the buffer to a file at the path specified.",10,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"result"}}],[11,"dimensions","","",10,null],[11,"bounds","","",10,null],[11,"get_pixel","","",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u8"],"n":"rgba"}}],[11,"put_pixel","","",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"g":["u8"],"n":"rgba"}]}],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"g":["u8"],"n":"rgba"}]}],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",10,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"rgba"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"colortype"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"colortype"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"colortype"}}],[11,"hash","","",4,null],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"rgb"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"rgb"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",2,null],[11,"channel_count","","",2,{"o":{"n":"u8"}}],[11,"color_model","","",2,{"o":{"n":"str"}}],[11,"color_type","","",2,{"o":{"n":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[11,"to_rgba","","",2,{"i":[{"n":"self"}],"o":{"n":"rgba"}}],[11,"to_luma","","",2,{"i":[{"n":"self"}],"o":{"n":"luma"}}],[11,"to_luma_alpha","","",2,{"i":[{"n":"self"}],"o":{"n":"lumaa"}}],[11,"map","","",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"rgb"}}],[11,"apply","","",2,{"i":[{"n":"self"},{"n":"f"}]}],[11,"map_with_alpha","","",2,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"rgb"}}],[11,"apply_with_alpha","","",2,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}]}],[11,"map2","","",2,{"i":[{"n":"self"},{"n":"self"},{"n":"f"}],"o":{"n":"rgb"}}],[11,"apply2","","",2,{"i":[{"n":"self"},{"n":"rgb"},{"n":"f"}]}],[11,"invert","","",2,{"i":[{"n":"self"}]}],[11,"blend","","",2,{"i":[{"n":"self"},{"n":"rgb"}]}],[11,"index","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"t"}}],[11,"index_mut","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"t"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"luma"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"luma"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"luma"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"channel_count","","",0,{"o":{"n":"u8"}}],[11,"color_model","","",0,{"o":{"n":"str"}}],[11,"color_type","","",0,{"o":{"n":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[11,"to_rgba","","",0,{"i":[{"n":"self"}],"o":{"n":"rgba"}}],[11,"to_luma","","",0,{"i":[{"n":"self"}],"o":{"n":"luma"}}],[11,"to_luma_alpha","","",0,{"i":[{"n":"self"}],"o":{"n":"lumaa"}}],[11,"map","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"luma"}}],[11,"apply","","",0,{"i":[{"n":"self"},{"n":"f"}]}],[11,"map_with_alpha","","",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"luma"}}],[11,"apply_with_alpha","","",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}]}],[11,"map2","","",0,{"i":[{"n":"self"},{"n":"self"},{"n":"f"}],"o":{"n":"luma"}}],[11,"apply2","","",0,{"i":[{"n":"self"},{"n":"luma"},{"n":"f"}]}],[11,"invert","","",0,{"i":[{"n":"self"}]}],[11,"blend","","",0,{"i":[{"n":"self"},{"n":"luma"}]}],[11,"index","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"t"}}],[11,"index_mut","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"t"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"rgba"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"rgba"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"rgba"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"channel_count","","",3,{"o":{"n":"u8"}}],[11,"color_model","","",3,{"o":{"n":"str"}}],[11,"color_type","","",3,{"o":{"n":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[11,"to_rgba","","",3,{"i":[{"n":"self"}],"o":{"n":"rgba"}}],[11,"to_luma","","",3,{"i":[{"n":"self"}],"o":{"n":"luma"}}],[11,"to_luma_alpha","","",3,{"i":[{"n":"self"}],"o":{"n":"lumaa"}}],[11,"map","","",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"rgba"}}],[11,"apply","","",3,{"i":[{"n":"self"},{"n":"f"}]}],[11,"map_with_alpha","","",3,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"rgba"}}],[11,"apply_with_alpha","","",3,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}]}],[11,"map2","","",3,{"i":[{"n":"self"},{"n":"self"},{"n":"f"}],"o":{"n":"rgba"}}],[11,"apply2","","",3,{"i":[{"n":"self"},{"n":"rgba"},{"n":"f"}]}],[11,"invert","","",3,{"i":[{"n":"self"}]}],[11,"blend","","",3,{"i":[{"n":"self"},{"n":"rgba"}]}],[11,"index","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"t"}}],[11,"index_mut","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"t"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"lumaa"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"lumaa"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"lumaa"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"channel_count","","",1,{"o":{"n":"u8"}}],[11,"color_model","","",1,{"o":{"n":"str"}}],[11,"color_type","","",1,{"o":{"n":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[11,"to_rgba","","",1,{"i":[{"n":"self"}],"o":{"n":"rgba"}}],[11,"to_luma","","",1,{"i":[{"n":"self"}],"o":{"n":"luma"}}],[11,"to_luma_alpha","","",1,{"i":[{"n":"self"}],"o":{"n":"lumaa"}}],[11,"map","","",1,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"lumaa"}}],[11,"apply","","",1,{"i":[{"n":"self"},{"n":"f"}]}],[11,"map_with_alpha","","",1,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"lumaa"}}],[11,"apply_with_alpha","","",1,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}]}],[11,"map2","","",1,{"i":[{"n":"self"},{"n":"self"},{"n":"f"}],"o":{"n":"lumaa"}}],[11,"apply2","","",1,{"i":[{"n":"self"},{"n":"lumaa"},{"n":"f"}]}],[11,"invert","","",1,{"i":[{"n":"self"}]}],[11,"blend","","",1,{"i":[{"n":"self"},{"n":"lumaa"}]}],[11,"index","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"t"}}],[11,"index_mut","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"t"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_raw","","Contructs a buffer from a generic container (for example a `Vec` or a slice)",53,{"i":[{"n":"u32"},{"n":"u32"},{"n":"container"}],"o":{"g":["imagebuffer"],"n":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",53,{"i":[{"n":"self"}],"o":{"n":"container"}}],[11,"dimensions","","The width and height of this image.",53,null],[11,"width","","The width of this image.",53,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","The height of this image.",53,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",53,{"i":[{"n":"self"}],"o":{"n":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a reference to them.",53,{"i":[{"n":"self"}],"o":{"n":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",53,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.",53,{"i":[{"n":"self"}],"o":{"n":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",53,{"i":[{"n":"self"}],"o":{"n":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",53,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",53,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"p"}]}],[11,"save","","Saves the buffer to a file at the path specified.",53,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"result"}}],[11,"deref","","",53,null],[11,"deref_mut","","",53,null],[11,"index","","",53,null],[11,"index_mut","","",53,null],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"imagebuffer"}}],[11,"dimensions","","",53,null],[11,"bounds","","",53,null],[11,"get_pixel","","",53,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"p"}}],[11,"get_pixel_mut","","",53,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"p"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",53,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"p"}}],[11,"put_pixel","","",53,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"p"}]}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",53,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"p"}]}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",53,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"p"}]}],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",53,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",53,{"i":[{"n":"u32"},{"n":"u32"},{"n":"p"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function. The arguments to the function are the pixel's x and y coordinates.",53,{"i":[{"n":"u32"},{"n":"u32"},{"n":"f"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer. Returns None if the buffer is not big enough.",53,{"i":[{"n":"u32"},{"n":"u32"},{"n":"vec"}],"o":{"g":["imagebuffer"],"n":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data as an owned buffer",53,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"convert","","",53,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",54,{"i":[{"g":["frame"],"n":"vec"}],"o":{"n":"frames"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"new","","Contructs a new frame",55,{"i":[{"n":"rgbaimage"}],"o":{"n":"frame"}}],[11,"from_parts","","Contructs a new frame",55,{"i":[{"n":"rgbaimage"},{"n":"u32"},{"n":"u32"},{"g":["u16"],"n":"ratio"}],"o":{"n":"frame"}}],[11,"delay","","Delay of this frame",55,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"ratio"}}],[11,"buffer","","Returns the image buffer",55,{"i":[{"n":"self"}],"o":{"n":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",55,{"i":[{"n":"self"}],"o":{"n":"rgbaimage"}}],[11,"left","","Returns the x offset",55,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"top","","Returns the y offset",55,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next","","",54,{"i":[{"n":"self"}],"o":{"g":["frame"],"n":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",56,{"i":[{"n":"self"}],"o":{"n":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",56,{"i":[{"n":"self"}],"o":{"g":["colortype"],"n":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",56,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into `buf` and returns the row index",56,null],[10,"read_image","","Decodes the entire image and return it as a Vector",56,{"i":[{"n":"self"}],"o":{"g":["decodingresult"],"n":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",56,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",56,{"i":[{"n":"self"}],"o":{"g":["frames"],"n":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",56,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["vec"],"n":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","","The type of pixel.",57,null],[10,"dimensions","","The width and height of this image.",57,null],[11,"width","","The width of this image.",57,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","The height of this image.",57,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",57,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",57,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",57,null],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",57,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",57,null],[10,"put_pixel","","Put a pixel at location (x, y)",57,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",57,null],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",57,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",57,{"i":[{"n":"self"}],"o":{"n":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",57,{"i":[{"n":"self"}],"o":{"n":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",57,{"i":[{"n":"self"},{"n":"o"},{"n":"u32"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",57,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"subimage"}}],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","","The underlying subpixel type.",58,null],[10,"channel_count","","Returns the number of channels of this pixel type.",58,{"o":{"n":"u8"}}],[10,"channels","","Returns the components as a slice.",58,null],[10,"channels_mut","","Returns the components as a mutable slice",58,null],[10,"color_model","","Returns a string that can help to interpret the meaning each channel See gimp babl.",58,{"o":{"n":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",58,{"o":{"n":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel has less than 4 channels the remainder is filled with the maximum value",58,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d. If the pixel does not contain 4 channels the extra are ignored.",58,null],[10,"from_slice","","Returns a view into a slice.",58,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",58,null],[10,"to_rgb","","Convert this pixel to RGB",58,{"i":[{"n":"self"}],"o":{"n":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",58,{"i":[{"n":"self"}],"o":{"n":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",58,{"i":[{"n":"self"}],"o":{"n":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",58,{"i":[{"n":"self"}],"o":{"n":"lumaa"}}],[10,"map","","Apply the function `f` to each channel of this pixel.",58,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[10,"apply","","Apply the function `f` to each channel of this pixel.",58,{"i":[{"n":"self"},{"n":"f"}]}],[10,"map_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel.",58,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"self"}}],[10,"apply_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel. Works in-place.",58,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}]}],[10,"map2","","Apply the function `f` to each channel of this pixel and `other` pairwise.",58,{"i":[{"n":"self"},{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[10,"apply2","","Apply the function `f` to each channel of this pixel and `other` pairwise. Works in-place.",58,{"i":[{"n":"self"},{"n":"self"},{"n":"f"}]}],[10,"invert","","Invert this pixel",58,{"i":[{"n":"self"}]}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",58,{"i":[{"n":"self"},{"n":"self"}]}],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",null,null],[10,"convert","","Converts `self` to a buffer of type T",59,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"Primitive","","Primitive trait from old stdlib",null,null],[11,"from_rgba","image::gif","Creates a frame from pixels in RGBA format.",33,null],[11,"from_palette_pixels","","Creates a frame from a palette and indexed pixels",33,null],[11,"from_indexed_pixels","","Creates a frame from indexed pixels in the global palette",33,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",33,null],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"disposalmethod"}],"o":{"n":"bool"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"disposalmethod"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"default","","",33,{"o":{"n":"frame"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",34,{"i":[{"n":"u8"}],"o":{"g":["disposalmethod"],"n":"option"}}],[11,"is_animated","image","Returns true if the image is animated",56,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",56,{"i":[{"n":"self"}],"o":{"g":["frames"],"n":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",56,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["vec"],"n":"imageresult"}}],[11,"width","","The width of this image.",57,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","The height of this image.",57,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",57,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",57,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",57,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",57,{"i":[{"n":"self"}],"o":{"n":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",57,{"i":[{"n":"self"}],"o":{"n":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",57,{"i":[{"n":"self"},{"n":"o"},{"n":"u32"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",57,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"subimage"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer. Assumes 8 bit per pixel. Uses an optionally transparent index to adjust it's alpha value accordingly.",60,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"DecodingResult"],[4,"FilterType"],[4,"ImageFormat"],[4,"ImageOutputFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"ArbitraryHeader"],[3,"BitmapHeader"],[3,"GraymapHeader"],[3,"PixmapHeader"],[4,"PNMSubtype"],[4,"SampleEncoding"],[4,"ArbitraryTuplType"],[3,"PNMDecoder"],[3,"PNMEncoder"],[3,"PNMHeader"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"ICOEncoder"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[4,"DisposalMethod"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPEncoder"],[3,"BMPDecoder"],[3,"RGBE8Pixel"],[3,"HDRMetadata"],[3,"HDRAdapter"],[3,"HDRDecoder"],[3,"HDRImageDecoderIterator"],[3,"HDREncoder"],[4,"DXTVariant"],[3,"DXTDecoder"],[3,"DXTEncoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex["images"] = {"doc":"Generates an image (currently a diagonal reddish stripe) then runs it through the kernel, increasing the blue channel for the entire image.","items":[],"paths":[]};
searchIndex["inflate"] = {"doc":"A DEFLATE decoder written in rust.","items":[[3,"InflateWriter","inflate","A DEFLATE decoder.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder/decompressor.",null,null],[3,"DeflateDecoderBuf","","A DEFLATE decoder/decompressor.",null,null],[3,"InflateStream","","",null,null],[5,"inflate_bytes","","Decompress the given slice of DEFLATE compressed data.",null,null],[5,"inflate_bytes_zlib","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.",null,null],[5,"inflate_bytes_zlib_no_checksum","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data, without calculating and validating the checksum.",null,null],[11,"new","","",0,{"i":[{"n":"w"}],"o":{"n":"inflatewriter"}}],[11,"from_zlib","","",0,{"i":[{"n":"w"}],"o":{"n":"inflatewriter"}}],[11,"finish","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"write","","",0,null],[11,"flush","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create a new `Deflatedecoderbuf` to read from a raw deflate stream.",1,{"i":[{"n":"r"}],"o":{"n":"deflatedecoderbuf"}}],[11,"from_zlib","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.",1,{"i":[{"n":"r"}],"o":{"n":"deflatedecoderbuf"}}],[11,"from_zlib_no_checksum","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream. without calculating and validating the checksum.",1,{"i":[{"n":"r"}],"o":{"n":"deflatedecoderbuf"}}],[11,"reset","","Resets the decompressor, and replaces the current inner `BufRead` instance by `r`. without doing any extra reallocations.",1,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"r"}}],[11,"reset_data","","Resets the decoder, but continue to read from the same reader.",1,{"i":[{"n":"self"}]}],[11,"get_ref","","Returns a reference to the underlying `BufRead` instance.",1,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Returns a mutable reference to the underlying `BufRead` instance.",1,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Drops the decoder and return the inner `BufRead` instance.",1,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_in","","Returns the total bytes read from the underlying `BufRead` instance.",1,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the total number of bytes output from this decoder.",1,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",1,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read","","",1,null],[11,"new","","Create a new `Deflatedecoderbuf` to read from a raw deflate stream.",2,{"i":[{"n":"r"}],"o":{"n":"deflatedecoder"}}],[11,"from_zlib","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.",2,{"i":[{"n":"r"}],"o":{"n":"deflatedecoder"}}],[11,"from_zlib_no_checksum","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream. without calculating and validating the checksum.",2,{"i":[{"n":"r"}],"o":{"n":"deflatedecoder"}}],[11,"reset","","Resets the decompressor, and replaces the current inner `BufRead` instance by `r`. without doing any extra reallocations.",2,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"r"}}],[11,"get_ref","","Returns a reference to the underlying reader.",2,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Returns a mutable reference to the underlying reader.",2,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Returns the total number of bytes output from this decoder.",2,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"reset_data","","Resets the decoder, but continue to read from the same reader.",2,{"i":[{"n":"self"}]}],[11,"total_in","","Returns the total bytes read from the underlying reader.",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the total number of bytes output from this decoder.",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",2,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read","","",2,null],[11,"new","","Create a new stream for decoding raw deflate encoded data.",3,{"o":{"n":"inflatestream"}}],[11,"from_zlib","","Create a new stream for decoding deflate encoded data with a zlib header and footer",3,{"o":{"n":"inflatestream"}}],[11,"from_zlib_no_checksum","","Create a new stream for decoding deflate encoded data with a zlib header and footer",3,{"o":{"n":"inflatestream"}}],[11,"reset","","",3,{"i":[{"n":"self"}]}],[11,"reset_to_zlib","","",3,{"i":[{"n":"self"}]}],[11,"update","","Try to uncompress/decode the data in `data`.",3,null],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",3,{"i":[{"n":"self"}],"o":{"n":"u32"}}]],"paths":[[3,"InflateWriter"],[3,"DeflateDecoderBuf"],[3,"DeflateDecoder"],[3,"InflateStream"]]};
searchIndex["iovec"] = {"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",null,null],[0,"unix","","IoVec extensions for Unix platforms.",null,null],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",null,null],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",null,null],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",null,null],[11,"from_bytes","","",0,null],[11,"from_bytes_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null]],"paths":[[3,"IoVec"]]};
searchIndex["jpeg_decoder"] = {"doc":"This crate contains a JPEG decoder.","items":[[3,"Decoder","jpeg_decoder","JPEG decoder",null,null],[3,"ImageInfo","","Represents metadata of an image.",null,null],[12,"width","","The width of the image, in pixels.",0,null],[12,"height","","The height of the image, in pixels.",0,null],[12,"pixel_format","","The pixel format of the image.",0,null],[4,"PixelFormat","","An enumeration over combinations of color spaces and bit depths a pixel can have.",null,null],[13,"L8","","Luminance (grayscale), 8 bits",1,null],[13,"RGB24","","RGB, 8 bits per channel",1,null],[13,"CMYK32","","CMYK, 8 bits per channel",1,null],[4,"Error","","Errors that can occur while decoding a JPEG image.",null,null],[13,"Format","","The image is not formatted properly. The string contains detailed information about the error.",2,null],[13,"Unsupported","","The image makes use of a JPEG feature not (currently) supported by this library.",2,null],[13,"Io","","An I/O error occurred while decoding the image.",2,null],[13,"Internal","","An internal error occurred while decoding the image.",2,null],[4,"UnsupportedFeature","","An enumeration over JPEG features (currently) unsupported by this library.",null,null],[13,"Hierarchical","","Hierarchical JPEG.",3,null],[13,"Lossless","","Lossless JPEG.",3,null],[13,"ArithmeticEntropyCoding","","JPEG using arithmetic entropy coding instead of Huffman coding.",3,null],[13,"SamplePrecision","","Sample precision in bits. 8 bit sample precision is what is currently supported.",3,null],[13,"ComponentCount","","Number of components in an image. 1, 3 and 4 components are currently supported.",3,null],[13,"DNL","","An image can specify a zero height in the frame header and use the DNL (Define Number of Lines) marker at the end of the first scan to define the number of lines in the frame.",3,null],[13,"SubsamplingRatio","","Subsampling ratio.",3,null],[13,"NonIntegerSubsamplingRatio","","A subsampling ratio not representable as an integer.",3,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"pixelformat"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"imageinfo"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"imageinfo"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"imageinfo"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Decoder` using the reader `reader`.",4,{"i":[{"n":"r"}],"o":{"n":"decoder"}}],[11,"info","","Returns metadata about the image.",4,{"i":[{"n":"self"}],"o":{"g":["imageinfo"],"n":"option"}}],[11,"read_info","","Tries to read metadata from the image without decoding it.",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"decode","","Decodes the image and returns the decoded pixels if successful.",4,{"i":[{"n":"self"}],"o":{"g":["vec","error"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",2,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[11,"from","","",2,{"i":[{"n":"ioerror"}],"o":{"n":"error"}}],[11,"from","","",2,{"i":[{"n":"recverror"}],"o":{"n":"error"}}],[11,"from","","",2,{"i":[{"n":"senderror"}],"o":{"n":"error"}}]],"paths":[[3,"ImageInfo"],[4,"PixelFormat"],[4,"Error"],[4,"UnsupportedFeature"],[3,"Decoder"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"i":[{"n":"t"}]}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",35,null],[12,"ipi_spec_dst","","",35,null],[12,"ipi_addr","","",35,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",36,null],[12,"ifa_name","","",36,null],[12,"ifa_flags","","",36,null],[12,"ifa_addr","","",36,null],[12,"ifa_netmask","","",36,null],[12,"ifa_ifu","","",36,null],[12,"ifa_data","","",36,null],[3,"in6_rtmsg","","",null,null],[3,"dirent","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"dirent64","","",null,null],[12,"d_ino","","",38,null],[12,"d_off","","",38,null],[12,"d_reclen","","",38,null],[12,"d_type","","",38,null],[12,"d_name","","",38,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",39,null],[12,"rlim_max","","",39,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",41,null],[12,"pw_passwd","","",41,null],[12,"pw_uid","","",41,null],[12,"pw_gid","","",41,null],[12,"pw_gecos","","",41,null],[12,"pw_dir","","",41,null],[12,"pw_shell","","",41,null],[3,"spwd","","",null,null],[12,"sp_namp","","",42,null],[12,"sp_pwdp","","",42,null],[12,"sp_lstchg","","",42,null],[12,"sp_min","","",42,null],[12,"sp_max","","",42,null],[12,"sp_warn","","",42,null],[12,"sp_inact","","",42,null],[12,"sp_expire","","",42,null],[12,"sp_flag","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",70,null],[12,"version","","",70,null],[12,"reserved","","",70,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",71,null],[12,"ipi6_ifindex","","",71,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",72,null],[12,"aio_lio_opcode","","",72,null],[12,"aio_reqprio","","",72,null],[12,"aio_buf","","",72,null],[12,"aio_nbytes","","",72,null],[12,"aio_sigevent","","",72,null],[12,"aio_offset","","",72,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",73,null],[12,"e_exit","","",73,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",74,null],[12,"tv_usec","","",74,null],[3,"utmpx","","",null,null],[12,"ut_type","","",75,null],[12,"ut_pid","","",75,null],[12,"ut_line","","",75,null],[12,"ut_id","","",75,null],[12,"ut_user","","",75,null],[12,"ut_host","","",75,null],[12,"ut_exit","","",75,null],[12,"ut_session","","",75,null],[12,"ut_tv","","",75,null],[12,"ut_addr_v6","","",75,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",76,null],[12,"sa_mask","","",76,null],[12,"sa_flags","","",76,null],[12,"sa_restorer","","",76,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",77,null],[12,"ss_flags","","",77,null],[12,"ss_size","","",77,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",78,null],[12,"si_errno","","",78,null],[12,"si_code","","",78,null],[12,"_pad","","",78,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",79,null],[12,"gl_pathv","","",79,null],[12,"gl_offs","","",79,null],[12,"gl_flags","","",79,null],[3,"statfs","","",null,null],[12,"f_type","","",80,null],[12,"f_bsize","","",80,null],[12,"f_blocks","","",80,null],[12,"f_bfree","","",80,null],[12,"f_bavail","","",80,null],[12,"f_files","","",80,null],[12,"f_ffree","","",80,null],[12,"f_fsid","","",80,null],[12,"f_namelen","","",80,null],[12,"f_frsize","","",80,null],[3,"msghdr","","",null,null],[12,"msg_name","","",81,null],[12,"msg_namelen","","",81,null],[12,"msg_iov","","",81,null],[12,"msg_iovlen","","",81,null],[12,"msg_control","","",81,null],[12,"msg_controllen","","",81,null],[12,"msg_flags","","",81,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",82,null],[12,"cmsg_level","","",82,null],[12,"cmsg_type","","",82,null],[3,"termios","","",null,null],[12,"c_iflag","","",83,null],[12,"c_oflag","","",83,null],[12,"c_cflag","","",83,null],[12,"c_lflag","","",83,null],[12,"c_line","","",83,null],[12,"c_cc","","",83,null],[12,"c_ispeed","","",83,null],[12,"c_ospeed","","",83,null],[3,"flock","","",null,null],[12,"l_type","","",84,null],[12,"l_whence","","",84,null],[12,"l_start","","",84,null],[12,"l_len","","",84,null],[12,"l_pid","","",84,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",85,null],[12,"ordblks","","",85,null],[12,"smblks","","",85,null],[12,"hblks","","",85,null],[12,"hblkhd","","",85,null],[12,"usmblks","","",85,null],[12,"fsmblks","","",85,null],[12,"uordblks","","",85,null],[12,"fordblks","","",85,null],[12,"keepcost","","",85,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",86,null],[12,"nlmsg_type","","",86,null],[12,"nlmsg_flags","","",86,null],[12,"nlmsg_seq","","",86,null],[12,"nlmsg_pid","","",86,null],[3,"nlmsgerr","","",null,null],[12,"error","","",87,null],[12,"msg","","",87,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",88,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",89,null],[12,"nm_block_nr","","",89,null],[12,"nm_frame_size","","",89,null],[12,"nm_frame_nr","","",89,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",90,null],[12,"nm_len","","",90,null],[12,"nm_group","","",90,null],[12,"nm_pid","","",90,null],[12,"nm_uid","","",90,null],[12,"nm_gid","","",90,null],[3,"nlattr","","",null,null],[12,"nla_len","","",91,null],[12,"nla_type","","",91,null],[3,"rtentry","","",null,null],[12,"rt_pad1","","",92,null],[12,"rt_dst","","",92,null],[12,"rt_gateway","","",92,null],[12,"rt_genmask","","",92,null],[12,"rt_flags","","",92,null],[12,"rt_pad2","","",92,null],[12,"rt_pad3","","",92,null],[12,"rt_tos","","",92,null],[12,"rt_class","","",92,null],[12,"rt_pad4","","",92,null],[12,"rt_metric","","",92,null],[12,"rt_dev","","",92,null],[12,"rt_mtu","","",92,null],[12,"rt_window","","",92,null],[12,"rt_irtt","","",92,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",93,null],[12,"loads","","",93,null],[12,"totalram","","",93,null],[12,"freeram","","",93,null],[12,"sharedram","","",93,null],[12,"bufferram","","",93,null],[12,"totalswap","","",93,null],[12,"freeswap","","",93,null],[12,"procs","","",93,null],[12,"pad","","",93,null],[12,"totalhigh","","",93,null],[12,"freehigh","","",93,null],[12,"mem_unit","","",93,null],[12,"_f","","",93,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",94,null],[12,"msg_stime","","",94,null],[12,"msg_rtime","","",94,null],[12,"msg_ctime","","",94,null],[12,"msg_qnum","","",94,null],[12,"msg_qbytes","","",94,null],[12,"msg_lspid","","",94,null],[12,"msg_lrpid","","",94,null],[3,"stat","","",null,null],[12,"st_dev","","",95,null],[12,"st_ino","","",95,null],[12,"st_nlink","","",95,null],[12,"st_mode","","",95,null],[12,"st_uid","","",95,null],[12,"st_gid","","",95,null],[12,"st_rdev","","",95,null],[12,"st_size","","",95,null],[12,"st_blksize","","",95,null],[12,"st_blocks","","",95,null],[12,"st_atime","","",95,null],[12,"st_atime_nsec","","",95,null],[12,"st_mtime","","",95,null],[12,"st_mtime_nsec","","",95,null],[12,"st_ctime","","",95,null],[12,"st_ctime_nsec","","",95,null],[3,"stat64","","",null,null],[12,"st_dev","","",96,null],[12,"st_ino","","",96,null],[12,"st_nlink","","",96,null],[12,"st_mode","","",96,null],[12,"st_uid","","",96,null],[12,"st_gid","","",96,null],[12,"st_rdev","","",96,null],[12,"st_size","","",96,null],[12,"st_blksize","","",96,null],[12,"st_blocks","","",96,null],[12,"st_atime","","",96,null],[12,"st_atime_nsec","","",96,null],[12,"st_mtime","","",96,null],[12,"st_mtime_nsec","","",96,null],[12,"st_ctime","","",96,null],[12,"st_ctime_nsec","","",96,null],[3,"statfs64","","",null,null],[12,"f_type","","",97,null],[12,"f_bsize","","",97,null],[12,"f_blocks","","",97,null],[12,"f_bfree","","",97,null],[12,"f_bavail","","",97,null],[12,"f_files","","",97,null],[12,"f_ffree","","",97,null],[12,"f_fsid","","",97,null],[12,"f_namelen","","",97,null],[12,"f_frsize","","",97,null],[12,"f_flags","","",97,null],[12,"f_spare","","",97,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",98,null],[12,"f_frsize","","",98,null],[12,"f_blocks","","",98,null],[12,"f_bfree","","",98,null],[12,"f_bavail","","",98,null],[12,"f_files","","",98,null],[12,"f_ffree","","",98,null],[12,"f_favail","","",98,null],[12,"f_fsid","","",98,null],[12,"f_flag","","",98,null],[12,"f_namemax","","",98,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",99,null],[12,"exponent","","",99,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",100,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",101,null],[12,"swd","","",101,null],[12,"ftw","","",101,null],[12,"fop","","",101,null],[12,"rip","","",101,null],[12,"rdp","","",101,null],[12,"mxcsr","","",101,null],[12,"mxcr_mask","","",101,null],[12,"_st","","",101,null],[12,"_xmm","","",101,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",102,null],[12,"swd","","",102,null],[12,"ftw","","",102,null],[12,"fop","","",102,null],[12,"rip","","",102,null],[12,"rdp","","",102,null],[12,"mxcsr","","",102,null],[12,"mxcr_mask","","",102,null],[12,"st_space","","",102,null],[12,"xmm_space","","",102,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",103,null],[12,"r14","","",103,null],[12,"r13","","",103,null],[12,"r12","","",103,null],[12,"rbp","","",103,null],[12,"rbx","","",103,null],[12,"r11","","",103,null],[12,"r10","","",103,null],[12,"r9","","",103,null],[12,"r8","","",103,null],[12,"rax","","",103,null],[12,"rcx","","",103,null],[12,"rdx","","",103,null],[12,"rsi","","",103,null],[12,"rdi","","",103,null],[12,"orig_rax","","",103,null],[12,"rip","","",103,null],[12,"cs","","",103,null],[12,"eflags","","",103,null],[12,"rsp","","",103,null],[12,"ss","","",103,null],[12,"fs_base","","",103,null],[12,"gs_base","","",103,null],[12,"ds","","",103,null],[12,"es","","",103,null],[12,"fs","","",103,null],[12,"gs","","",103,null],[3,"user","","",null,null],[12,"regs","","",104,null],[12,"u_fpvalid","","",104,null],[12,"i387","","",104,null],[12,"u_tsize","","",104,null],[12,"u_dsize","","",104,null],[12,"u_ssize","","",104,null],[12,"start_code","","",104,null],[12,"start_stack","","",104,null],[12,"signal","","",104,null],[12,"u_ar0","","",104,null],[12,"u_fpstate","","",104,null],[12,"magic","","",104,null],[12,"u_comm","","",104,null],[12,"u_debugreg","","",104,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",105,null],[12,"fpregs","","",105,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",106,null],[12,"uc_link","","",106,null],[12,"uc_stack","","",106,null],[12,"uc_mcontext","","",106,null],[12,"uc_sigmask","","",106,null],[3,"ipc_perm","","",null,null],[12,"__key","","",107,null],[12,"uid","","",107,null],[12,"gid","","",107,null],[12,"cuid","","",107,null],[12,"cgid","","",107,null],[12,"mode","","",107,null],[12,"__seq","","",107,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",108,null],[12,"shm_segsz","","",108,null],[12,"shm_atime","","",108,null],[12,"shm_dtime","","",108,null],[12,"shm_ctime","","",108,null],[12,"shm_cpid","","",108,null],[12,"shm_lpid","","",108,null],[12,"shm_nattch","","",108,null],[3,"termios2","","",null,null],[12,"c_iflag","","",109,null],[12,"c_oflag","","",109,null],[12,"c_cflag","","",109,null],[12,"c_lflag","","",109,null],[12,"c_line","","",109,null],[12,"c_cc","","",109,null],[12,"c_ispeed","","",109,null],[12,"c_ospeed","","",109,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",110,null],[12,"f_frsize","","",110,null],[12,"f_blocks","","",110,null],[12,"f_bfree","","",110,null],[12,"f_bavail","","",110,null],[12,"f_files","","",110,null],[12,"f_ffree","","",110,null],[12,"f_favail","","",110,null],[12,"f_fsid","","",110,null],[12,"f_flag","","",110,null],[12,"f_namemax","","",110,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WSTOPSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFCONTINUED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WIFSIGNALED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WTERMSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFEXITED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WEXITSTATUS","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WCOREDUMP","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"QCMD","","",null,{"i":[{"n":"c_int"},{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"IPOPT_COPIED","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPOPT_CLASS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPOPT_NUMBER","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"i":[{"n":"usize"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"CPU_EQUAL","","",null,{"i":[{"n":"cpu_set_t"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"major","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"minor","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"makedev","","",null,{"i":[{"n":"c_uint"},{"n":"c_uint"}],"o":{"n":"dev_t"}}],[5,"IPTOS_TOS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPTOS_PREC","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"RT_TOS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"RT_ADDRCLASS","","",null,{"i":[{"n":"u32"}],"o":{"n":"u32"}}],[5,"RT_LOCALADDR","","",null,{"i":[{"n":"u32"}],"o":{"n":"bool"}}],[5,"NLA_ALIGN","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"stat"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"stat64"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"statfs64"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"statvfs64"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"pthread_attr_t"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"_libc_fpxreg"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"_libc_xmmreg"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"_libc_fpstate"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"user_fpregs_struct"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"user_regs_struct"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"user"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"mcontext_t"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"ucontext_t"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"ipc_perm"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"shmid_ds"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"termios2"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"statvfs"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"sigset_t"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"sysinfo"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"msqid_ds"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"aiocb"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"__exit_status"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"__timeval"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"utmpx"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"sigaction"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"stack_t"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"siginfo_t"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"glob64_t"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"statfs"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"msghdr"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"cmsghdr"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"termios"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"flock"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"sem_t"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"mallinfo"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"nlmsghdr"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"nlmsgerr"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"nl_pktinfo"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"nl_mmap_req"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"nl_mmap_hdr"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"nlattr"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"rtentry"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"dirent"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"dirent64"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"rlimit64"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"glob_t"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"pthread_mutex_t"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlock_t"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"pthread_mutexattr_t"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlockattr_t"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"pthread_cond_t"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"pthread_condattr_t"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"passwd"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"spwd"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"dqblk"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"signalfd_siginfo"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"itimerspec"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"fsid_t"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"mq_attr"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"cpu_set_t"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"if_nameindex"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"msginfo"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"mmsghdr"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"sembuf"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"input_event"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"input_id"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"input_absinfo"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"input_keymap_entry"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"input_mask"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"ff_replay"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"ff_trigger"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"ff_envelope"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"ff_constant_effect"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"ff_ramp_effect"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"ff_condition_effect"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"ff_periodic_effect"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"ff_rumble_effect"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"ff_effect"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"dl_phdr_info"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"elf32_phdr"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"elf64_phdr"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"ucred"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"mntent"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"posix_spawn_file_actions_t"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"posix_spawnattr_t"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"genlmsghdr"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"in6_pktinfo"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"sockaddr"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in6"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"sockaddr_un"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"sockaddr_storage"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"addrinfo"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"sockaddr_nl"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"sockaddr_ll"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"fd_set"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"sched_param"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"dl_info"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"epoll_event"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"utsname"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"lconv"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"sigevent"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"in_pktinfo"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"ifaddrs"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"in6_rtmsg"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"utimbuf"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"timeval"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"rlimit"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"rusage"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"in_addr"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"in6_addr"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"ip_mreq"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ipv6_mreq"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"hostent"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"iovec"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"pollfd"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"winsize"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"linger"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"sigval"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"itimerval"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"tms"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"servent"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"IPTOS_LOWDELAY","","",null,null],[17,"IPTOS_THROUGHPUT","","",null,null],[17,"IPTOS_RELIABILITY","","",null,null],[17,"IPTOS_MINCOST","","",null,null],[17,"IPTOS_PREC_NETCONTROL","","",null,null],[17,"IPTOS_PREC_INTERNETCONTROL","","",null,null],[17,"IPTOS_PREC_CRITIC_ECP","","",null,null],[17,"IPTOS_PREC_FLASHOVERRIDE","","",null,null],[17,"IPTOS_PREC_FLASH","","",null,null],[17,"IPTOS_PREC_IMMEDIATE","","",null,null],[17,"IPTOS_PREC_PRIORITY","","",null,null],[17,"IPTOS_PREC_ROUTINE","","",null,null],[17,"IPOPT_COPY","","",null,null],[17,"IPOPT_CLASS_MASK","","",null,null],[17,"IPOPT_NUMBER_MASK","","",null,null],[17,"IPOPT_CONTROL","","",null,null],[17,"IPOPT_RESERVED1","","",null,null],[17,"IPOPT_MEASUREMENT","","",null,null],[17,"IPOPT_RESERVED2","","",null,null],[17,"IPOPT_END","","",null,null],[17,"IPOPT_NOOP","","",null,null],[17,"IPOPT_SEC","","",null,null],[17,"IPOPT_LSRR","","",null,null],[17,"IPOPT_TIMESTAMP","","",null,null],[17,"IPOPT_RR","","",null,null],[17,"IPOPT_SID","","",null,null],[17,"IPOPT_SSRR","","",null,null],[17,"IPOPT_RA","","",null,null],[17,"IPVERSION","","",null,null],[17,"MAXTTL","","",null,null],[17,"IPDEFTTL","","",null,null],[17,"IPOPT_OPTVAL","","",null,null],[17,"IPOPT_OLEN","","",null,null],[17,"IPOPT_OFFSET","","",null,null],[17,"IPOPT_MINOFF","","",null,null],[17,"MAX_IPOPTLEN","","",null,null],[17,"IPOPT_NOP","","",null,null],[17,"IPOPT_EOL","","",null,null],[17,"IPOPT_TS","","",null,null],[17,"IPOPT_TS_TSONLY","","",null,null],[17,"IPOPT_TS_TSANDADDR","","",null,null],[17,"IPOPT_TS_PRESPEC","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"SIOCADDRT","","",null,null],[17,"SIOCDELRT","","",null,null],[17,"SIOCGIFNAME","","",null,null],[17,"SIOCSIFLINK","","",null,null],[17,"SIOCGIFCONF","","",null,null],[17,"SIOCGIFFLAGS","","",null,null],[17,"SIOCSIFFLAGS","","",null,null],[17,"SIOCGIFADDR","","",null,null],[17,"SIOCSIFADDR","","",null,null],[17,"SIOCGIFDSTADDR","","",null,null],[17,"SIOCSIFDSTADDR","","",null,null],[17,"SIOCGIFBRDADDR","","",null,null],[17,"SIOCSIFBRDADDR","","",null,null],[17,"SIOCGIFNETMASK","","",null,null],[17,"SIOCSIFNETMASK","","",null,null],[17,"SIOCGIFMETRIC","","",null,null],[17,"SIOCSIFMETRIC","","",null,null],[17,"SIOCGIFMEM","","",null,null],[17,"SIOCSIFMEM","","",null,null],[17,"SIOCGIFMTU","","",null,null],[17,"SIOCSIFMTU","","",null,null],[17,"SIOCSIFHWADDR","","",null,null],[17,"SIOCGIFENCAP","","",null,null],[17,"SIOCSIFENCAP","","",null,null],[17,"SIOCGIFHWADDR","","",null,null],[17,"SIOCGIFSLAVE","","",null,null],[17,"SIOCSIFSLAVE","","",null,null],[17,"SIOCADDMULTI","","",null,null],[17,"SIOCDELMULTI","","",null,null],[17,"SIOCDARP","","",null,null],[17,"SIOCGARP","","",null,null],[17,"SIOCSARP","","",null,null],[17,"SIOCDRARP","","",null,null],[17,"SIOCGRARP","","",null,null],[17,"SIOCSRARP","","",null,null],[17,"SIOCGIFMAP","","",null,null],[17,"SIOCSIFMAP","","",null,null],[17,"IPTOS_TOS_MASK","","",null,null],[17,"IPTOS_PREC_MASK","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REINSTATE","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_MTU","","",null,null],[17,"RTF_MSS","","",null,null],[17,"RTF_WINDOW","","",null,null],[17,"RTF_IRTT","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_NOFORWARD","","",null,null],[17,"RTF_THROW","","",null,null],[17,"RTF_NOPMTUDISC","","",null,null],[17,"RTF_DEFAULT","","",null,null],[17,"RTF_ALLONLINK","","",null,null],[17,"RTF_ADDRCONF","","",null,null],[17,"RTF_LINKRT","","",null,null],[17,"RTF_NONEXTHOP","","",null,null],[17,"RTF_CACHE","","",null,null],[17,"RTF_FLOW","","",null,null],[17,"RTF_POLICY","","",null,null],[17,"RTCF_VALVE","","",null,null],[17,"RTCF_MASQ","","",null,null],[17,"RTCF_NAT","","",null,null],[17,"RTCF_DOREDIRECT","","",null,null],[17,"RTCF_LOG","","",null,null],[17,"RTCF_DIRECTSRC","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_INTERFACE","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_NAT","","",null,null],[17,"RTF_ADDRCLASSMASK","","",null,null],[17,"RT_CLASS_UNSPEC","","",null,null],[17,"RT_CLASS_DEFAULT","","",null,null],[17,"RT_CLASS_MAIN","","",null,null],[17,"RT_CLASS_LOCAL","","",null,null],[17,"RT_CLASS_MAX","","",null,null],[17,"RTMSG_OVERRUN","","",null,null],[17,"RTMSG_NEWDEVICE","","",null,null],[17,"RTMSG_DELDEVICE","","",null,null],[17,"RTMSG_NEWROUTE","","",null,null],[17,"RTMSG_DELROUTE","","",null,null],[17,"RTMSG_NEWRULE","","",null,null],[17,"RTMSG_DELRULE","","",null,null],[17,"RTMSG_CONTROL","","",null,null],[17,"RTMSG_AR_FAILED","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["lzw"] = {"doc":"LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"i":[{"n":"r"},{"n":"w"},{"n":"u8"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new LZW decoder. ",1,{"i":[{"n":"r"},{"n":"u8"}],"o":{"n":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new LZW decoder. ",2,{"i":[{"n":"r"},{"n":"u8"}],"o":{"n":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"i":[{"n":"w"},{"n":"u8"}],"o":{"g":["encoder"],"n":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"i":[{"n":"self"}]}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new bit reader",4,{"o":{"n":"lsbreader"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new bit reader",5,{"o":{"n":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"i":[{"n":"w"}],"o":{"n":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Creates a new bit reader",7,{"i":[{"n":"w"}],"o":{"n":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"write_bits","","",6,{"i":[{"n":"self"},{"n":"u16"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_bits","","",7,{"i":[{"n":"self"},{"n":"u16"},{"n":"u8"}],"o":{"n":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"i":[{"n":"self"},{"n":"u16"},{"n":"u8"}],"o":{"n":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["memoffset"] = {"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",null,null],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",null,null]],"paths":[]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"i":[{"n":"t"}],"o":{"n":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"deref","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"o":{"n":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",13,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",13,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",17,{"i":[{"n":"self"}],"o":{"n":"t"}}],[5,"cast","num","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"pow","","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",18,null],[10,"pow","","Returns `self` to the power `rhs`.",18,null],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[5,"pow","num","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"bigint","","",null,null],[4,"ParseBigIntError","num::bigint","",null,null],[13,"ParseInt","","",19,null],[13,"Other","","",19,null],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",20,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",20,{"i":[{"n":"self"},{"n":"biguint"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",20,{"i":[{"n":"self"},{"n":"bigint"},{"n":"bigint"}],"o":{"n":"bigint"}}],[3,"BigInt","","A big signed integer type.",null,null],[0,"big_digit","","",null,null],[6,"DoubleBigDigit","num::bigint::big_digit","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[5,"from_doublebigdigit","","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"u64"}}],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",21,null],[13,"NoSign","","",21,null],[13,"Plus","","",21,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",22,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",23,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[0,"complex","num","",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[3,"ParseComplexError","","",null,null],[0,"integer","num","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"binomial","","Calculate the binomial coefficient.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",null,{"i":[{"n":"t"},{"n":"u32"}],"o":{"n":"t"}}],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"iter","num","",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[0,"traits","num","",null,null],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",25,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",28,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[0,"wrapping","num::traits::ops","",null,null],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",29,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",30,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",31,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"inv","num::traits::ops","",null,null],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",null,null],[16,"Output","","The result after applying the operator.",32,null],[10,"inv","","Returns the multiplicative inverse of `self`.",32,null],[0,"mul_add","num::traits::ops","",null,null],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",33,null],[10,"mul_add","","Performs the fused multiply-add operation.",33,null],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",34,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"o":{"n":"self"}}],[0,"float","num::traits","",null,null],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with `no_std`.",null,null],[10,"infinity","","Returns positive infinity.",35,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns negative infinity.",35,{"o":{"n":"self"}}],[10,"nan","","Returns NaN.",35,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",35,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",35,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",35,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",35,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",35,{"o":{"n":"self"}}],[11,"is_nan","","Returns `true` if the number is NaN.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Returns `true` if the number is infinite.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",35,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"trunc","","Return the integer part of a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fract","","Returns the fractional part of a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"signum","","Returns a number that represents the sign of `self`.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"min","","Returns the minimum of the two numbers.",35,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"max","","Returns the maximum of the two numbers.",35,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"powi","","Raise a number to an integer power.",35,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",35,null],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",13,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",13,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",13,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",36,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",36,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",36,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",36,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",36,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",36,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",36,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",36,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",36,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",36,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",36,{"o":{"n":"self"}}],[0,"real","num::traits","",null,null],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",37,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",37,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",37,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",37,{"o":{"n":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",37,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",37,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a real number power.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts radians to degrees.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts degrees to radians.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",37,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",17,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[0,"pow","num::traits","",null,null],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",18,null],[10,"pow","","Returns `self` to the power `rhs`.",18,null],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",38,null],[13,"Invalid","","",38,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",39,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"rational","num","",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"ParseRatioError","","",null,null],[11,"new","num::bigint","Creates and initializes a BigInt.",40,{"i":[{"n":"sign"},{"g":["u32"],"n":"vec"}],"o":{"n":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",40,{"i":[{"n":"sign"},{"n":"biguint"}],"o":{"n":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",40,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",40,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",40,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",40,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",40,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",40,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",40,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",40,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",40,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",40,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",40,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",40,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",40,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",40,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",40,{"i":[{"n":"self"},{"n":"bigint"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"fmt","num::traits","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"next","num::integer","",41,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","num::iter","",42,{"i":[{"n":"self"}],"o":{"n":"rangestepinclusive"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"rangeinclusive"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"rangestep"}}],[11,"next_back","","",43,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",44,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",45,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",44,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",44,null],[11,"next","","",43,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",43,null],[11,"next","","",42,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"mul","num::complex","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"neg","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"one","","",0,{"o":{"n":"complex"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"description","","",46,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"}],"o":{"g":["complex"],"n":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["complex"],"n":"result"}}],[11,"decode","","",0,{"i":[{"n":"__dt"}],"o":{"g":["complex"],"n":"result"}}],[11,"default","","",0,{"o":{"n":"complex"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"hash","","",0,null],[11,"zero","","",0,{"o":{"n":"complex"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"mul","num::bigint","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"sign"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"to_bigint","","",40,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"to_bigint","","",47,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"bitor_assign","","",47,null],[11,"bitor_assign","","",47,null],[11,"to_i64","","",47,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",47,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",47,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",47,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"to_i64","","",40,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",40,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",40,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",40,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"abs","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"abs_sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"signum","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"is_positive","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"neg","","",47,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"neg","","Negate Sign value.",21,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"neg","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"checked_add","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"shl_assign","","",47,null],[11,"from","","",40,{"i":[{"n":"i16"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"i32"}],"o":{"n":"bigint"}}],[11,"from","","",47,{"i":[{"n":"u16"}],"o":{"n":"biguint"}}],[11,"from","","",47,{"i":[{"n":"usize"}],"o":{"n":"biguint"}}],[11,"from","","",40,{"i":[{"n":"usize"}],"o":{"n":"bigint"}}],[11,"from","","",47,{"i":[{"n":"u64"}],"o":{"n":"biguint"}}],[11,"from","","",47,{"i":[{"n":"u8"}],"o":{"n":"biguint"}}],[11,"from","","",40,{"i":[{"n":"u16"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"u64"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"isize"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"u8"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"i64"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"u32"}],"o":{"n":"bigint"}}],[11,"from","","",19,{"i":[{"n":"parseinterror"}],"o":{"n":"parsebiginterror"}}],[11,"from","","",40,{"i":[{"n":"i8"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"biguint"}],"o":{"n":"bigint"}}],[11,"from","","",47,{"i":[{"n":"u32"}],"o":{"n":"biguint"}}],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"shl","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"shl","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"from_i64","","",47,{"i":[{"n":"i64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_u64","","",47,{"i":[{"n":"u64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_f64","","",47,{"i":[{"n":"f64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_i64","","",40,{"i":[{"n":"i64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_u64","","",40,{"i":[{"n":"u64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_f64","","",40,{"i":[{"n":"f64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"bool"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"shr","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"shr","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"description","","",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"checked_mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_str","","",40,{"i":[{"n":"str"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"from_str","","",47,{"i":[{"n":"str"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"bitor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"cmp","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"ordering"}}],[11,"cmp","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"ordering"}}],[11,"cmp","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"ordering"}}],[11,"default","","",40,{"o":{"n":"bigint"}}],[11,"default","","",47,{"o":{"n":"biguint"}}],[11,"bitxor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitxor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"div_rem","","",47,null],[11,"div_floor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mod_floor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div_mod_floor","","",47,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"div_rem","","",40,null],[11,"div_floor","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mod_floor","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div_mod_floor","","",40,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bitand_assign","","",47,null],[11,"bitand_assign","","",47,null],[11,"to_biguint","","",47,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"to_biguint","","",40,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"one","","",47,{"o":{"n":"biguint"}}],[11,"one","","",40,{"o":{"n":"bigint"}}],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"checked_sub","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"bitxor_assign","","",47,null],[11,"bitxor_assign","","",47,null],[11,"div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"zero","","",47,{"o":{"n":"biguint"}}],[11,"is_zero","","",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",40,{"o":{"n":"bigint"}}],[11,"is_zero","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"shr_assign","","",47,null],[11,"bitand","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitand","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",47,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",40,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"encode","","",21,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",47,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",40,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"hash","","",40,null],[11,"hash","","",47,null],[11,"hash","","",21,null],[11,"decode","","",21,{"i":[{"n":"__d"}],"o":{"g":["sign"],"n":"result"}}],[11,"decode","","",40,{"i":[{"n":"__d"}],"o":{"g":["bigint"],"n":"result"}}],[11,"decode","","",47,{"i":[{"n":"__d"}],"o":{"g":["biguint"],"n":"result"}}],[11,"mul","num::rational","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"neg","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"zero","","",48,{"o":{"n":"ratio"}}],[11,"is_zero","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"add_assign","","",48,null],[11,"add_assign","","",48,null],[11,"add_assign","","",48,null],[11,"add_assign","","",48,null],[11,"from","","",48,null],[11,"from","","",48,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"into","","",48,null],[11,"one","","",48,{"o":{"n":"ratio"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"bool"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"parseratioerror"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"decode","","",48,{"i":[{"n":"__dt"}],"o":{"g":["ratio"],"n":"result"}}],[11,"description","","",49,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",48,{"i":[{"n":"str"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"encode","","",48,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"cmp","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ordering"}}],[11,"checked_sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub_assign","","",48,null],[11,"sub_assign","","",48,null],[11,"sub_assign","","",48,null],[11,"sub_assign","","",48,null],[11,"div","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"checked_add","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_mul","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_div","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"partial_cmp","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ordering"],"n":"option"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"div_assign","","",48,null],[11,"div_assign","","",48,null],[11,"div_assign","","",48,null],[11,"div_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"hash","","",48,null],[11,"abs","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"abs_sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"signum","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"is_positive","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",48,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"rem_assign","","",48,null],[11,"rem_assign","","",48,null],[11,"rem_assign","","",48,null],[11,"rem_assign","","",48,null],[11,"new","num::bigint","Creates and initializes a `BigUint`.",47,{"i":[{"g":["u32"],"n":"vec"}],"o":{"n":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",47,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",47,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",47,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",47,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",47,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",47,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",47,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",47,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",47,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",47,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",47,{"i":[{"n":"self"},{"n":"biguint"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"new","num::complex","Create a new Complex",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"i","","Returns imaginary unit",0,{"o":{"n":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"inv","","Returns `1/self`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"norm","","Calculate |self|",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","num::integer","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",41,{"i":[{"n":"t"}],"o":{"n":"iterbinomial"}}],[11,"new","num::rational","Creates a new `Ratio`. Fails if `denom` is zero.",48,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",48,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",48,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"recip","","Returns the reciprocal.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"trunc","","Rounds towards zero.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",48,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",48,{"i":[{"n":"t"}],"o":{"g":["ratio"],"n":"option"}}],[11,"approximate_float","","",48,{"i":[{"n":"f"}],"o":{"g":["ratio"],"n":"option"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[4,"ParseBigIntError"],[8,"RandBigInt"],[4,"Sign"],[8,"ToBigInt"],[8,"ToBigUint"],[8,"Roots"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"FloatCore"],[8,"FloatConst"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"BigInt"],[3,"IterBinomial"],[3,"RangeStepInclusive"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"ParseComplexError"],[3,"BigUint"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",2,{"i":[{"n":"__d"}],"o":{"g":["biguint"],"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"ordering"}}],[11,"default","","",2,{"o":{"n":"biguint"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",2,{"i":[{"n":"str"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"bitand","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitand_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitand","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitand_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitxor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitxor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitxor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitxor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"shl","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"shl_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"shr_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"zero","","",2,{"o":{"n":"biguint"}}],[11,"is_zero","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",2,{"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"neg","","",2,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"checked_add","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_sub","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_mul","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_div","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mod_floor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_i64","","",2,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",2,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",2,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",2,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"from_i64","","",2,{"i":[{"n":"i64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_u64","","",2,{"i":[{"n":"u64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_f64","","",2,{"i":[{"n":"f64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from","","",2,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"to_biguint","","",2,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"i":[{"g":["bigdigit"],"n":"vec"}],"o":{"n":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"ordering"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",1,{"i":[{"n":"__d"}],"o":{"g":["sign"],"n":"result"}}],[11,"neg","","Negate Sign value.",1,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"mul","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"sign"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",3,{"i":[{"n":"__d"}],"o":{"g":["bigint"],"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"ordering"}}],[11,"default","","",3,{"o":{"n":"bigint"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",3,{"i":[{"n":"str"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"shl","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"shr","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"zero","","",3,{"o":{"n":"bigint"}}],[11,"is_zero","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",3,{"o":{"n":"bigint"}}],[11,"abs","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"abs_sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"signum","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"is_positive","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"neg","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"checked_add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mod_floor","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_i64","","",3,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",3,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",3,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",3,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"from_i64","","",3,{"i":[{"n":"i64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_u64","","",3,{"i":[{"n":"u64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_f64","","",3,{"i":[{"n":"f64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from","","",3,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"isize"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"biguint"}],"o":{"n":"self"}}],[11,"to_bigint","","",3,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"to_bigint","","",2,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"to_biguint","","",3,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"i":[{"n":"sign"},{"g":["bigdigit"],"n":"vec"}],"o":{"n":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"i":[{"n":"sign"},{"n":"biguint"}],"o":{"n":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",3,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"i":[{"n":"bigdigit"},{"n":"bigdigit"}],"o":{"n":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"i":[{"n":"self"},{"n":"biguint"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"i":[{"n":"self"},{"n":"bigint"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",0,{"i":[{"n":"parseinterror"}],"o":{"n":"parsebiginterror"}}],[11,"add","num_bigint::big_digit","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",0,{"o":{"n":"complex"}}],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"decode","","",0,{"i":[{"n":"__dt"}],"o":{"g":["complex"],"n":"result"}}],[11,"new","","Create a new Complex",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"i","","Returns imaginary unit",0,{"o":{"n":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"inv","","Returns `1/self`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"norm","","Calculate |self|",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"self"}}],[11,"neg","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"zero","","",0,{"o":{"n":"complex"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",0,{"o":{"n":"complex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"o":{"n":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"o":{"n":"usize"}}]],"paths":[]};
searchIndex["num_derive"] = {"doc":"Procedural macros to derive numeric traits in Rust.","items":[[5,"from_primitive","num_derive","Derives [`num_traits::FromPrimitive`][from] for simple enums.",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"to_primitive","","Derives [`num_traits::ToPrimitive`][to] for simple enums.",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",null,{"i":[{"n":"t"},{"n":"u32"}],"o":{"n":"t"}}],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,{"i":[{"n":"t"}],"o":{"n":"iterbinomial"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"rangeinclusive"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"rangestep"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"rangestepinclusive"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"decode","","",0,{"i":[{"n":"__dt"}],"o":{"g":["ratio"],"n":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"i":[{"n":"t"}],"o":{"g":["bigrational"],"n":"option"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"checked_mul","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_div","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_add","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"neg","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"zero","","",0,{"o":{"n":"ratio"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",0,{"o":{"n":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"abs","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"abs_sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"signum","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"is_positive","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"i":[{"n":"str"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"parseratioerror"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"approximate_float","","",0,{"i":[{"n":"f"}],"o":{"g":["ratio"],"n":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"o":{"n":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"o":{"n":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"i":[{"n":"t"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",21,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",22,null],[13,"Invalid","","",22,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",23,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"o":{"n":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"o":{"n":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",24,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",24,{"o":{"n":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",24,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a real number power.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts radians to degrees.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts degrees to radians.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"cast","num_traits","",null,null],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"i":[{"n":"t"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[11,"fmt","num_traits","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["ocl"] = {"doc":" | GitHub","items":[[3,"OclCoreError","ocl","An Error.",null,null],[3,"Platform","","A platform identifier.",null,null],[3,"Extensions","","Extensions of a platform.",null,null],[3,"Device","","An individual device identifier (an OpenCL device_id).",null,null],[3,"Context","","A context for a particular platform and set of device types.",null,null],[3,"Program","","A program from which kernels can be created from.",null,null],[3,"Queue","","A command queue which manages all actions taken on kernels, buffers, and images.",null,null],[3,"Kernel","","A kernel which represents a 'procedure'.",null,null],[3,"Buffer","","A chunk of memory physically located on a device, such as a GPU.",null,null],[3,"Image","","A section of device memory which represents one or many images.",null,null],[3,"Event","","An event representing a command or user created event.",null,null],[3,"EventList","","A list of events for coordinating enqueued commands.",null,null],[3,"EventArray","","A list of events for coordinating enqueued commands.",null,null],[3,"Sampler","","An image sampler used to process images.",null,null],[3,"ProQue","","An all-in-one chimera of the `Program`, `Queue`, `Context` and (optionally) `SpatialDims` types.",null,null],[3,"MemMap","","A view of memory mapped by `clEnqueueMap{...}`.",null,null],[3,"FutureMemMap","","A future which resolves to a `MemMap` as soon as its creating command completes.",null,null],[3,"RwVec","","A locking `Vec` which interoperates with OpenCL events and Rust futures to provide exclusive access to data.",null,null],[3,"ReadGuard","","Allows access to the data contained within a lock just like a mutex guard.",null,null],[3,"WriteGuard","","Allows access to the data contained within just like a mutex guard.",null,null],[4,"SpatialDims","","Specifies a size or offset in up to three dimensions.",null,null],[13,"Unspecified","","",0,null],[13,"One","","",0,null],[13,"Two","","",0,null],[13,"Three","","",0,null],[4,"BufferCmdError","","A buffer command error.",null,null],[13,"RectUnavailable","","",1,null],[13,"NoQueue","","",1,null],[13,"AlreadyMapped","","",1,null],[13,"MapUnavailable","","",1,null],[13,"Ocl","","",1,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"iter","","Iterate over platform extensions, split at whitespace.",2,{"i":[{"n":"self"}],"o":{"n":"splitwhitespace"}}],[11,"as_str","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"platform"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"list","","Returns a list of all platforms avaliable on the host machine.",3,{"o":{"g":["platform"],"n":"vec"}}],[11,"first","","Returns the first available platform.",3,{"o":{"g":["platform"],"n":"oclresult"}}],[11,"new","","Creates a new `Platform` from a `PlatformIdCore`.",3,{"i":[{"n":"platformidcore"}],"o":{"n":"platform"}}],[11,"list_from_core","","Returns a list of `Platform`s from a list of `PlatformIdCore`s",3,{"i":[{"g":["platformidcore"],"n":"vec"}],"o":{"g":["platform"],"n":"vec"}}],[11,"info","","Returns info about the platform.",3,{"i":[{"n":"self"},{"n":"platforminfo"}],"o":{"g":["platforminforesult"],"n":"oclresult"}}],[11,"profile","","Returns the platform profile as a string.",3,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"oclresult"}}],[11,"version","","Returns the platform driver version as a string.",3,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"oclresult"}}],[11,"name","","Returns the platform name as a string.",3,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"oclresult"}}],[11,"vendor","","Returns the platform vendor as a string.",3,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"oclresult"}}],[11,"extensions","","Returns the list of platform extensions.",3,{"i":[{"n":"self"}],"o":{"g":["extensions"],"n":"oclresult"}}],[11,"as_core","","Returns a reference to the underlying `PlatformIdCore`.",3,{"i":[{"n":"self"}],"o":{"n":"platformidcore"}}],[11,"as_ptr","","",3,{"i":[{"n":"self"}],"o":{"n":"cl_platform_id"}}],[11,"default","","Returns the first (0th) platform available, or the platform specified by the `OCL_DEFAULT_PLATFORM_IDX` environment variable if it is set.",3,{"o":{"n":"platform"}}],[11,"from","","",3,{"i":[{"n":"platformidcore"}],"o":{"n":"platform"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",3,{"i":[{"n":"self"}],"o":{"n":"platformidcore"}}],[11,"deref_mut","","",3,{"i":[{"n":"self"}],"o":{"n":"platformidcore"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"device"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"device"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"device"}],"o":{"n":"bool"}}],[11,"first","","Returns the first available device on a platform.",4,{"i":[{"n":"p"}],"o":{"g":["device"],"n":"oclresult"}}],[11,"by_idx_wrap","","Returns a single device specified by a wrapped index.",4,{"i":[{"n":"p"},{"n":"usize"}],"o":{"g":["device"],"n":"oclresult"}}],[11,"specifier","","Returns a `DeviceSpecifier` useful for precisely specifying a set of devices.",4,{"o":{"n":"devicespecifier"}}],[11,"resolve_idxs","","Resolves a list of indices into a list of valid devices.",4,null],[11,"resolve_idxs_wrap","","Resolves a list of indices into a list of valid devices.",4,null],[11,"list","","Returns a list of all devices avaliable for a given platform which optionally match the flags set in the bitfield, `device_types`.",4,{"i":[{"n":"p"},{"g":["devicetype"],"n":"option"}],"o":{"g":["vec"],"n":"oclresult"}}],[11,"list_all","","Returns a list of all devices avaliable for a given `platform`.",4,{"i":[{"n":"p"}],"o":{"g":["vec"],"n":"oclresult"}}],[11,"list_select","","Returns a list of devices filtered by type then selected using a list of indices.",4,null],[11,"list_select_wrap","","Returns a list of devices filtered by type then selected using a wrapping list of indices.",4,null],[11,"list_from_core","","Returns a list of `Device`s from a list of `DeviceIdCore`s",4,{"i":[{"g":["deviceidcore"],"n":"vec"}],"o":{"g":["device"],"n":"vec"}}],[11,"name","","Returns the device name.",4,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"oclresult"}}],[11,"vendor","","Returns the device vendor as a string.",4,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"oclresult"}}],[11,"max_wg_size","","Returns the maximum workgroup size or an error.",4,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"oclresult"}}],[11,"mem_base_addr_align","","Returns the memory base address alignment offset or an error.",4,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"oclresult"}}],[11,"is_available","","Returns whether or not the device is available for use.",4,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"oclresult"}}],[11,"info_raw","","Returns raw info about the device, as a vector of bytes. Intended for use with non-standard OpenCL extensions.",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["vec"],"n":"oclresult"}}],[11,"info","","Returns info about the device.",4,{"i":[{"n":"self"},{"n":"deviceinfo"}],"o":{"g":["deviceinforesult"],"n":"oclresult"}}],[11,"to_string","","Returns a string containing a formatted list of device properties.",4,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"as_core","","Returns the underlying `DeviceIdCore`.",4,{"i":[{"n":"self"}],"o":{"n":"deviceidcore"}}],[11,"as_ptr","","",4,{"i":[{"n":"self"}],"o":{"n":"cl_device_id"}}],[11,"from","","",4,{"i":[{"n":"deviceidcore"}],"o":{"n":"device"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",4,{"i":[{"n":"self"}],"o":{"n":"device"}}],[11,"deref","","",4,{"i":[{"n":"self"}],"o":{"n":"deviceidcore"}}],[11,"deref_mut","","",4,{"i":[{"n":"self"}],"o":{"n":"deviceidcore"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"builder","","Returns a `ContextBuilder`.",5,{"o":{"n":"contextbuilder"}}],[11,"new","","Returns a newly created context.",5,{"i":[{"g":["contextproperties"],"n":"option"},{"g":["devicespecifier"],"n":"option"},{"g":["createcontextcallbackfn"],"n":"option"},{"g":["userdataptr"],"n":"option"}],"o":{"g":["context"],"n":"oclresult"}}],[11,"resolve_wrapping_device_idxs","","Resolves a list of zero-based device indices into a list of Devices.",5,null],[11,"get_device_by_wrapping_index","","Returns a device by its ordinal count within this context.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"device"}}],[11,"platform_info","","Returns info about the platform associated with the context.",5,{"i":[{"n":"self"},{"n":"platforminfo"}],"o":{"g":["platforminforesult"],"n":"oclresult"}}],[11,"device_info","","Returns info about the device indexed by `index` associated with this context.",5,{"i":[{"n":"self"},{"n":"usize"},{"n":"deviceinfo"}],"o":{"g":["deviceinforesult"],"n":"oclresult"}}],[11,"info","","Returns info about the context.",5,{"i":[{"n":"self"},{"n":"contextinfo"}],"o":{"g":["contextinforesult"],"n":"oclresult"}}],[11,"as_core","","Returns a reference to the core pointer wrapper, usable by functions in the `core` module.",5,{"i":[{"n":"self"}],"o":{"n":"contextcore"}}],[11,"devices","","Returns the list of devices associated with this context.",5,{"i":[{"n":"self"}],"o":{"g":["device"],"n":"vec"}}],[11,"device_versions","","Returns the list of device versions associated with this context.",5,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclresult"}}],[11,"platform","","Returns the platform this context is associated with.",5,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"oclresult"}}],[11,"from","","",5,{"i":[{"n":"contextcore"}],"o":{"n":"context"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",5,{"i":[{"n":"self"}],"o":{"n":"contextcore"}}],[11,"deref_mut","","",5,{"i":[{"n":"self"}],"o":{"n":"contextcore"}}],[11,"device_versions","","",5,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[11,"platform_version","","",5,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"program"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"builder","","Returns a new `ProgramBuilder`.",6,{"o":{"n":"programbuilder"}}],[11,"with_source","","Returns a new program built from pre-created build components and device list.",6,null],[11,"with_binary","","Returns a new program built from pre-created build components and device list.",6,null],[11,"with_il","","Returns a new program built from pre-created build components and device list for programs with intermediate language byte source.",6,null],[11,"as_core","","Returns a reference to the core pointer wrapper, usable by functions in the `core` module.",6,{"i":[{"n":"self"}],"o":{"n":"programcore"}}],[11,"info","","Returns info about this program.",6,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"g":["programinforesult"],"n":"oclcoreresult"}}],[11,"build_info","","Returns info about this program's build.",6,{"i":[{"n":"self"},{"n":"device"},{"n":"programbuildinfo"}],"o":{"g":["programbuildinforesult"],"n":"oclcoreresult"}}],[11,"from","","",6,{"i":[{"n":"programcore"}],"o":{"n":"program"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",6,{"i":[{"n":"self"}],"o":{"n":"programcore"}}],[11,"deref_mut","","",6,{"i":[{"n":"self"}],"o":{"n":"programcore"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"builder","","Returns a new `KernelBuilder`.",7,{"o":{"n":"kernelbuilder"}}],[11,"named_arg_idx","","Returns the argument index of a named argument if it exists.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["u32"],"n":"option"}}],[11,"set_arg_unchecked","","Sets an argument by index without checks of any kind.",7,{"i":[{"n":"self"},{"n":"u32"},{"n":"argval"}],"o":{"n":"oclresult"}}],[11,"set_arg","","Sets a `Buffer`, `Image`, scalar, or vector argument by index or by name.",7,{"i":[{"n":"self"},{"n":"ai"},{"n":"av"}],"o":{"n":"oclresult"}}],[11,"set_arg_buf_named","","Modifies the kernel argument named: `name`.",7,{"i":[{"n":"self"},{"n":"str"},{"n":"option"}],"o":{"n":"oclresult"}}],[11,"set_arg_img_named","","Modifies the kernel argument named: `name`.",7,{"i":[{"n":"self"},{"n":"str"},{"n":"option"}],"o":{"n":"oclresult"}}],[11,"set_arg_smp_named","","Sets the value of a named sampler argument.",7,{"i":[{"n":"self"},{"n":"str"},{"g":["sampler"],"n":"option"}],"o":{"n":"oclresult"}}],[11,"set_arg_scl_named","","Modifies the kernel argument named: `name`.",7,{"i":[{"n":"self"},{"n":"str"},{"n":"b"}],"o":{"n":"oclresult"}}],[11,"set_arg_vec_named","","Modifies the kernel argument named: `name`.",7,{"i":[{"n":"self"},{"n":"str"},{"n":"b"}],"o":{"n":"oclresult"}}],[11,"set_arg_sampler_named","","Sets the value of a named sampler argument.",7,{"i":[{"n":"self"},{"n":"ai"},{"g":["sampler"],"n":"option"}],"o":{"n":"oclresult"}}],[11,"cmd","","Returns a command builder which is used to chain parameters of an 'enqueue' command together.",7,{"i":[{"n":"self"}],"o":{"n":"kernelcmd"}}],[11,"enq","","Enqueues this kernel on the default queue using the default work sizes and offsets.",7,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"set_default_queue","","Changes the default queue.",7,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"kernel"}}],[11,"get_gwo","","Returns the default global work offset.",7,{"i":[{"n":"self"}],"o":{"n":"spatialdims"}}],[11,"get_gws","","Returns the default global work size.",7,{"i":[{"n":"self"}],"o":{"n":"spatialdims"}}],[11,"get_lws","","Returns the default local work size.",7,{"i":[{"n":"self"}],"o":{"n":"spatialdims"}}],[11,"set_default_global_work_offset","","Sets the default global work offset.",7,{"i":[{"n":"self"},{"n":"spatialdims"}],"o":{"n":"kernel"}}],[11,"set_default_global_work_size","","Sets the default global work size.",7,{"i":[{"n":"self"},{"n":"spatialdims"}],"o":{"n":"kernel"}}],[11,"set_default_local_work_size","","Sets the default local work size.",7,{"i":[{"n":"self"},{"n":"spatialdims"}],"o":{"n":"kernel"}}],[11,"default_queue","","Returns the default queue for this kernel if one has been set.",7,{"i":[{"n":"self"}],"o":{"g":["queue"],"n":"option"}}],[11,"default_global_work_offset","","Returns the default global work offset.",7,{"i":[{"n":"self"}],"o":{"n":"spatialdims"}}],[11,"default_global_work_size","","Returns the default global work size.",7,{"i":[{"n":"self"}],"o":{"n":"spatialdims"}}],[11,"default_local_work_size","","Returns the default local work size.",7,{"i":[{"n":"self"}],"o":{"n":"spatialdims"}}],[11,"as_core","","Returns a reference to the core pointer wrapper, usable by functions in the `core` module.",7,{"i":[{"n":"self"}],"o":{"n":"kernelcore"}}],[11,"info","","Returns information about this kernel.",7,{"i":[{"n":"self"},{"n":"kernelinfo"}],"o":{"g":["kernelinforesult"],"n":"oclresult"}}],[11,"wg_info","","Returns work group information for this kernel.",7,{"i":[{"n":"self"},{"n":"device"},{"n":"kernelworkgroupinfo"}],"o":{"g":["kernelworkgroupinforesult"],"n":"oclresult"}}],[11,"arg_info","","Returns argument information for this kernel.",7,{"i":[{"n":"self"},{"n":"u32"},{"n":"kernelarginfo"}],"o":{"g":["kernelarginforesult"],"n":"oclresult"}}],[11,"name","","Returns the name of this kernel.",7,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"oclresult"}}],[11,"num_args","","Returns the number of arguments this kernel has.",7,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"oclresult"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",7,{"i":[{"n":"self"}],"o":{"n":"kernelcore"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"queue"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new Queue on the device specified by `device`.",8,{"i":[{"n":"context"},{"n":"device"},{"g":["commandqueueproperties"],"n":"option"}],"o":{"g":["queue"],"n":"oclresult"}}],[11,"flush","","Issues all previously queued OpenCL commands to the device.",8,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"finish","","Blocks until all commands in this queue have completed before returning.",8,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"enqueue_marker","","Enqueues a marker command which waits for either a list of events to complete, or all previously enqueued commands to complete.",8,{"i":[{"n":"self"},{"n":"option"}],"o":{"g":["event"],"n":"oclresult"}}],[11,"as_core","","Returns a reference to the core pointer wrapper, usable by functions in the `core` module.",8,{"i":[{"n":"self"}],"o":{"n":"commandqueuecore"}}],[11,"context","","Returns a copy of the Context associated with this queue.",8,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"device","","Returns the `OpenCL` device associated with this queue.",8,{"i":[{"n":"self"}],"o":{"n":"device"}}],[11,"device_version","","Returns the cached device version.",8,{"i":[{"n":"self"}],"o":{"n":"openclversion"}}],[11,"info","","Returns info about this queue.",8,{"i":[{"n":"self"},{"n":"commandqueueinfo"}],"o":{"g":["commandqueueinforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",8,{"i":[{"n":"self"}],"o":{"n":"queue"}}],[11,"as_ref","","",8,{"i":[{"n":"self"}],"o":{"n":"commandqueuecore"}}],[11,"deref","","",8,{"i":[{"n":"self"}],"o":{"n":"commandqueuecore"}}],[11,"deref_mut","","",8,{"i":[{"n":"self"}],"o":{"n":"commandqueuecore"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"oclcoreerror"}],"o":{"n":"buffercmderror"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"builder","","Returns a new buffer builder.",9,{"o":{"n":"bufferbuilder"}}],[11,"new","","Creates a new buffer.",9,{"i":[{"n":"q"},{"n":"memflags"},{"n":"d"},{"n":"option"}],"o":{"g":["buffer"],"n":"oclresult"}}],[11,"from_gl_buffer","","Creates a buffer linked to a previously created OpenGL buffer object.",9,{"i":[{"n":"q"},{"g":["memflags"],"n":"option"},{"n":"cl_gluint"}],"o":{"g":["buffer"],"n":"oclresult"}}],[11,"cmd","","Returns a command builder used to read, write, copy, etc.",9,{"i":[{"n":"self"}],"o":{"n":"buffercmd"}}],[11,"read","","Returns a command builder used to read data.",9,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"bufferreadcmd"}}],[11,"write","","Returns a command builder used to write data.",9,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"bufferwritecmd"}}],[11,"map","","Returns a command builder used to map data for reading or writing.",9,{"i":[{"n":"self"}],"o":{"n":"buffermapcmd"}}],[11,"copy","","Specifies that this command will be a copy operation.",9,{"i":[{"n":"self"},{"n":"m"},{"g":["usize"],"n":"option"},{"g":["usize"],"n":"option"}],"o":{"n":"buffercmd"}}],[11,"offset","","Returns the offset of the sub-buffer within its buffer if this is a sub-buffer.",9,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"len","","Returns the length of the buffer.",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_sub_buffer","","Returns true if this is a sub-buffer.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"mem_info","","Returns info about the underlying memory object.",9,{"i":[{"n":"self"},{"n":"meminfo"}],"o":{"g":["meminforesult"],"n":"oclcoreresult"}}],[11,"set_default_queue","","Changes the default queue used by this buffer for all subsequent command enqueue operations (reads, writes, etc.).",9,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"buffer"}}],[11,"default_queue","","Returns a reference to the default queue.",9,{"i":[{"n":"self"}],"o":{"g":["queue"],"n":"option"}}],[11,"as_core","","Returns a reference to the core pointer wrapper, usable by functions in the `core` module.",9,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"flags","","Returns the memory flags used during the creation of this buffer.",9,{"i":[{"n":"self"}],"o":{"g":["memflags"],"n":"oclresult"}}],[11,"create_sub_buffer","","Creates a new sub-buffer from a region of this buffer.",9,{"i":[{"n":"self"},{"g":["memflags"],"n":"option"},{"n":"do"},{"n":"dl"}],"o":{"g":["buffer"],"n":"oclresult"}}],[11,"deref","","",9,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"deref_mut","","",9,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"as_ref","","",9,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"as_mut","","",9,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"as_mem","","",9,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"image"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"supported_formats","","Returns a list of supported image formats.",10,{"i":[{"n":"context"},{"n":"memflags"},{"n":"memobjecttype"}],"o":{"g":["vec"],"n":"oclresult"}}],[11,"builder","","Returns an `ImageBuilder`. This is the recommended method to create a new `Image`.",10,{"o":{"n":"imagebuilder"}}],[11,"new","","Returns a new `Image`.",10,{"i":[{"n":"q"},{"n":"memflags"},{"n":"imageformat"},{"n":"imagedescriptor"},{"n":"option"}],"o":{"g":["image"],"n":"oclresult"}}],[11,"from_gl_texture","","Returns a new `Image` from an existant GL texture2D/3D.",10,{"i":[{"n":"q"},{"n":"memflags"},{"n":"imagedescriptor"},{"n":"gltexturetarget"},{"n":"cl_glint"},{"n":"cl_gluint"}],"o":{"g":["image"],"n":"oclresult"}}],[11,"from_gl_renderbuffer","","Returns a new `Image` from an existant renderbuffer.",10,{"i":[{"n":"q"},{"n":"memflags"},{"n":"imagedescriptor"},{"n":"cl_gluint"}],"o":{"g":["image"],"n":"oclresult"}}],[11,"cmd","","Returns an image command builder used to read, write, copy, etc.",10,{"i":[{"n":"self"}],"o":{"n":"imagecmd"}}],[11,"read","","Returns an image command builder set to read.",10,null],[11,"write","","Returns an image command builder set to write.",10,null],[11,"map","","Returns a command builder used to map data for reading or writing.",10,{"i":[{"n":"self"}],"o":{"n":"imagemapcmd"}}],[11,"set_default_queue","","Changes the default queue.",10,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"image"}}],[11,"default_queue","","Returns a reference to the default queue.",10,{"i":[{"n":"self"}],"o":{"g":["queue"],"n":"option"}}],[11,"dims","","Returns this image's dimensions.",10,{"i":[{"n":"self"}],"o":{"n":"spatialdims"}}],[11,"pixel_count","","Returns the total number of pixels in this image.",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"pixel_element_len","","Returns the length of each pixel element.",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"element_count","","Returns the total number of pixel elements in this image. Equivalent to its length.",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"info","","Get information about this image.",10,{"i":[{"n":"self"},{"n":"imageinfo"}],"o":{"g":["imageinforesult"],"n":"oclresult"}}],[11,"mem_info","","Returns info about this image's memory.",10,{"i":[{"n":"self"},{"n":"meminfo"}],"o":{"g":["meminforesult"],"n":"oclresult"}}],[11,"as_core","","Returns a reference to the core pointer wrapper, usable by functions in the `core` module.",10,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",10,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"deref_mut","","",10,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"as_mem","","",10,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates and returns a new sampler.",11,{"i":[{"n":"context"},{"n":"bool"},{"n":"addressingmode"},{"n":"filtermode"}],"o":{"g":["sampler"],"n":"oclresult"}}],[11,"with_defaults","","Creates and returns a new sampler with some default settings.",11,{"i":[{"n":"context"}],"o":{"g":["sampler"],"n":"oclresult"}}],[11,"info","","Returns various kinds of information about the sampler.",11,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"g":["samplerinforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",11,{"i":[{"n":"self"}],"o":{"n":"samplercore"}}],[11,"deref_mut","","",11,{"i":[{"n":"self"}],"o":{"n":"samplercore"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"proque"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"builder","","Returns a new `ProQueBuilder`.",12,{"o":{"n":"proquebuilder"}}],[11,"new","","Creates a new ProQue from individual parts.",12,{"i":[{"n":"context"},{"n":"queue"},{"n":"program"},{"n":"option"}],"o":{"n":"proque"}}],[11,"kernel_builder","","Returns a new `KernelBuilder` with the name, program, default queue, and global work size pre-configured.",12,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"kernelbuilder"}}],[11,"create_buffer","","Returns a new buffer.",12,{"i":[{"n":"self"}],"o":{"g":["buffer"],"n":"oclresult"}}],[11,"buffer_builder","","Returns a new `BufferBuilder` with the default queue and length pre-configured.",12,{"i":[{"n":"self"}],"o":{"n":"bufferbuilder"}}],[11,"set_dims","","Sets the default dimensions used when creating buffers and kernels.",12,{"i":[{"n":"self"},{"n":"s"}]}],[11,"max_wg_size","","Returns the maximum workgroup size supported by the device associated with this `ProQue`.",12,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"oclresult"}}],[11,"queue","","Returns a reference to the queue associated with this ProQue.",12,{"i":[{"n":"self"}],"o":{"n":"queue"}}],[11,"context","","Returns the contained context.",12,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"program","","Returns the current program build.",12,{"i":[{"n":"self"}],"o":{"n":"program"}}],[11,"dims","","Returns the current `dims` or panics.",12,{"i":[{"n":"self"}],"o":{"n":"spatialdims"}}],[11,"dims_result","","Returns the current `dims` or an error.",12,{"i":[{"n":"self"}],"o":{"g":["spatialdims"],"n":"oclresult"}}],[11,"to_len","","",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_len_padded","","",12,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"usize"}}],[11,"to_lens","","",12,null],[11,"dim_count","","",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_work_size","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"to_work_offset","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"deref","","",12,{"i":[{"n":"self"}],"o":{"n":"queue"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",13,null],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"empty","","Creates a new, empty (null) event which must be filled by a command, associating the event with it.",13,{"o":{"n":"event"}}],[11,"user","","Creates a new, empty event which must be filled by a newly initiated command, associating the event with it.",13,{"i":[{"n":"c"}],"o":{"g":["event"],"n":"oclresult"}}],[11,"is_empty","","Returns true if this event is 'empty' and has not yet been associated with a command.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_unpark_callback","","Sets a callback function to trigger upon completion of this event which will unpark the current task.",13,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"register_event_relay","","Registers a user event to have its status set to complete (`CommandExecutionStatus::Complete`) immediately upon completion of this event.",13,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"oclresult"}}],[11,"info","","Returns info about the event.",13,{"i":[{"n":"self"},{"n":"eventinfo"}],"o":{"g":["eventinforesult"],"n":"oclresult"}}],[11,"profiling_info","","Returns info about the event.",13,{"i":[{"n":"self"},{"n":"profilinginfo"}],"o":{"g":["profilinginforesult"],"n":"oclresult"}}],[11,"queue_core","","Returns this event's associated command queue.",13,{"i":[{"n":"self"}],"o":{"g":["commandqueuecore"],"n":"oclresult"}}],[11,"as_core","","Returns a reference to the core pointer wrapper, usable by functions in the `core` module.",13,{"i":[{"n":"self"}],"o":{"n":"eventcore"}}],[11,"into_raw","","Consumes the `Event`, returning the wrapped `cl_event` pointer.",13,{"i":[{"n":"self"}],"o":{"n":"cl_event"}}],[11,"from_raw","","Constructs an `Event` from a raw `cl_event` pointer.",13,{"i":[{"n":"cl_event"}],"o":{"n":"event"}}],[11,"from","","",13,{"i":[{"n":"eventcore"}],"o":{"n":"event"}}],[11,"default","","",13,{"o":{"n":"event"}}],[11,"deref","","",13,{"i":[{"n":"self"}],"o":{"n":"eventcore"}}],[11,"deref_mut","","",13,{"i":[{"n":"self"}],"o":{"n":"eventcore"}}],[11,"as_ref","","",13,{"i":[{"n":"self"}],"o":{"n":"eventcore"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ptr_ref","","",13,{"i":[{"n":"self"}],"o":{"n":"cl_event"}}],[11,"as_ptr_ptr","","",13,null],[11,"count","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"poll","","",13,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"new","","Returns a new, empty, `EventArray`.",14,{"o":{"n":"eventarray"}}],[11,"push","","Pushes a new event into the list.",14,{"i":[{"n":"self"},{"n":"e"}],"o":{"g":["event"],"n":"result"}}],[11,"pop","","Removes the last event from the list and returns it.",14,{"i":[{"n":"self"}],"o":{"g":["event"],"n":"option"}}],[11,"swap_remove","","Removes an event from the list and returns it, swapping the last element into its place.",14,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"event"}}],[11,"remove","","Removes an event from the list and returns it, shifting elements after it to the left.",14,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"event"}}],[11,"clear","","Clears all events from the list whether or not they have completed.",14,{"i":[{"n":"self"}]}],[11,"clear_completed","","Clears events which have already completed.",14,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"wait_for","","Blocks the host thread until all events in this list are complete.",14,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"enqueue_marker","","Enqueue a marker event representing the completion of each and every event in this list.",14,{"i":[{"n":"self"},{"n":"queue"}],"o":{"g":["event"],"n":"oclresult"}}],[11,"len","","The number of events in this list.",14,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"as_slice","","Returns a slice of events in the list.",14,null],[11,"as_mut_slice","","Returns a mutable slice of events in the list.",14,null],[11,"from","","",14,{"i":[{"n":"eventcore"}],"o":{"n":"eventarray"}}],[11,"from","","",14,{"i":[{"n":"event"}],"o":{"n":"eventarray"}}],[11,"from","","",14,{"i":[{"n":"e"}],"o":{"n":"eventarray"}}],[11,"from","","",14,null],[11,"deref","","",14,null],[11,"deref_mut","","",14,null],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"eventarray"}}],[11,"drop","","",14,{"i":[{"n":"self"}]}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","Polls each event from this list.",14,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"as_ptr_ptr","","",14,null],[11,"count","","",14,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"eventlist"}}],[11,"new","","Returns a new, empty, stack-allocated `EventList`.",15,{"o":{"n":"eventlist"}}],[11,"with_capacity","","Returns a new, empty, EventList`with an initial capacity of`cap`.",15,{"i":[{"n":"usize"}],"o":{"n":"eventlist"}}],[11,"push","","Adds an event to the list.",15,{"i":[{"n":"self"},{"n":"e"}]}],[11,"pop","","Removes the last event from the list and returns it.",15,{"i":[{"n":"self"}],"o":{"g":["event"],"n":"option"}}],[11,"clear","","Clears all events from the list whether or not they have completed.",15,{"i":[{"n":"self"}]}],[11,"clear_completed","","Clears events which have completed.",15,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"wait_for","","Blocks the host thread until all events in this list are complete.",15,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"enqueue_marker","","Enqueue a marker event representing the completion of each and every event in this list.",15,{"i":[{"n":"self"},{"n":"queue"}],"o":{"g":["event"],"n":"oclresult"}}],[11,"as_slice","","Returns a slice of the contained events.",15,null],[11,"as_mut_slice","","Returns a mutable slice of the contained events.",15,null],[11,"from","","",15,{"i":[{"n":"eventcore"}],"o":{"n":"eventlist"}}],[11,"from","","",15,{"i":[{"n":"event"}],"o":{"n":"eventlist"}}],[11,"from","","",15,{"i":[{"n":"e"}],"o":{"n":"eventlist"}}],[11,"from","","",15,{"i":[{"g":["event"],"n":"vec"}],"o":{"n":"eventlist"}}],[11,"from","","",15,{"i":[{"n":"option"}],"o":{"n":"eventlist"}}],[11,"from","","",15,{"i":[{"n":"option"}],"o":{"n":"eventlist"}}],[11,"from","","",15,{"i":[{"n":"option"}],"o":{"n":"eventlist"}}],[11,"from","","",15,{"i":[{"n":"option"}],"o":{"n":"eventlist"}}],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,null],[11,"from","","",15,{"i":[{"n":"eventarray"}],"o":{"n":"eventlist"}}],[11,"from","","",15,{"i":[{"g":["clwaitlistptr"],"n":"box"}],"o":{"n":"eventlist"}}],[11,"from","","",15,{"i":[{"n":"box"}],"o":{"n":"eventlist"}}],[11,"from","","",15,{"i":[{"g":["clwaitlistptr"],"n":"ref"}],"o":{"n":"eventlist"}}],[11,"from","","Returns an `EventList` containing owned copies of each element in this `ClWaitListPtrEnum`.",15,{"i":[{"n":"clwaitlistptrenum"}],"o":{"n":"eventlist"}}],[11,"deref","","",15,null],[11,"deref_mut","","",15,null],[11,"into_iter","","",15,null],[11,"poll","","Polls each event from this list.",15,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"as_ptr_ptr","","",15,null],[11,"count","","",15,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"spatialdims"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"spatialdims"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"spatialdims"}],"o":{"n":"bool"}}],[11,"new","","Returns a new `SpatialDims`.",0,{"i":[{"g":["usize"],"n":"option"},{"g":["usize"],"n":"option"},{"g":["usize"],"n":"option"}],"o":{"g":["spatialdims"],"n":"oclresult"}}],[11,"dim_count","","Returns the number of dimensions defined by this `SpatialDims`.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_lens","","Returns a 3D size or an error if unspecified.",0,{"i":[{"n":"self"}],"o":{"g":["unspecifieddimensionserror"],"n":"result"}}],[11,"to_offset","","Returns a 3D offset or an error if unspecified.",0,{"i":[{"n":"self"}],"o":{"g":["unspecifieddimensionserror"],"n":"result"}}],[11,"to_len","","Returns the product of all contained dimensional values (equivalent to a length, area, or volume) or zero if unspecified.",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"try_to_padded_len","","Takes the length and rounds it up to the nearest `incr` or an error.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["usize"],"n":"oclresult"}}],[11,"is_unspecified","","Returns `true` if this `SpatialDims` is an `Unspecified` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_len_padded","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"usize"}}],[11,"to_len","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_lens","","",0,null],[11,"dim_count","","",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_work_size","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"to_work_offset","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"index","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"usize"}}],[11,"from","","",0,{"i":[{"n":"spatialdims"}],"o":{"n":"spatialdims"}}],[11,"from","","",0,{"i":[{"n":"usize"}],"o":{"n":"spatialdims"}}],[11,"from","","",0,{"i":[{"n":"isize"}],"o":{"n":"spatialdims"}}],[11,"from","","",0,{"i":[{"n":"u32"}],"o":{"n":"spatialdims"}}],[11,"from","","",0,{"i":[{"n":"i32"}],"o":{"n":"spatialdims"}}],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[0,"error","","Standard error type for ocl futures.",null,null],[3,"Error","ocl::error","An Error.",null,null],[4,"ErrorKind","","An enum containing either a `String` or one of several other error types.",null,null],[13,"OclCore","","",16,null],[13,"FuturesMpscSend","","",16,null],[13,"OneshotCanceled","","",16,null],[13,"BufferCmd","","",16,null],[13,"Device","","",16,null],[13,"Platform","","",16,null],[13,"Kernel","","",16,null],[6,"Result","","",null,null],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"api_status","","Returns the error status code for `OclCore` variants.",17,{"i":[{"n":"self"}],"o":{"g":["status"],"n":"option"}}],[11,"kind","","Returns the error variant and contents.",17,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"cause","","Returns the immediate cause of this error (e.g. the next error in the chain).",17,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"cause","","",17,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","",17,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",17,{"i":[{"n":"oclcoreerror"}],"o":{"n":"error"}}],[11,"from","","",17,{"i":[{"n":"senderror"}],"o":{"n":"error"}}],[11,"from","","",17,{"i":[{"n":"oneshotcanceled"}],"o":{"n":"error"}}],[11,"from","","",17,{"i":[{"n":"string"}],"o":{"n":"error"}}],[11,"from","","",17,{"i":[{"n":"str"}],"o":{"n":"error"}}],[11,"from","","",17,{"i":[{"n":"nulerror"}],"o":{"n":"error"}}],[11,"from","","",17,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"from","","",17,{"i":[{"n":"buffercmderror"}],"o":{"n":"error"}}],[0,"async","ocl","Types related to futures and asynchrony.",null,null],[3,"OrderLock","ocl::async","A lock with conserved global order which interoperates with OpenCL events and Rust futures to provide exclusive access to data.",null,null],[3,"ReadGuard","","Allows access to the data contained within a lock just like a mutex guard.",null,null],[3,"WriteGuard","","Allows access to the data contained within just like a mutex guard.",null,null],[3,"FutureGuard","","A future that resolves to a read or write guard after ensuring that the data being guarded is appropriately locked during the execution of an OpenCL command.",null,null],[3,"RwVec","","A locking `Vec` which interoperates with OpenCL events and Rust futures to provide exclusive access to data.",null,null],[3,"MemMap","","A view of memory mapped by `clEnqueueMap{...}`.",null,null],[3,"FutureMemMap","","A future which resolves to a `MemMap` as soon as its creating command completes.",null,null],[3,"BufferSink","","Represents mapped memory and allows frames of data to be 'flushed' (written) from host-accessible mapped memory region into its associated device-visible buffer in a repeated fashion.",null,null],[3,"FutureFlush","","",null,null],[3,"BufferSinkInner","","",null,null],[3,"BufferStream","","Represents mapped memory and allows frames of data to be 'flooded' (read) from a device-visible `Buffer` into its associated host-accessible mapped memory region in a repeated fashion.",null,null],[3,"FutureFlood","","",null,null],[3,"BufferStreamInner","","",null,null],[11,"fmt","ocl","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new `FutureMemMap`.",18,{"i":[{"n":"memmapcore"},{"n":"usize"},{"n":"event"},{"n":"mem"},{"n":"queue"}],"o":{"n":"futurememmap"}}],[11,"set_unmap_wait_events","","Set an event wait list for the unmap command.",18,{"i":[{"n":"self"},{"n":"el"}]}],[11,"ewait_unmap","","Set an event wait list for the unmap command.",18,{"i":[{"n":"self"},{"n":"l"}],"o":{"n":"futurememmap"}}],[11,"create_unmap_event","","Create an event which will be triggered (set complete) after this future resolves into a `MemMap` and after that `MemMap` is dropped or manually unmapped.",18,{"i":[{"n":"self"}],"o":{"g":["event"],"n":"oclresult"}}],[11,"enew_unmap","","Specifies an event which will be triggered (set complete) after this future resolves into a `MemMap` and after that `MemMap` is dropped or manually unmapped.",18,{"i":[{"n":"self"},{"n":"en"}],"o":{"n":"futurememmap"}}],[11,"set_unmap_queue","","Specifies the queue to be used for the unmap command.",18,{"i":[{"n":"self"},{"n":"queue"}]}],[11,"with_unmap_queue","","Specifies the queue to be used for the unmap command.",18,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"futurememmap"}}],[11,"unmap_event","","Returns the unmap event if it has been created.",18,{"i":[{"n":"self"}],"o":{"g":["event"],"n":"option"}}],[11,"wait","","Blocks the current thread until the OpenCL command is complete and an appropriate lock can be obtained on the underlying data.",18,{"i":[{"n":"self"}],"o":{"g":["memmap"],"n":"oclresult"}}],[11,"poll","","",18,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"release_event","","Returns a reference to the event previously set using `create_release_event` on the `FutureGuard` which preceded this `ReadGuard`. The event can be manually 'triggered' by calling `...set_complete()...` or used normally (as a wait event) by subsequent commands. If the event is not manually completed it will be automatically set complete when this `ReadGuard` is dropped.",19,{"i":[{"n":"readguard"}],"o":{"g":["event"],"n":"option"}}],[11,"release","","Triggers the release event and releases the lock held by this `ReadGuard` before returning the original `OrderLock`.",19,{"i":[{"n":"readguard"}],"o":{"n":"orderlock"}}],[11,"deref","","",19,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"drop","","",19,{"i":[{"n":"self"}]}],[11,"new","","",19,{"i":[{"n":"orderlock"},{"g":["event"],"n":"option"}],"o":{"n":"readguard"}}],[11,"order_lock","","",19,{"i":[{"n":"self"}],"o":{"n":"orderlock"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"release_event","","Returns a reference to the event previously set using `create_release_event` on the `FutureGuard` which preceded this `WriteGuard`. The event can be manually 'triggered' by calling `...set_complete()...` or used normally (as a wait event) by subsequent commands. If the event is not manually completed it will be automatically set complete when this `WriteGuard` is dropped.",20,{"i":[{"n":"writeguard"}],"o":{"g":["event"],"n":"option"}}],[11,"release","","Triggers the release event and releases the lock held by this `WriteGuard` before returning the original `OrderLock`.",20,{"i":[{"n":"writeguard"}],"o":{"n":"orderlock"}}],[11,"deref","","",20,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"deref_mut","","",20,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"drop","","",20,{"i":[{"n":"self"}]}],[11,"new","","",20,{"i":[{"n":"orderlock"},{"g":["event"],"n":"option"}],"o":{"n":"writeguard"}}],[11,"order_lock","","",20,{"i":[{"n":"self"}],"o":{"n":"orderlock"}}],[11,"fmt","ocl::async","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set_lock_wait_events","","Sets an event wait list.",21,{"i":[{"n":"self"},{"n":"l"}]}],[11,"ewait_lock","","Sets an event wait list.",21,{"i":[{"n":"self"},{"n":"l"}],"o":{"n":"futureguard"}}],[11,"create_lock_event","","Creates an event which will be triggered when a lock is obtained on the guarded internal value.",21,{"i":[{"n":"self"},{"n":"c"}],"o":{"g":["event"],"n":"oclresult"}}],[11,"enew_lock","","Creates an event which will be triggered when a lock is obtained on the guarded internal value.",21,{"i":[{"n":"self"},{"n":"c"},{"n":"en"}],"o":{"n":"futureguard"}}],[11,"set_command_wait_event","","Sets a command completion wait event.",21,{"i":[{"n":"self"},{"n":"event"}]}],[11,"ewait_command","","Sets a command completion wait event.",21,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"futureguard"}}],[11,"create_release_event","","Creates an event which will be triggered after this future resolves and the ensuing `OrderGuard` is dropped or manually released.",21,{"i":[{"n":"self"},{"n":"c"}],"o":{"g":["event"],"n":"oclresult"}}],[11,"enew_release","","Creates an event which will be triggered after this future resolves and the ensuing `OrderGuard` is dropped or manually released.",21,{"i":[{"n":"self"},{"n":"c"},{"n":"en"}],"o":{"n":"futureguard"}}],[11,"lock_event","","Returns a reference to the event previously created with `::create_lock_event` or `::enew_lock` which will trigger (be completed) when the wait events are complete and the lock is locked.",21,{"i":[{"n":"self"}],"o":{"g":["event"],"n":"option"}}],[11,"release_event","","Returns a reference to the event previously created with `::create_release_event` or `::enew_release` which will trigger (be completed) when a lock is obtained on the guarded internal value.",21,{"i":[{"n":"self"}],"o":{"g":["event"],"n":"option"}}],[11,"wait","","Blocks the current thread until the OpenCL command is complete and an appropriate lock can be obtained on the underlying data.",21,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"as_ptr","","Returns a mutable pointer to the data contained within the internal value, bypassing all locks and protections.",21,null],[11,"as_mut_ptr","","Returns a mutable pointer to the data contained within the internal value, bypassing all locks and protections.",21,null],[11,"order_lock","","Returns a reference to the `OrderLock` used to create this future.",21,{"i":[{"n":"self"}],"o":{"n":"orderlock"}}],[11,"poll","","",21,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"drop","","Drops this FutureGuard.",21,{"i":[{"n":"self"}]}],[11,"upgrade_after_command","","",21,{"i":[{"n":"self"}],"o":{"g":["writeguard"],"n":"futureguard"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates and returns a new `OrderLock`.",22,{"i":[{"n":"v"}],"o":{"n":"orderlock"}}],[11,"read","","Returns a new `FutureGuard` which will resolve into a a `OrderGuard`.",22,{"i":[{"n":"self"}],"o":{"g":["readguard"],"n":"futureguard"}}],[11,"write","","Returns a new `FutureGuard` which will resolve into a a `OrderGuard`.",22,{"i":[{"n":"self"}],"o":{"g":["writeguard"],"n":"futureguard"}}],[11,"as_ptr","","Returns a reference to the inner value.",22,null],[11,"as_mut_ptr","","Returns a mutable reference to the inner value.",22,null],[11,"from","","",22,{"i":[{"n":"qrwlock"}],"o":{"n":"orderlock"}}],[11,"from","","",22,{"i":[{"n":"v"}],"o":{"n":"orderlock"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"orderlock"}}],[11,"clone","ocl","",23,{"i":[{"n":"self"}],"o":{"n":"rwvec"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates and returns a new `RwVec`.",23,{"o":{"n":"rwvec"}}],[11,"read","","Returns a new `FutureRwGuard` which will resolve into a a `RwGuard`.",23,{"i":[{"n":"self"}],"o":{"g":["vec","readguard"],"n":"futureguard"}}],[11,"write","","Returns a new `FutureRwGuard` which will resolve into a a `RwGuard`.",23,{"i":[{"n":"self"}],"o":{"g":["vec","writeguard"],"n":"futureguard"}}],[11,"as_mut_slice","","Returns a mutable slice into the contained `Vec`.",23,null],[11,"len_stale","","Returns the length of the internal `Vec`.",23,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"id","","Returns a pointer address to the internal array, usable as a unique identifier.",23,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from","","",23,{"i":[{"g":["vec"],"n":"qrwlock"}],"o":{"n":"rwvec"}}],[11,"from","","",23,{"i":[{"n":"vec"}],"o":{"n":"rwvec"}}],[11,"deref","","",23,{"i":[{"n":"self"}],"o":{"n":"orderlock"}}],[11,"deref_mut","","",23,{"i":[{"n":"self"}],"o":{"n":"orderlock"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",24,{"i":[{"n":"memmapcore"},{"n":"usize"},{"g":["eventlist"],"n":"option"},{"g":["event"],"n":"option"},{"n":"memcore"},{"n":"queue"}],"o":{"n":"memmap"}}],[11,"unmap","","Returns an unmap command builder.",24,{"i":[{"n":"self"}],"o":{"n":"memunmapcmd"}}],[11,"enqueue_unmap","","Enqueues an unmap command for this memory object immediately.",24,{"i":[{"n":"self"},{"g":["queue"],"n":"option"},{"n":"option"},{"n":"option"}],"o":{"n":"oclresult"}}],[11,"unmap_event","","Returns a reference to the unmap target event if it has been set.",24,{"i":[{"n":"self"}],"o":{"g":["event"],"n":"option"}}],[11,"unmap_wait_events","","Returns a reference to the unmap wait event list if it has been set.",24,{"i":[{"n":"self"}],"o":{"g":["eventlist"],"n":"option"}}],[11,"is_unmapped","","Returns true if an unmap command has already been enqueued, causing the memory referenced by this `MemMap` to become invalid.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_ptr","","Returns a pointer to the host mapped memory.",24,null],[11,"as_mut_ptr","","Returns a mutable pointer to the host mapped memory.",24,null],[11,"queue","","Returns a reference to the internal core command queue.",24,{"i":[{"n":"self"}],"o":{"n":"queue"}}],[11,"deref","","",24,null],[11,"deref_mut","","",24,null],[11,"drop","","",24,{"i":[{"n":"self"}]}],[11,"as_mem","","",24,{"i":[{"n":"self"}],"o":{"n":"memcore"}}],[11,"fmt","ocl::async","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"future_guard","","Returns a mutable reference to the contained `FutureGuard`.",25,{"i":[{"n":"self"}],"o":{"n":"futureguard"}}],[11,"poll","","",25,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"buffer","","Returns the internal buffer.",26,{"i":[{"n":"inner"}],"o":{"n":"buffer"}}],[11,"memory","","Returns the internal memory mapping.",26,{"i":[{"n":"inner"}],"o":{"n":"memmapcore"}}],[11,"default_offset","","Returns the default offset.",26,{"i":[{"n":"inner"}],"o":{"n":"usize"}}],[11,"deref","","",26,null],[11,"deref_mut","","",26,null],[11,"drop","","Drops the `Inner` enqueuing an unmap and blocking until it completes.",26,{"i":[{"n":"self"}]}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"buffersink"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new `BufferSink`.",27,{"i":[{"n":"queue"},{"n":"usize"}],"o":{"g":["buffersink"],"n":"oclresult"}}],[11,"from_buffer","","Returns a new `BufferSink`.",27,{"i":[{"n":"buffer"},{"g":["queue"],"n":"option"},{"n":"usize"},{"n":"usize"}],"o":{"g":["buffersink"],"n":"oclresult"}}],[11,"read","","Returns a new `FutureGuard` which will resolve into a a `ReadGuard`.",27,{"i":[{"n":"self"}],"o":{"g":["inner","readguard"],"n":"futureguard"}}],[11,"write","","Returns a new `FutureGuard` which will resolve into a a `WriteGuard`.",27,{"i":[{"n":"self"}],"o":{"g":["inner","writeguard"],"n":"futureguard"}}],[11,"flush","","Returns a command builder which, once enqueued, will flush data from the mapped memory region to the device.",27,{"i":[{"n":"self"}],"o":{"n":"flushcmd"}}],[11,"buffer","","Returns a reference to the internal buffer.",27,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"memory","","Returns a reference to the internal memory mapping.",27,{"i":[{"n":"self"}],"o":{"n":"memmapcore"}}],[11,"default_offset","","Returns a reference to the internal offset.",27,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"default_len","","Returns the length of the memory region.",27,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"as_mut_slice","","Returns a mutable slice into the contained memory region.",27,null],[11,"id","","Returns a pointer address to the internal memory region, usable as a unique identifier.",27,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from","","",27,{"i":[{"g":["inner"],"n":"orderlock"}],"o":{"n":"buffersink"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"future_guard","","Returns a mutable reference to the contained `FutureGuard`.",28,{"i":[{"n":"self"}],"o":{"n":"futureguard"}}],[11,"poll","","",28,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"buffer","","Returns the internal buffer.",29,{"i":[{"n":"inner"}],"o":{"n":"buffer"}}],[11,"memory","","Returns the internal memory mapping.",29,{"i":[{"n":"inner"}],"o":{"n":"memmapcore"}}],[11,"default_offset","","Returns the default offset.",29,{"i":[{"n":"inner"}],"o":{"n":"usize"}}],[11,"deref","","",29,null],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"bufferstream"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new `BufferStream`.",30,{"i":[{"n":"queue"},{"n":"usize"}],"o":{"g":["bufferstream"],"n":"oclresult"}}],[11,"from_buffer","","Returns a new `BufferStream`.",30,{"i":[{"n":"buffer"},{"g":["queue"],"n":"option"},{"n":"usize"},{"n":"usize"}],"o":{"g":["bufferstream"],"n":"oclresult"}}],[11,"read","","Returns a new `FutureGuard` which will resolve into a a `ReadGuard`.",30,{"i":[{"n":"self"}],"o":{"g":["inner","readguard"],"n":"futureguard"}}],[11,"flood","","Returns a command builder which, when enqueued, floods the mapped memory region with fresh data from the device.",30,{"i":[{"n":"self"}],"o":{"n":"floodcmd"}}],[11,"buffer","","Returns a reference to the internal buffer.",30,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"memory","","Returns a reference to the internal memory mapping.",30,{"i":[{"n":"self"}],"o":{"n":"memmapcore"}}],[11,"default_offset","","Returns a reference to the default offset.",30,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"default_len","","Returns the length of the memory region.",30,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"as_mut_slice","","Returns a mutable slice into the contained memory region.",30,null],[11,"id","","Returns a pointer address to the internal memory region, usable as a unique identifier.",30,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from","","",30,{"i":[{"g":["inner"],"n":"orderlock"}],"o":{"n":"bufferstream"}}],[6,"FutureReadGuard","","",null,null],[6,"FutureWriteGuard","","",null,null],[8,"OrderGuard","","A read or write guard for an `OrderLock`.",null,null],[10,"new","","",31,{"i":[{"n":"orderlock"},{"g":["event"],"n":"option"}],"o":{"n":"self"}}],[10,"order_lock","","",31,{"i":[{"n":"self"}],"o":{"n":"orderlock"}}],[11,"forget","","",31,{"i":[{"n":"self"}]}],[0,"prm","ocl","OpenCL scalar and vector primitive types.",null,null],[6,"cl_char","ocl::prm","",null,null],[6,"cl_uchar","","",null,null],[6,"cl_short","","",null,null],[6,"cl_ushort","","",null,null],[6,"cl_int","","",null,null],[6,"cl_uint","","",null,null],[6,"cl_long","","",null,null],[6,"cl_ulong","","",null,null],[6,"cl_half","","",null,null],[6,"cl_float","","",null,null],[6,"cl_double","","",null,null],[6,"cl_bool","","",null,null],[6,"cl_bitfield","","",null,null],[6,"cl_GLuint","","",null,null],[6,"cl_GLint","","",null,null],[6,"cl_GLenum","","",null,null],[3,"Char","","",null,null],[3,"Char2","","",null,null],[3,"Char3","","",null,null],[3,"Char4","","",null,null],[3,"Char8","","",null,null],[3,"Char16","","",null,null],[3,"Uchar","","",null,null],[3,"Uchar2","","",null,null],[3,"Uchar3","","",null,null],[3,"Uchar4","","",null,null],[3,"Uchar8","","",null,null],[3,"Uchar16","","",null,null],[3,"Short","","",null,null],[3,"Short2","","",null,null],[3,"Short3","","",null,null],[3,"Short4","","",null,null],[3,"Short8","","",null,null],[3,"Short16","","",null,null],[3,"Ushort","","",null,null],[3,"Ushort2","","",null,null],[3,"Ushort3","","",null,null],[3,"Ushort4","","",null,null],[3,"Ushort8","","",null,null],[3,"Ushort16","","",null,null],[3,"Int","","",null,null],[3,"Int2","","",null,null],[3,"Int3","","",null,null],[3,"Int4","","",null,null],[3,"Int8","","",null,null],[3,"Int16","","",null,null],[3,"Uint","","",null,null],[3,"Uint2","","",null,null],[3,"Uint3","","",null,null],[3,"Uint4","","",null,null],[3,"Uint8","","",null,null],[3,"Uint16","","",null,null],[3,"Long","","",null,null],[3,"Long2","","",null,null],[3,"Long3","","",null,null],[3,"Long4","","",null,null],[3,"Long8","","",null,null],[3,"Long16","","",null,null],[3,"Ulong","","",null,null],[3,"Ulong2","","",null,null],[3,"Ulong3","","",null,null],[3,"Ulong4","","",null,null],[3,"Ulong8","","",null,null],[3,"Ulong16","","",null,null],[3,"Float","","",null,null],[3,"Float2","","",null,null],[3,"Float3","","",null,null],[3,"Float4","","",null,null],[3,"Float8","","",null,null],[3,"Float16","","",null,null],[3,"Double","","",null,null],[3,"Double2","","",null,null],[3,"Double3","","",null,null],[3,"Double4","","",null,null],[3,"Double8","","",null,null],[3,"Double16","","",null,null],[0,"traits","ocl","Commonly used traits.",null,null],[8,"OclPrm","ocl::traits","A primitive type usable within `OpenCL` kernels.",null,null],[8,"OclScl","","A scalar type usable within OpenCL kernels.",null,null],[8,"OclVec","","A vector type usable within `OpenCL` kernels.",null,null],[8,"WorkDims","","Types which have properties describing the amount of work to be done in multiple dimensions.",null,null],[10,"dim_count","","Returns the number of dimensions defined.",32,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"to_work_size","","Returns an array representing the amount of work to be done by a kernel.",32,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"to_work_offset","","Returns an array representing the offset of a work item or memory location.",32,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"MemLen","","Types which have properties allowing them to be used to define the size of a volume of memory.",null,null],[10,"to_len","","Returns the exact number of elements of a volume of memory (equivalent to `Vec::len()`).",33,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"to_len_padded","","Returns the length of a volume of memory padded to the next multiple of `incr`.",33,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"usize"}}],[10,"to_lens","","Returns the exact lengths of each dimension of a volume of memory.",33,null],[8,"IntoMarker","","Conversion to a 'marker' event.",null,null],[10,"into_marker","","",34,{"i":[{"n":"self"},{"n":"queue"}],"o":{"g":["option"],"n":"oclresult"}}],[8,"IntoRawEventArray","","Conversion to a stack allocated array of `cl_event` pointers.",null,null],[10,"into_raw_array","","",35,{"i":[{"n":"self"}],"o":{"n":"raweventarray"}}],[0,"builders","ocl","Builders and associated settings-related types.",null,null],[3,"ImageFormat","ocl::builders","Image format properties used by `Image`.",null,null],[12,"channel_order","","",36,null],[12,"channel_data_type","","",36,null],[3,"ImageDescriptor","","An image descriptor use in the creation of `Image`.",null,null],[12,"image_type","","",37,null],[12,"image_width","","",37,null],[12,"image_height","","",37,null],[12,"image_depth","","",37,null],[12,"image_array_size","","",37,null],[12,"image_row_pitch","","",37,null],[12,"image_slice_pitch","","",37,null],[12,"buffer","","",37,null],[3,"ContextProperties","","Context properties list.",null,null],[3,"ContextBuilder","","A builder for `Context`.",null,null],[3,"ProgramBuilder","","A builder for `Program`.",null,null],[3,"ImageBuilder","","A builder for `Image`.",null,null],[3,"ProQueBuilder","","A builder for `ProQue`.",null,null],[3,"BufferCmd","","A buffer command builder used to enqueue reads, writes, fills, and copies.",null,null],[3,"BufferReadCmd","","A buffer command builder used to enqueue reads.",null,null],[3,"BufferWriteCmd","","A buffer command builder used to enqueue writes.",null,null],[3,"BufferMapCmd","","A command builder used to enqueue a map command.",null,null],[3,"ImageCmd","","An image command builder for enqueuing reads, writes, fills, and copies.",null,null],[3,"KernelCmd","","A kernel command builder used to enqueue a kernel with a mix of default and optionally specified arguments.",null,null],[3,"BufferBuilder","","A buffer builder.",null,null],[3,"KernelBuilder","","A kernel builder.",null,null],[4,"BuildOpt","","A build option used by ProgramBuilder.",null,null],[13,"CmplrDefine","","",38,null],[12,"ident","ocl::builders::BuildOpt","",38,null],[12,"val","","",38,null],[13,"CmplrInclDir","ocl::builders","",38,null],[12,"path","ocl::builders::BuildOpt","",38,null],[13,"CmplrOther","ocl::builders","",38,null],[13,"IncludeDefine","","",38,null],[12,"ident","ocl::builders::BuildOpt","",38,null],[12,"val","","",38,null],[13,"IncludeRaw","ocl::builders","",38,null],[13,"IncludeRawEof","","",38,null],[4,"DeviceSpecifier","","Specifies [what boils down to] a list of devices.",null,null],[13,"All","","",39,null],[13,"First","","",39,null],[13,"Single","","",39,null],[13,"List","","",39,null],[13,"Indices","","",39,null],[13,"WrappingIndices","","",39,null],[13,"TypeFlags","","",39,null],[4,"BufferCmdKind","","The type of operation to be performed by a command.",null,null],[13,"Unspecified","","",40,null],[13,"Read","","",40,null],[13,"Write","","",40,null],[13,"Map","","",40,null],[13,"Copy","","",40,null],[12,"dst_buffer","ocl::builders::BufferCmdKind","",40,null],[12,"dst_offset","","",40,null],[12,"len","","",40,null],[13,"Fill","ocl::builders","",40,null],[12,"pattern","ocl::builders::BufferCmdKind","",40,null],[12,"len","","",40,null],[13,"CopyToImage","ocl::builders","",40,null],[12,"image","ocl::builders::BufferCmdKind","",40,null],[12,"dst_origin","","",40,null],[12,"region","","",40,null],[13,"GLAcquire","ocl::builders","",40,null],[13,"GLRelease","","",40,null],[4,"BufferCmdDataShape","","The 'shape' of the data to be processed, whether one or multi-dimensional.",null,null],[13,"Lin","","",41,null],[12,"offset","ocl::builders::BufferCmdDataShape","",41,null],[13,"Rect","ocl::builders","",41,null],[12,"src_origin","ocl::builders::BufferCmdDataShape","",41,null],[12,"dst_origin","","",41,null],[12,"region","","",41,null],[12,"src_row_pitch_bytes","","",41,null],[12,"src_slc_pitch_bytes","","",41,null],[12,"dst_row_pitch_bytes","","",41,null],[12,"dst_slc_pitch_bytes","","",41,null],[4,"ImageCmdKind","ocl::builders","The type of operation to be performed by a command.",null,null],[13,"Unspecified","","",42,null],[13,"Read","","",42,null],[12,"data","ocl::builders::ImageCmdKind","",42,null],[13,"Write","ocl::builders","",42,null],[12,"data","ocl::builders::ImageCmdKind","",42,null],[13,"Map","ocl::builders","",42,null],[13,"Fill","","",42,null],[12,"color","ocl::builders::ImageCmdKind","",42,null],[13,"Copy","ocl::builders","",42,null],[12,"dst_image","ocl::builders::ImageCmdKind","",42,null],[12,"dst_origin","","",42,null],[13,"CopyToBuffer","ocl::builders","",42,null],[12,"buffer","ocl::builders::ImageCmdKind","",42,null],[12,"dst_origin","","",42,null],[13,"GLAcquire","ocl::builders","",42,null],[13,"GLRelease","","",42,null],[4,"ClNullEventPtrEnum","","",null,null],[13,"Null","","",43,null],[13,"Event","","",43,null],[13,"EventList","","",43,null],[4,"ClWaitListPtrEnum","","An enum which can represent several different ways of representing a event wait list.",null,null],[13,"Null","","",44,null],[13,"RawEventArray","","",44,null],[13,"EventCoreOwned","","",44,null],[13,"EventOwned","","",44,null],[13,"EventCore","","",44,null],[13,"Event","","",44,null],[13,"EventList","","",44,null],[13,"EventSlice","","",44,null],[13,"EventPtrSlice","","",44,null],[13,"RefEventList","","",44,null],[13,"RefTraitObj","","",44,null],[13,"BoxTraitObj","","",44,null],[0,"flags","ocl","Bitflags for various parameter types.",null,null],[3,"DeviceType","ocl::flags","cl_device_type - bitfield",null,null],[17,"DEVICE_TYPE_DEFAULT","","",null,null],[17,"DEVICE_TYPE_CPU","","",null,null],[17,"DEVICE_TYPE_GPU","","",null,null],[17,"DEVICE_TYPE_ACCELERATOR","","",null,null],[17,"DEVICE_TYPE_CUSTOM","","",null,null],[17,"DEVICE_TYPE_ALL","","",null,null],[3,"DeviceFpConfig","","cl_device_fp_config - bitfield",null,null],[17,"FP_DENORM","","",null,null],[17,"FP_INF_NAN","","",null,null],[17,"FP_ROUND_TO_NEAREST","","",null,null],[17,"FP_ROUND_TO_ZERO","","",null,null],[17,"FP_ROUND_TO_INF","","",null,null],[17,"FP_FMA","","",null,null],[17,"FP_SOFT_FLOAT","","",null,null],[17,"FP_CORRECTLY_ROUNDED_DIVIDE_SQRT","","",null,null],[3,"DeviceExecCapabilities","","cl_device_exec_capabilities - bitfield",null,null],[17,"EXEC_KERNEL","","",null,null],[17,"EXEC_NATIVE_KERNEL","","",null,null],[3,"CommandQueueProperties","","cl_command_queue_properties - bitfield",null,null],[17,"QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE","","",null,null],[17,"QUEUE_PROFILING_ENABLE","","",null,null],[3,"DeviceAffinityDomain","","cl_device_affinity_domain",null,null],[17,"DEVICE_AFFINITY_DOMAIN_NUMA","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L4_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L3_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L2_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L1_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE","","",null,null],[3,"MemFlags","","cl_mem_flags - bitfield",null,null],[17,"MEM_READ_WRITE","","",null,null],[17,"MEM_WRITE_ONLY","","",null,null],[17,"MEM_READ_ONLY","","",null,null],[17,"MEM_USE_HOST_PTR","","",null,null],[17,"MEM_ALLOC_HOST_PTR","","",null,null],[17,"MEM_COPY_HOST_PTR","","",null,null],[17,"MEM_HOST_WRITE_ONLY","","",null,null],[17,"MEM_HOST_READ_ONLY","","",null,null],[17,"MEM_HOST_NO_ACCESS","","",null,null],[3,"MemMigrationFlags","","cl_mem_migration_flags - bitfield",null,null],[17,"MIGRATE_MEM_OBJECT_HOST","","",null,null],[17,"MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED","","",null,null],[3,"MapFlags","","cl_map_flags - bitfield",null,null],[17,"MAP_READ","","",null,null],[17,"MAP_WRITE","","",null,null],[17,"MAP_WRITE_INVALIDATE_REGION","","",null,null],[3,"ProgramBinaryType","","cl_program_binary_type",null,null],[17,"PROGRAM_BINARY_TYPE_NONE","","",null,null],[17,"PROGRAM_BINARY_TYPE_COMPILED_OBJECT","","",null,null],[17,"PROGRAM_BINARY_TYPE_LIBRARY","","",null,null],[17,"PROGRAM_BINARY_TYPE_EXECUTABLE","","",null,null],[3,"KernelArgTypeQualifier","","cl_kernel_arg_type_qualifer",null,null],[17,"KERNEL_ARG_TYPE_NONE","","",null,null],[17,"KERNEL_ARG_TYPE_CONST","","",null,null],[17,"KERNEL_ARG_TYPE_RESTRICT","","",null,null],[17,"KERNEL_ARG_TYPE_VOLATILE","","",null,null],[0,"enums","ocl","Enumerators for settings and information requests.",null,null],[4,"ImageChannelOrder","ocl::enums","Specifies the number of channels and the channel layout i.e. the memory layout in which channels are stored in the image. Valid values are described in the table below. (from SDK)",null,null],[13,"R","","",45,null],[13,"A","","",45,null],[13,"Rg","","",45,null],[13,"Ra","","",45,null],[13,"Rgb","","",45,null],[13,"Rgba","","",45,null],[13,"Bgra","","",45,null],[13,"Argb","","",45,null],[13,"Intensity","","",45,null],[13,"Luminance","","",45,null],[13,"Rx","","",45,null],[13,"Rgx","","",45,null],[13,"Rgbx","","",45,null],[13,"Depth","","",45,null],[13,"DepthStencil","","",45,null],[4,"ImageChannelDataType","","Describes the size of the channel data type. The number of bits per element determined by the image_channel_data_type and image_channel_order must be a power of two. The list of supported values is described in the table below. (from SDK)",null,null],[13,"SnormInt8","","",46,null],[13,"SnormInt16","","",46,null],[13,"UnormInt8","","",46,null],[13,"UnormInt16","","",46,null],[13,"UnormShort565","","",46,null],[13,"UnormShort555","","",46,null],[13,"UnormInt101010","","",46,null],[13,"SignedInt8","","",46,null],[13,"SignedInt16","","",46,null],[13,"SignedInt32","","",46,null],[13,"UnsignedInt8","","",46,null],[13,"UnsignedInt16","","",46,null],[13,"UnsignedInt32","","",46,null],[13,"HalfFloat","","",46,null],[13,"Float","","",46,null],[13,"UnormInt24","","",46,null],[4,"Cbool","","cl_bool",null,null],[13,"False","","",47,null],[13,"True","","",47,null],[4,"Polling","","cl_bool: Polling",null,null],[13,"Blocking","","",48,null],[13,"NonBlocking","","",48,null],[4,"PlatformInfo","","cl_platform_info",null,null],[13,"Profile","","",49,null],[13,"Version","","",49,null],[13,"Name","","",49,null],[13,"Vendor","","",49,null],[13,"Extensions","","",49,null],[4,"DeviceInfo","","cl_device_info",null,null],[13,"Type","","",50,null],[13,"VendorId","","",50,null],[13,"MaxComputeUnits","","",50,null],[13,"MaxWorkItemDimensions","","",50,null],[13,"MaxWorkGroupSize","","",50,null],[13,"MaxWorkItemSizes","","",50,null],[13,"PreferredVectorWidthChar","","",50,null],[13,"PreferredVectorWidthShort","","",50,null],[13,"PreferredVectorWidthInt","","",50,null],[13,"PreferredVectorWidthLong","","",50,null],[13,"PreferredVectorWidthFloat","","",50,null],[13,"PreferredVectorWidthDouble","","",50,null],[13,"MaxClockFrequency","","",50,null],[13,"AddressBits","","",50,null],[13,"MaxReadImageArgs","","",50,null],[13,"MaxWriteImageArgs","","",50,null],[13,"MaxMemAllocSize","","",50,null],[13,"Image2dMaxWidth","","",50,null],[13,"Image2dMaxHeight","","",50,null],[13,"Image3dMaxWidth","","",50,null],[13,"Image3dMaxHeight","","",50,null],[13,"Image3dMaxDepth","","",50,null],[13,"ImageSupport","","",50,null],[13,"MaxParameterSize","","",50,null],[13,"MaxSamplers","","",50,null],[13,"MemBaseAddrAlign","","",50,null],[13,"MinDataTypeAlignSize","","",50,null],[13,"SingleFpConfig","","",50,null],[13,"GlobalMemCacheType","","",50,null],[13,"GlobalMemCachelineSize","","",50,null],[13,"GlobalMemCacheSize","","",50,null],[13,"GlobalMemSize","","",50,null],[13,"MaxConstantBufferSize","","",50,null],[13,"MaxConstantArgs","","",50,null],[13,"LocalMemType","","",50,null],[13,"LocalMemSize","","",50,null],[13,"ErrorCorrectionSupport","","",50,null],[13,"ProfilingTimerResolution","","",50,null],[13,"EndianLittle","","",50,null],[13,"Available","","",50,null],[13,"CompilerAvailable","","",50,null],[13,"ExecutionCapabilities","","",50,null],[13,"QueueProperties","","",50,null],[13,"Name","","",50,null],[13,"Vendor","","",50,null],[13,"DriverVersion","","",50,null],[13,"Profile","","",50,null],[13,"Version","","",50,null],[13,"Extensions","","",50,null],[13,"Platform","","",50,null],[13,"DoubleFpConfig","","",50,null],[13,"HalfFpConfig","","",50,null],[13,"PreferredVectorWidthHalf","","",50,null],[13,"HostUnifiedMemory","","",50,null],[13,"NativeVectorWidthChar","","",50,null],[13,"NativeVectorWidthShort","","",50,null],[13,"NativeVectorWidthInt","","",50,null],[13,"NativeVectorWidthLong","","",50,null],[13,"NativeVectorWidthFloat","","",50,null],[13,"NativeVectorWidthDouble","","",50,null],[13,"NativeVectorWidthHalf","","",50,null],[13,"OpenclCVersion","","",50,null],[13,"LinkerAvailable","","",50,null],[13,"BuiltInKernels","","",50,null],[13,"ImageMaxBufferSize","","",50,null],[13,"ImageMaxArraySize","","",50,null],[13,"ParentDevice","","",50,null],[13,"PartitionMaxSubDevices","","",50,null],[13,"PartitionProperties","","",50,null],[13,"PartitionAffinityDomain","","",50,null],[13,"PartitionType","","",50,null],[13,"ReferenceCount","","",50,null],[13,"PreferredInteropUserSync","","",50,null],[13,"PrintfBufferSize","","",50,null],[13,"ImagePitchAlignment","","",50,null],[13,"ImageBaseAddressAlignment","","",50,null],[4,"DeviceMemCacheType","","cl_mem_cache_type",null,null],[13,"None","","",51,null],[13,"ReadOnlyCache","","",51,null],[13,"ReadWriteCache","","",51,null],[4,"DeviceLocalMemType","","cl_device_local_mem_type",null,null],[13,"None","","",52,null],[13,"Local","","",52,null],[13,"Global","","",52,null],[4,"ContextInfo","","cl_context_info",null,null],[13,"ReferenceCount","","",53,null],[13,"Devices","","",53,null],[13,"Properties","","",53,null],[13,"NumDevices","","",53,null],[4,"ContextProperty","","cl_context_info + cl_context_properties",null,null],[13,"Platform","","",54,null],[13,"InteropUserSync","","",54,null],[13,"D3d10DeviceKhr","","",54,null],[13,"GlContextKhr","","",54,null],[13,"EglDisplayKhr","","",54,null],[13,"GlxDisplayKhr","","",54,null],[13,"CglSharegroupKhr","","",54,null],[13,"WglHdcKhr","","",54,null],[13,"AdapterD3d9Khr","","",54,null],[13,"AdapterD3d9exKhr","","",54,null],[13,"AdapterDxvaKhr","","",54,null],[13,"D3d11DeviceKhr","","",54,null],[4,"ContextInfoOrPropertiesPointerType","","cl_context_info + cl_context_properties",null,null],[13,"Platform","","",55,null],[13,"InteropUserSync","","",55,null],[4,"DevicePartitionProperty","","[INCOMPLETE] cl_device_partition_property",null,null],[13,"Equally","","",56,null],[13,"ByCounts","","",56,null],[13,"ByCountsListEnd","","",56,null],[13,"ByAffinityDomain","","",56,null],[4,"CommandQueueInfo","","cl_command_queue_info",null,null],[13,"Context","","",57,null],[13,"Device","","",57,null],[13,"ReferenceCount","","",57,null],[13,"Properties","","",57,null],[4,"ChannelType","","cl_channel_type",null,null],[13,"SnormInt8","","",58,null],[13,"SnormInt16","","",58,null],[13,"UnormInt8","","",58,null],[13,"UnormInt16","","",58,null],[13,"UnormShort565","","",58,null],[13,"UnormShort555","","",58,null],[13,"UnormInt101010","","",58,null],[13,"SignedInt8","","",58,null],[13,"SignedInt16","","",58,null],[13,"SignedInt32","","",58,null],[13,"UnsignedInt8","","",58,null],[13,"UnsignedInt16","","",58,null],[13,"UnsignedInt32","","",58,null],[13,"HalfFloat","","",58,null],[13,"Float","","",58,null],[13,"UnormInt24","","",58,null],[4,"MemObjectType","","cl_mem_object_type",null,null],[13,"Buffer","","",59,null],[13,"Image2d","","",59,null],[13,"Image3d","","",59,null],[13,"Image2dArray","","",59,null],[13,"Image1d","","",59,null],[13,"Image1dArray","","",59,null],[13,"Image1dBuffer","","",59,null],[4,"MemInfo","","cl_mem_info",null,null],[13,"Type","","",60,null],[13,"Flags","","",60,null],[13,"Size","","",60,null],[13,"HostPtr","","",60,null],[13,"MapCount","","",60,null],[13,"ReferenceCount","","",60,null],[13,"Context","","",60,null],[13,"AssociatedMemobject","","",60,null],[13,"Offset","","",60,null],[4,"ImageInfo","","cl_image_info",null,null],[13,"Format","","",61,null],[13,"ElementSize","","",61,null],[13,"RowPitch","","",61,null],[13,"SlicePitch","","",61,null],[13,"Width","","",61,null],[13,"Height","","",61,null],[13,"Depth","","",61,null],[13,"ArraySize","","",61,null],[13,"Buffer","","",61,null],[13,"NumMipLevels","","",61,null],[13,"NumSamples","","",61,null],[4,"AddressingMode","","cl_addressing_mode",null,null],[13,"None","","",62,null],[13,"ClampToEdge","","",62,null],[13,"Clamp","","",62,null],[13,"Repeat","","",62,null],[13,"MirroredRepeat","","",62,null],[4,"FilterMode","","cl_filter_mode",null,null],[13,"Nearest","","",63,null],[13,"Linear","","",63,null],[4,"SamplerInfo","","cl_sampler_info",null,null],[13,"ReferenceCount","","",64,null],[13,"Context","","",64,null],[13,"NormalizedCoords","","",64,null],[13,"AddressingMode","","",64,null],[13,"FilterMode","","",64,null],[4,"ProgramInfo","","cl_program_info",null,null],[13,"ReferenceCount","","",65,null],[13,"Context","","",65,null],[13,"NumDevices","","",65,null],[13,"Devices","","",65,null],[13,"Source","","",65,null],[13,"BinarySizes","","",65,null],[13,"Binaries","","",65,null],[13,"NumKernels","","",65,null],[13,"KernelNames","","",65,null],[4,"ProgramBuildInfo","","cl_program_build_info",null,null],[13,"BuildStatus","","",66,null],[13,"BuildOptions","","",66,null],[13,"BuildLog","","",66,null],[13,"BinaryType","","",66,null],[4,"ProgramBuildStatus","","cl_build_status",null,null],[13,"Success","","",67,null],[13,"None","","",67,null],[13,"Error","","",67,null],[13,"InProgress","","",67,null],[4,"KernelInfo","","cl_kernel_info",null,null],[13,"FunctionName","","",68,null],[13,"NumArgs","","",68,null],[13,"ReferenceCount","","",68,null],[13,"Context","","",68,null],[13,"Program","","",68,null],[13,"Attributes","","",68,null],[4,"KernelArgInfo","","cl_kernel_arg_info",null,null],[13,"AddressQualifier","","",69,null],[13,"AccessQualifier","","",69,null],[13,"TypeName","","",69,null],[13,"TypeQualifier","","",69,null],[13,"Name","","",69,null],[4,"KernelArgAddressQualifier","","cl_kernel_arg_address_qualifier",null,null],[13,"Global","","",70,null],[13,"Local","","",70,null],[13,"Constant","","",70,null],[13,"Private","","",70,null],[4,"KernelArgAccessQualifier","","cl_kernel_arg_access_qualifier",null,null],[13,"ReadOnly","","",71,null],[13,"WriteOnly","","",71,null],[13,"ReadWrite","","",71,null],[13,"None","","",71,null],[4,"KernelWorkGroupInfo","","cl_kernel_work_group_info",null,null],[13,"WorkGroupSize","","",72,null],[13,"CompileWorkGroupSize","","",72,null],[13,"LocalMemSize","","",72,null],[13,"PreferredWorkGroupSizeMultiple","","",72,null],[13,"PrivateMemSize","","",72,null],[13,"GlobalWorkSize","","",72,null],[4,"EventInfo","","cl_event_info",null,null],[13,"CommandQueue","","",73,null],[13,"CommandType","","",73,null],[13,"ReferenceCount","","",73,null],[13,"CommandExecutionStatus","","",73,null],[13,"Context","","",73,null],[4,"CommandType","","cl_command_type",null,null],[13,"NdrangeKernel","","",74,null],[13,"Task","","",74,null],[13,"NativeKernel","","",74,null],[13,"ReadBuffer","","",74,null],[13,"WriteBuffer","","",74,null],[13,"CopyBuffer","","",74,null],[13,"ReadImage","","",74,null],[13,"WriteImage","","",74,null],[13,"CopyImage","","",74,null],[13,"CopyImageToBuffer","","",74,null],[13,"CopyBufferToImage","","",74,null],[13,"MapBuffer","","",74,null],[13,"MapImage","","",74,null],[13,"UnmapMemObject","","",74,null],[13,"Marker","","",74,null],[13,"AcquireGlObjects","","",74,null],[13,"ReleaseGlObjects","","",74,null],[13,"ReadBufferRect","","",74,null],[13,"WriteBufferRect","","",74,null],[13,"CopyBufferRect","","",74,null],[13,"User","","",74,null],[13,"Barrier","","",74,null],[13,"MigrateMemObjects","","",74,null],[13,"FillBuffer","","",74,null],[13,"FillImage","","",74,null],[4,"CommandExecutionStatus","","command execution status",null,null],[13,"Complete","","",75,null],[13,"Running","","",75,null],[13,"Submitted","","",75,null],[13,"Queued","","",75,null],[4,"BufferCreateType","","cl_buffer_create_type",null,null],[13,"Region","","",76,null],[13,"__DUMMY","","",76,null],[4,"ProfilingInfo","","cl_profiling_info",null,null],[13,"Queued","","",77,null],[13,"Submit","","",77,null],[13,"Start","","",77,null],[13,"End","","",77,null],[3,"ArgVal","","A reference to a kernel argument value.",null,null],[4,"ContextPropertyValue","","",null,null],[13,"Platform","","",78,null],[13,"InteropUserSync","","",78,null],[13,"D3d10DeviceKhr","","",78,null],[13,"GlContextKhr","","",78,null],[13,"EglDisplayKhr","","",78,null],[13,"GlxDisplayKhr","","",78,null],[13,"CglSharegroupKhr","","",78,null],[13,"WglHdcKhr","","",78,null],[13,"AdapterD3d9Khr","","",78,null],[13,"AdapterD3d9exKhr","","",78,null],[13,"AdapterDxvaKhr","","",78,null],[13,"D3d11DeviceKhr","","",78,null],[4,"PlatformInfoResult","","Platform info result.",null,null],[13,"Profile","","",79,null],[13,"Version","","",79,null],[13,"Name","","",79,null],[13,"Vendor","","",79,null],[13,"Extensions","","",79,null],[4,"DeviceInfoResult","","A device info result.",null,null],[13,"Type","","",80,null],[13,"VendorId","","",80,null],[13,"MaxComputeUnits","","",80,null],[13,"MaxWorkItemDimensions","","",80,null],[13,"MaxWorkGroupSize","","",80,null],[13,"MaxWorkItemSizes","","",80,null],[13,"PreferredVectorWidthChar","","",80,null],[13,"PreferredVectorWidthShort","","",80,null],[13,"PreferredVectorWidthInt","","",80,null],[13,"PreferredVectorWidthLong","","",80,null],[13,"PreferredVectorWidthFloat","","",80,null],[13,"PreferredVectorWidthDouble","","",80,null],[13,"MaxClockFrequency","","",80,null],[13,"AddressBits","","",80,null],[13,"MaxReadImageArgs","","",80,null],[13,"MaxWriteImageArgs","","",80,null],[13,"MaxMemAllocSize","","",80,null],[13,"Image2dMaxWidth","","",80,null],[13,"Image2dMaxHeight","","",80,null],[13,"Image3dMaxWidth","","",80,null],[13,"Image3dMaxHeight","","",80,null],[13,"Image3dMaxDepth","","",80,null],[13,"ImageSupport","","",80,null],[13,"MaxParameterSize","","",80,null],[13,"MaxSamplers","","",80,null],[13,"MemBaseAddrAlign","","",80,null],[13,"MinDataTypeAlignSize","","",80,null],[13,"SingleFpConfig","","",80,null],[13,"GlobalMemCacheType","","",80,null],[13,"GlobalMemCachelineSize","","",80,null],[13,"GlobalMemCacheSize","","",80,null],[13,"GlobalMemSize","","",80,null],[13,"MaxConstantBufferSize","","",80,null],[13,"MaxConstantArgs","","",80,null],[13,"LocalMemType","","",80,null],[13,"LocalMemSize","","",80,null],[13,"ErrorCorrectionSupport","","",80,null],[13,"ProfilingTimerResolution","","",80,null],[13,"EndianLittle","","",80,null],[13,"Available","","",80,null],[13,"CompilerAvailable","","",80,null],[13,"ExecutionCapabilities","","",80,null],[13,"QueueProperties","","",80,null],[13,"Name","","",80,null],[13,"Vendor","","",80,null],[13,"DriverVersion","","",80,null],[13,"Profile","","",80,null],[13,"Version","","",80,null],[13,"Extensions","","",80,null],[13,"Platform","","",80,null],[13,"DoubleFpConfig","","",80,null],[13,"HalfFpConfig","","",80,null],[13,"PreferredVectorWidthHalf","","",80,null],[13,"HostUnifiedMemory","","",80,null],[13,"NativeVectorWidthChar","","",80,null],[13,"NativeVectorWidthShort","","",80,null],[13,"NativeVectorWidthInt","","",80,null],[13,"NativeVectorWidthLong","","",80,null],[13,"NativeVectorWidthFloat","","",80,null],[13,"NativeVectorWidthDouble","","",80,null],[13,"NativeVectorWidthHalf","","",80,null],[13,"OpenclCVersion","","",80,null],[13,"LinkerAvailable","","",80,null],[13,"BuiltInKernels","","",80,null],[13,"ImageMaxBufferSize","","",80,null],[13,"ImageMaxArraySize","","",80,null],[13,"ParentDevice","","",80,null],[13,"PartitionMaxSubDevices","","",80,null],[13,"PartitionProperties","","",80,null],[13,"PartitionAffinityDomain","","",80,null],[13,"PartitionType","","",80,null],[13,"ReferenceCount","","",80,null],[13,"PreferredInteropUserSync","","",80,null],[13,"PrintfBufferSize","","",80,null],[13,"ImagePitchAlignment","","",80,null],[13,"ImageBaseAddressAlignment","","",80,null],[4,"ContextInfoResult","","A context info result.",null,null],[13,"ReferenceCount","","",81,null],[13,"Devices","","",81,null],[13,"Properties","","",81,null],[13,"NumDevices","","",81,null],[4,"CommandQueueInfoResult","","A command queue info result.",null,null],[13,"Context","","",82,null],[13,"Device","","",82,null],[13,"ReferenceCount","","",82,null],[13,"Properties","","",82,null],[4,"MemInfoResult","","A mem info result.",null,null],[13,"Type","","",83,null],[13,"Flags","","",83,null],[13,"Size","","",83,null],[13,"HostPtr","","",83,null],[13,"MapCount","","",83,null],[13,"ReferenceCount","","",83,null],[13,"Context","","",83,null],[13,"AssociatedMemobject","","",83,null],[13,"Offset","","",83,null],[4,"ImageInfoResult","","An image info result.",null,null],[13,"Format","","",84,null],[13,"ElementSize","","",84,null],[13,"RowPitch","","",84,null],[13,"SlicePitch","","",84,null],[13,"Width","","",84,null],[13,"Height","","",84,null],[13,"Depth","","",84,null],[13,"ArraySize","","",84,null],[13,"Buffer","","",84,null],[13,"NumMipLevels","","",84,null],[13,"NumSamples","","",84,null],[4,"SamplerInfoResult","","A sampler info result.",null,null],[13,"ReferenceCount","","",85,null],[13,"Context","","",85,null],[13,"NormalizedCoords","","",85,null],[13,"AddressingMode","","",85,null],[13,"FilterMode","","",85,null],[4,"ProgramInfoResult","","A program info result.",null,null],[13,"ReferenceCount","","",86,null],[13,"Context","","",86,null],[13,"NumDevices","","",86,null],[13,"Devices","","Contains a `Vec` containing the `DeviceId` associated with each device.",86,null],[13,"Source","","",86,null],[13,"BinarySizes","","Contains a `Vec` containing the size of the binary associated with each device.",86,null],[13,"Binaries","","Contains a `Vec` containing the bytes of the binary associated with each device.",86,null],[13,"NumKernels","","",86,null],[13,"KernelNames","","",86,null],[4,"ProgramBuildInfoResult","","A program build info result.",null,null],[13,"BuildStatus","","",87,null],[13,"BuildOptions","","",87,null],[13,"BuildLog","","",87,null],[13,"BinaryType","","",87,null],[4,"KernelInfoResult","","A kernel info result.",null,null],[13,"FunctionName","","",88,null],[13,"NumArgs","","",88,null],[13,"ReferenceCount","","",88,null],[13,"Context","","",88,null],[13,"Program","","",88,null],[13,"Attributes","","",88,null],[4,"KernelArgInfoResult","","A kernel arg info result.",null,null],[13,"AddressQualifier","","",89,null],[13,"AccessQualifier","","",89,null],[13,"TypeName","","",89,null],[13,"TypeQualifier","","",89,null],[13,"Name","","",89,null],[4,"KernelWorkGroupInfoResult","","A kernel work group info result.",null,null],[13,"WorkGroupSize","","",90,null],[13,"CompileWorkGroupSize","","",90,null],[13,"LocalMemSize","","",90,null],[13,"PreferredWorkGroupSizeMultiple","","",90,null],[13,"PrivateMemSize","","",90,null],[13,"GlobalWorkSize","","",90,null],[13,"Empty","","",90,null],[13,"Unavailable","","",90,null],[13,"CustomBuiltinOnly","","",90,null],[4,"EventInfoResult","","An event info result.",null,null],[13,"CommandQueue","","",91,null],[13,"CommandType","","",91,null],[13,"ReferenceCount","","",91,null],[13,"CommandExecutionStatus","","",91,null],[13,"Context","","",91,null],[4,"ProfilingInfoResult","","A profiling info result.",null,null],[13,"Queued","","",92,null],[13,"Submit","","",92,null],[13,"Start","","",92,null],[13,"End","","",92,null],[4,"Status","","The status of an OpenCL API call. Used for returning success/error codes.",null,null],[13,"CL_SUCCESS","","",93,null],[13,"CL_DEVICE_NOT_FOUND","","",93,null],[13,"CL_DEVICE_NOT_AVAILABLE","","",93,null],[13,"CL_COMPILER_NOT_AVAILABLE","","",93,null],[13,"CL_MEM_OBJECT_ALLOCATION_FAILURE","","",93,null],[13,"CL_OUT_OF_RESOURCES","","",93,null],[13,"CL_OUT_OF_HOST_MEMORY","","",93,null],[13,"CL_PROFILING_INFO_NOT_AVAILABLE","","",93,null],[13,"CL_MEM_COPY_OVERLAP","","",93,null],[13,"CL_IMAGE_FORMAT_MISMATCH","","",93,null],[13,"CL_IMAGE_FORMAT_NOT_SUPPORTED","","",93,null],[13,"CL_BUILD_PROGRAM_FAILURE","","",93,null],[13,"CL_MAP_FAILURE","","",93,null],[13,"CL_MISALIGNED_SUB_BUFFER_OFFSET","","",93,null],[13,"CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST","","",93,null],[13,"CL_COMPILE_PROGRAM_FAILURE","","",93,null],[13,"CL_LINKER_NOT_AVAILABLE","","",93,null],[13,"CL_LINK_PROGRAM_FAILURE","","",93,null],[13,"CL_DEVICE_PARTITION_FAILED","","",93,null],[13,"CL_KERNEL_ARG_INFO_NOT_AVAILABLE","","",93,null],[13,"CL_INVALID_VALUE","","",93,null],[13,"CL_INVALID_DEVICE_TYPE","","",93,null],[13,"CL_INVALID_PLATFORM","","",93,null],[13,"CL_INVALID_DEVICE","","",93,null],[13,"CL_INVALID_CONTEXT","","",93,null],[13,"CL_INVALID_QUEUE_PROPERTIES","","",93,null],[13,"CL_INVALID_COMMAND_QUEUE","","",93,null],[13,"CL_INVALID_HOST_PTR","","",93,null],[13,"CL_INVALID_MEM_OBJECT","","",93,null],[13,"CL_INVALID_IMAGE_FORMAT_DESCRIPTOR","","",93,null],[13,"CL_INVALID_IMAGE_SIZE","","",93,null],[13,"CL_INVALID_SAMPLER","","",93,null],[13,"CL_INVALID_BINARY","","",93,null],[13,"CL_INVALID_BUILD_OPTIONS","","",93,null],[13,"CL_INVALID_PROGRAM","","",93,null],[13,"CL_INVALID_PROGRAM_EXECUTABLE","","",93,null],[13,"CL_INVALID_KERNEL_NAME","","",93,null],[13,"CL_INVALID_KERNEL_DEFINITION","","",93,null],[13,"CL_INVALID_KERNEL","","",93,null],[13,"CL_INVALID_ARG_INDEX","","",93,null],[13,"CL_INVALID_ARG_VALUE","","",93,null],[13,"CL_INVALID_ARG_SIZE","","",93,null],[13,"CL_INVALID_KERNEL_ARGS","","",93,null],[13,"CL_INVALID_WORK_DIMENSION","","",93,null],[13,"CL_INVALID_WORK_GROUP_SIZE","","",93,null],[13,"CL_INVALID_WORK_ITEM_SIZE","","",93,null],[13,"CL_INVALID_GLOBAL_OFFSET","","",93,null],[13,"CL_INVALID_EVENT_WAIT_LIST","","",93,null],[13,"CL_INVALID_EVENT","","",93,null],[13,"CL_INVALID_OPERATION","","",93,null],[13,"CL_INVALID_GL_OBJECT","","",93,null],[13,"CL_INVALID_BUFFER_SIZE","","",93,null],[13,"CL_INVALID_MIP_LEVEL","","",93,null],[13,"CL_INVALID_GLOBAL_WORK_SIZE","","",93,null],[13,"CL_INVALID_PROPERTY","","",93,null],[13,"CL_INVALID_IMAGE_DESCRIPTOR","","",93,null],[13,"CL_INVALID_COMPILER_OPTIONS","","",93,null],[13,"CL_INVALID_LINKER_OPTIONS","","",93,null],[13,"CL_INVALID_DEVICE_PARTITION_COUNT","","",93,null],[13,"CL_INVALID_PIPE_SIZE","","",93,null],[13,"CL_INVALID_DEVICE_QUEUE","","",93,null],[13,"CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR","","",93,null],[13,"CL_PLATFORM_NOT_FOUND_KHR","","",93,null],[13,"CL_NV_INVALID_MEM_ACCESS","","",93,null],[4,"DeviceSpecifier","","Specifies [what boils down to] a list of devices.",null,null],[13,"All","","",39,null],[13,"First","","",39,null],[13,"Single","","",39,null],[13,"List","","",39,null],[13,"Indices","","",39,null],[13,"WrappingIndices","","",39,null],[13,"TypeFlags","","",39,null],[4,"BufferCmdKind","","The type of operation to be performed by a command.",null,null],[13,"Unspecified","","",40,null],[13,"Read","","",40,null],[13,"Write","","",40,null],[13,"Map","","",40,null],[13,"Copy","","",40,null],[12,"dst_buffer","ocl::enums::BufferCmdKind","",40,null],[12,"dst_offset","","",40,null],[12,"len","","",40,null],[13,"Fill","ocl::enums","",40,null],[12,"pattern","ocl::enums::BufferCmdKind","",40,null],[12,"len","","",40,null],[13,"CopyToImage","ocl::enums","",40,null],[12,"image","ocl::enums::BufferCmdKind","",40,null],[12,"dst_origin","","",40,null],[12,"region","","",40,null],[13,"GLAcquire","ocl::enums","",40,null],[13,"GLRelease","","",40,null],[4,"BufferCmdDataShape","","The 'shape' of the data to be processed, whether one or multi-dimensional.",null,null],[13,"Lin","","",41,null],[12,"offset","ocl::enums::BufferCmdDataShape","",41,null],[13,"Rect","ocl::enums","",41,null],[12,"src_origin","ocl::enums::BufferCmdDataShape","",41,null],[12,"dst_origin","","",41,null],[12,"region","","",41,null],[12,"src_row_pitch_bytes","","",41,null],[12,"src_slc_pitch_bytes","","",41,null],[12,"dst_row_pitch_bytes","","",41,null],[12,"dst_slc_pitch_bytes","","",41,null],[6,"FutureReadGuard","ocl","",null,null],[6,"FutureWriteGuard","","",null,null],[11,"api_status","","Returns the error status code for `Status` variants.",94,{"i":[{"n":"self"}],"o":{"g":["status"],"n":"option"}}],[11,"kind","","Returns the error variant and contents.",94,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"cause","","Returns the immediate cause of this error (e.g. the next error in the chain).",94,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"fmt","ocl::flags","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","ocl","",94,{"i":[{"n":"emptyinforesulterror"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"apiwrappererror"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"g":["errorkind"],"n":"context"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"nulerror"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"string"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"intostringerror"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"str"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"versionlowerror"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"utilerror"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"fromutf8error"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"programbuilderror"}],"o":{"n":"error"}}],[11,"from","","",94,{"i":[{"n":"apierror"}],"o":{"n":"error"}}],[11,"fmt","ocl::enums","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"devicepartitionproperty"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"kernelargaddressqualifier"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"buffercreatetype"}}],[11,"clone","ocl::flags","",98,{"i":[{"n":"self"}],"o":{"n":"devicefpconfig"}}],[11,"clone","ocl::enums","",51,{"i":[{"n":"self"}],"o":{"n":"devicememcachetype"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"imagechannelorder"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"kernelworkgroupinfo"}}],[11,"clone","ocl::builders","",105,{"i":[{"n":"self"}],"o":{"n":"contextproperties"}}],[11,"clone","ocl::enums","",60,{"i":[{"n":"self"}],"o":{"n":"meminfo"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"eventinfo"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"kernelargaccessqualifier"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"commandexecutionstatus"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"argval"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"polling"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"addressingmode"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"contextpropertyvalue"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"profilinginfo"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"samplerinfo"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"programbuildinfo"}}],[11,"clone","ocl::flags","",96,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"clone","ocl::enums","",61,{"i":[{"n":"self"}],"o":{"n":"imageinfo"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"cbool"}}],[11,"clone","ocl::flags","",100,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"clone","ocl::enums","",93,{"i":[{"n":"self"}],"o":{"n":"status"}}],[11,"clone","ocl::flags","",97,{"i":[{"n":"self"}],"o":{"n":"deviceexeccapabilities"}}],[11,"clone","ocl::enums","",46,{"i":[{"n":"self"}],"o":{"n":"imagechanneldatatype"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"channeltype"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"kernelarginfo"}}],[11,"clone","ocl::builders","",37,{"i":[{"n":"self"}],"o":{"n":"imagedescriptor"}}],[11,"clone","ocl::enums","",53,{"i":[{"n":"self"}],"o":{"n":"contextinfo"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"contextproperty"}}],[11,"clone","ocl::flags","",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"clone","ocl::enums","",50,{"i":[{"n":"self"}],"o":{"n":"deviceinfo"}}],[11,"clone","ocl::flags","",102,{"i":[{"n":"self"}],"o":{"n":"programbinarytype"}}],[11,"clone","ocl::enums","",59,{"i":[{"n":"self"}],"o":{"n":"memobjecttype"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"commandtype"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"platforminfo"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"filtermode"}}],[11,"clone","ocl::flags","",101,{"i":[{"n":"self"}],"o":{"n":"commandqueueproperties"}}],[11,"clone","ocl::enums","",67,{"i":[{"n":"self"}],"o":{"n":"programbuildstatus"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"commandqueueinfo"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"devicelocalmemtype"}}],[11,"clone","ocl::flags","",99,{"i":[{"n":"self"}],"o":{"n":"deviceaffinitydomain"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"kernelargtypequalifier"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"memmigrationflags"}}],[11,"clone","ocl::enums","",65,{"i":[{"n":"self"}],"o":{"n":"programinfo"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"contextinfoorpropertiespointertype"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"kernelinfo"}}],[11,"clone","ocl::builders","",36,{"i":[{"n":"self"}],"o":{"n":"imageformat"}}],[11,"bitor","ocl::flags","Returns the union of the two sets of flags.",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"memmigrationflags"}}],[11,"bitor","","Returns the union of the two sets of flags.",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"devicefpconfig"}}],[11,"bitor","","Returns the union of the two sets of flags.",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"deviceexeccapabilities"}}],[11,"bitor","","Returns the union of the two sets of flags.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"bitor","","Returns the union of the two sets of flags.",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"memflags"}}],[11,"bitor","","Returns the union of the two sets of flags.",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"kernelargtypequalifier"}}],[11,"bitor","","Returns the union of the two sets of flags.",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"deviceaffinitydomain"}}],[11,"bitor","","Returns the union of the two sets of flags.",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"commandqueueproperties"}}],[11,"bitor","","Returns the union of the two sets of flags.",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"devicetype"}}],[11,"bitor","","Returns the union of the two sets of flags.",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"programbinarytype"}}],[11,"cmp","","",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"ordering"}}],[11,"cmp","","",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"ordering"}}],[11,"cmp","","",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"ordering"}}],[11,"cmp","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"ordering"}}],[11,"cmp","","",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"ordering"}}],[11,"cmp","","",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"ordering"}}],[11,"cmp","","",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"ordering"}}],[11,"cmp","","",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"ordering"}}],[11,"cmp","","",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"ordering"}}],[11,"cmp","","",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"ordering"}}],[11,"from_iter","","",104,{"i":[{"n":"t"}],"o":{"n":"kernelargtypequalifier"}}],[11,"from_iter","","",99,{"i":[{"n":"t"}],"o":{"n":"deviceaffinitydomain"}}],[11,"from_iter","","",101,{"i":[{"n":"t"}],"o":{"n":"commandqueueproperties"}}],[11,"from_iter","","",98,{"i":[{"n":"t"}],"o":{"n":"devicefpconfig"}}],[11,"from_iter","","",102,{"i":[{"n":"t"}],"o":{"n":"programbinarytype"}}],[11,"from_iter","","",97,{"i":[{"n":"t"}],"o":{"n":"deviceexeccapabilities"}}],[11,"from_iter","","",100,{"i":[{"n":"t"}],"o":{"n":"devicetype"}}],[11,"from_iter","","",95,{"i":[{"n":"t"}],"o":{"n":"memflags"}}],[11,"from_iter","","",103,{"i":[{"n":"t"}],"o":{"n":"memmigrationflags"}}],[11,"from_iter","","",96,{"i":[{"n":"t"}],"o":{"n":"mapflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"deviceexeccapabilities"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"programbinarytype"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"devicefpconfig"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"memmigrationflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"commandqueueproperties"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"devicetype"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"kernelargtypequalifier"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"memflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"deviceaffinitydomain"}}],[11,"sub_assign","","Disables all flags enabled in the set.",104,null],[11,"sub_assign","","Disables all flags enabled in the set.",102,null],[11,"sub_assign","","Disables all flags enabled in the set.",95,null],[11,"sub_assign","","Disables all flags enabled in the set.",97,null],[11,"sub_assign","","Disables all flags enabled in the set.",99,null],[11,"sub_assign","","Disables all flags enabled in the set.",103,null],[11,"sub_assign","","Disables all flags enabled in the set.",96,null],[11,"sub_assign","","Disables all flags enabled in the set.",101,null],[11,"sub_assign","","Disables all flags enabled in the set.",98,null],[11,"sub_assign","","Disables all flags enabled in the set.",100,null],[11,"not","","Returns the complement of this set of flags.",97,{"i":[{"n":"self"}],"o":{"n":"deviceexeccapabilities"}}],[11,"not","","Returns the complement of this set of flags.",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"not","","Returns the complement of this set of flags.",98,{"i":[{"n":"self"}],"o":{"n":"devicefpconfig"}}],[11,"not","","Returns the complement of this set of flags.",100,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"not","","Returns the complement of this set of flags.",103,{"i":[{"n":"self"}],"o":{"n":"memmigrationflags"}}],[11,"not","","Returns the complement of this set of flags.",101,{"i":[{"n":"self"}],"o":{"n":"commandqueueproperties"}}],[11,"not","","Returns the complement of this set of flags.",99,{"i":[{"n":"self"}],"o":{"n":"deviceaffinitydomain"}}],[11,"not","","Returns the complement of this set of flags.",96,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"not","","Returns the complement of this set of flags.",102,{"i":[{"n":"self"}],"o":{"n":"programbinarytype"}}],[11,"not","","Returns the complement of this set of flags.",104,{"i":[{"n":"self"}],"o":{"n":"kernelargtypequalifier"}}],[11,"cause","ocl","",94,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","",94,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"fmt","ocl::flags","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub","","Returns the set difference of the two sets of flags.",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"deviceexeccapabilities"}}],[11,"sub","","Returns the set difference of the two sets of flags.",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"commandqueueproperties"}}],[11,"sub","","Returns the set difference of the two sets of flags.",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"memflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"memmigrationflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"kernelargtypequalifier"}}],[11,"sub","","Returns the set difference of the two sets of flags.",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"deviceaffinitydomain"}}],[11,"sub","","Returns the set difference of the two sets of flags.",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"devicefpconfig"}}],[11,"sub","","Returns the set difference of the two sets of flags.",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"programbinarytype"}}],[11,"sub","","Returns the set difference of the two sets of flags.",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"devicetype"}}],[11,"hash","","",96,null],[11,"hash","ocl::enums","",73,null],[11,"hash","","",46,null],[11,"hash","","",65,null],[11,"hash","ocl::flags","",102,null],[11,"hash","ocl::enums","",71,null],[11,"hash","ocl::flags","",100,null],[11,"hash","","",103,null],[11,"hash","ocl::enums","",76,null],[11,"hash","ocl::flags","",99,null],[11,"hash","ocl::enums","",67,null],[11,"hash","ocl::flags","",104,null],[11,"hash","ocl::enums","",64,null],[11,"hash","","",45,null],[11,"hash","ocl::flags","",98,null],[11,"hash","ocl::enums","",49,null],[11,"hash","","",53,null],[11,"hash","","",51,null],[11,"hash","ocl::flags","",95,null],[11,"hash","ocl::enums","",66,null],[11,"hash","","",77,null],[11,"hash","","",75,null],[11,"hash","","",55,null],[11,"hash","","",62,null],[11,"hash","","",70,null],[11,"hash","","",56,null],[11,"hash","","",58,null],[11,"hash","","",54,null],[11,"hash","","",93,null],[11,"hash","","",59,null],[11,"hash","","",69,null],[11,"hash","","",60,null],[11,"hash","","",61,null],[11,"hash","","",52,null],[11,"hash","","",68,null],[11,"hash","","",57,null],[11,"hash","","",72,null],[11,"hash","","",74,null],[11,"hash","","",47,null],[11,"hash","","",50,null],[11,"hash","ocl::flags","",101,null],[11,"hash","ocl::enums","",63,null],[11,"hash","ocl::flags","",97,null],[11,"hash","ocl::enums","",48,null],[11,"bitor_assign","ocl::flags","Adds the set of flags.",96,null],[11,"bitor_assign","","Adds the set of flags.",102,null],[11,"bitor_assign","","Adds the set of flags.",99,null],[11,"bitor_assign","","Adds the set of flags.",101,null],[11,"bitor_assign","","Adds the set of flags.",104,null],[11,"bitor_assign","","Adds the set of flags.",103,null],[11,"bitor_assign","","Adds the set of flags.",98,null],[11,"bitor_assign","","Adds the set of flags.",97,null],[11,"bitor_assign","","Adds the set of flags.",100,null],[11,"bitor_assign","","Adds the set of flags.",95,null],[11,"eq","ocl::enums","",93,{"i":[{"n":"self"},{"n":"status"}],"o":{"n":"bool"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"filtermode"}],"o":{"n":"bool"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"deviceinfo"}],"o":{"n":"bool"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"platforminfo"}],"o":{"n":"bool"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"commandexecutionstatus"}],"o":{"n":"bool"}}],[11,"eq","ocl::flags","",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"ne","","",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"eq","ocl::enums","",57,{"i":[{"n":"self"},{"n":"commandqueueinfo"}],"o":{"n":"bool"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"imagechanneldatatype"}],"o":{"n":"bool"}}],[11,"eq","ocl::flags","",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"ne","","",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"eq","","",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"ne","","",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"eq","ocl::enums","",51,{"i":[{"n":"self"},{"n":"devicememcachetype"}],"o":{"n":"bool"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"programbuildinfo"}],"o":{"n":"bool"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"imagechannelorder"}],"o":{"n":"bool"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"profilinginfo"}],"o":{"n":"bool"}}],[11,"eq","ocl::flags","",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"ne","","",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"eq","ocl::enums","",64,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"contextproperty"}],"o":{"n":"bool"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"devicepartitionproperty"}],"o":{"n":"bool"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"kernelinfo"}],"o":{"n":"bool"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"eventinfo"}],"o":{"n":"bool"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"programbuildstatus"}],"o":{"n":"bool"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"devicelocalmemtype"}],"o":{"n":"bool"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"kernelarginfo"}],"o":{"n":"bool"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"n":"bool"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"meminfo"}],"o":{"n":"bool"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"imageinfo"}],"o":{"n":"bool"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"contextinfo"}],"o":{"n":"bool"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"n":"bool"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"commandtype"}],"o":{"n":"bool"}}],[11,"eq","ocl::flags","",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"ne","","",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"eq","","",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"ne","","",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"eq","ocl::enums","",70,{"i":[{"n":"self"},{"n":"kernelargaddressqualifier"}],"o":{"n":"bool"}}],[11,"eq","ocl::flags","",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"ne","","",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"eq","ocl::enums","",62,{"i":[{"n":"self"},{"n":"addressingmode"}],"o":{"n":"bool"}}],[11,"eq","ocl::flags","",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"ne","","",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"eq","ocl::enums","",72,{"i":[{"n":"self"},{"n":"kernelworkgroupinfo"}],"o":{"n":"bool"}}],[11,"eq","ocl::flags","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"ne","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"eq","ocl::enums","",48,{"i":[{"n":"self"},{"n":"polling"}],"o":{"n":"bool"}}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"contextinfoorpropertiespointertype"}],"o":{"n":"bool"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"buffercreatetype"}],"o":{"n":"bool"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"cbool"}],"o":{"n":"bool"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"memobjecttype"}],"o":{"n":"bool"}}],[11,"eq","ocl::flags","",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"ne","","",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"eq","ocl::enums","",71,{"i":[{"n":"self"},{"n":"kernelargaccessqualifier"}],"o":{"n":"bool"}}],[11,"fmt","ocl::flags","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","","",101,{"o":{"n":"commandqueueproperties"}}],[11,"default","","",96,{"o":{"n":"mapflags"}}],[11,"default","","",95,{"o":{"n":"memflags"}}],[11,"default","","",100,{"o":{"n":"devicetype"}}],[11,"fmt","ocl::enums","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::flags","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::builders","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::flags","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::builders","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::flags","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::flags","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::flags","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::flags","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::builders","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::flags","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::flags","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::flags","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","ocl::enums","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitand_assign","ocl::flags","Disables all flags disabled in the set.",95,null],[11,"bitand_assign","","Disables all flags disabled in the set.",96,null],[11,"bitand_assign","","Disables all flags disabled in the set.",103,null],[11,"bitand_assign","","Disables all flags disabled in the set.",102,null],[11,"bitand_assign","","Disables all flags disabled in the set.",104,null],[11,"bitand_assign","","Disables all flags disabled in the set.",97,null],[11,"bitand_assign","","Disables all flags disabled in the set.",101,null],[11,"bitand_assign","","Disables all flags disabled in the set.",100,null],[11,"bitand_assign","","Disables all flags disabled in the set.",99,null],[11,"bitand_assign","","Disables all flags disabled in the set.",98,null],[11,"extend","","",99,null],[11,"extend","","",96,null],[11,"extend","","",97,null],[11,"extend","","",103,null],[11,"extend","","",104,null],[11,"extend","","",100,null],[11,"extend","","",101,null],[11,"extend","","",95,null],[11,"extend","","",102,null],[11,"extend","","",98,null],[11,"bitxor_assign","","Toggles the set of flags.",95,null],[11,"bitxor_assign","","Toggles the set of flags.",96,null],[11,"bitxor_assign","","Toggles the set of flags.",104,null],[11,"bitxor_assign","","Toggles the set of flags.",103,null],[11,"bitxor_assign","","Toggles the set of flags.",99,null],[11,"bitxor_assign","","Toggles the set of flags.",100,null],[11,"bitxor_assign","","Toggles the set of flags.",97,null],[11,"bitxor_assign","","Toggles the set of flags.",101,null],[11,"bitxor_assign","","Toggles the set of flags.",102,null],[11,"bitxor_assign","","Toggles the set of flags.",98,null],[11,"from_i64","ocl::enums","",58,{"i":[{"n":"i64"}],"o":{"g":["channeltype"],"n":"option"}}],[11,"from_u64","","",58,{"i":[{"n":"u64"}],"o":{"g":["channeltype"],"n":"option"}}],[11,"from_i64","","",62,{"i":[{"n":"i64"}],"o":{"g":["addressingmode"],"n":"option"}}],[11,"from_u64","","",62,{"i":[{"n":"u64"}],"o":{"g":["addressingmode"],"n":"option"}}],[11,"from_i64","","",50,{"i":[{"n":"i64"}],"o":{"g":["deviceinfo"],"n":"option"}}],[11,"from_u64","","",50,{"i":[{"n":"u64"}],"o":{"g":["deviceinfo"],"n":"option"}}],[11,"from_i64","","",75,{"i":[{"n":"i64"}],"o":{"g":["commandexecutionstatus"],"n":"option"}}],[11,"from_u64","","",75,{"i":[{"n":"u64"}],"o":{"g":["commandexecutionstatus"],"n":"option"}}],[11,"from_i64","","",55,{"i":[{"n":"i64"}],"o":{"g":["contextinfoorpropertiespointertype"],"n":"option"}}],[11,"from_u64","","",55,{"i":[{"n":"u64"}],"o":{"g":["contextinfoorpropertiespointertype"],"n":"option"}}],[11,"from_i64","","",64,{"i":[{"n":"i64"}],"o":{"g":["samplerinfo"],"n":"option"}}],[11,"from_u64","","",64,{"i":[{"n":"u64"}],"o":{"g":["samplerinfo"],"n":"option"}}],[11,"from_i64","","",49,{"i":[{"n":"i64"}],"o":{"g":["platforminfo"],"n":"option"}}],[11,"from_u64","","",49,{"i":[{"n":"u64"}],"o":{"g":["platforminfo"],"n":"option"}}],[11,"from_i64","","",59,{"i":[{"n":"i64"}],"o":{"g":["memobjecttype"],"n":"option"}}],[11,"from_u64","","",59,{"i":[{"n":"u64"}],"o":{"g":["memobjecttype"],"n":"option"}}],[11,"from_i64","","",74,{"i":[{"n":"i64"}],"o":{"g":["commandtype"],"n":"option"}}],[11,"from_u64","","",74,{"i":[{"n":"u64"}],"o":{"g":["commandtype"],"n":"option"}}],[11,"from_i64","","",46,{"i":[{"n":"i64"}],"o":{"g":["imagechanneldatatype"],"n":"option"}}],[11,"from_u64","","",46,{"i":[{"n":"u64"}],"o":{"g":["imagechanneldatatype"],"n":"option"}}],[11,"from_i64","","",67,{"i":[{"n":"i64"}],"o":{"g":["programbuildstatus"],"n":"option"}}],[11,"from_u64","","",67,{"i":[{"n":"u64"}],"o":{"g":["programbuildstatus"],"n":"option"}}],[11,"from_i64","","",61,{"i":[{"n":"i64"}],"o":{"g":["imageinfo"],"n":"option"}}],[11,"from_u64","","",61,{"i":[{"n":"u64"}],"o":{"g":["imageinfo"],"n":"option"}}],[11,"from_i64","","",93,{"i":[{"n":"i64"}],"o":{"g":["status"],"n":"option"}}],[11,"from_u64","","",93,{"i":[{"n":"u64"}],"o":{"g":["status"],"n":"option"}}],[11,"from_i64","","",63,{"i":[{"n":"i64"}],"o":{"g":["filtermode"],"n":"option"}}],[11,"from_u64","","",63,{"i":[{"n":"u64"}],"o":{"g":["filtermode"],"n":"option"}}],[11,"from_i64","","",56,{"i":[{"n":"i64"}],"o":{"g":["devicepartitionproperty"],"n":"option"}}],[11,"from_u64","","",56,{"i":[{"n":"u64"}],"o":{"g":["devicepartitionproperty"],"n":"option"}}],[11,"from_i64","","",65,{"i":[{"n":"i64"}],"o":{"g":["programinfo"],"n":"option"}}],[11,"from_u64","","",65,{"i":[{"n":"u64"}],"o":{"g":["programinfo"],"n":"option"}}],[11,"from_i64","","",52,{"i":[{"n":"i64"}],"o":{"g":["devicelocalmemtype"],"n":"option"}}],[11,"from_u64","","",52,{"i":[{"n":"u64"}],"o":{"g":["devicelocalmemtype"],"n":"option"}}],[11,"from_i64","","",57,{"i":[{"n":"i64"}],"o":{"g":["commandqueueinfo"],"n":"option"}}],[11,"from_u64","","",57,{"i":[{"n":"u64"}],"o":{"g":["commandqueueinfo"],"n":"option"}}],[11,"from_i64","","",77,{"i":[{"n":"i64"}],"o":{"g":["profilinginfo"],"n":"option"}}],[11,"from_u64","","",77,{"i":[{"n":"u64"}],"o":{"g":["profilinginfo"],"n":"option"}}],[11,"from_i64","","",54,{"i":[{"n":"i64"}],"o":{"g":["contextproperty"],"n":"option"}}],[11,"from_u64","","",54,{"i":[{"n":"u64"}],"o":{"g":["contextproperty"],"n":"option"}}],[11,"from_i64","","",53,{"i":[{"n":"i64"}],"o":{"g":["contextinfo"],"n":"option"}}],[11,"from_u64","","",53,{"i":[{"n":"u64"}],"o":{"g":["contextinfo"],"n":"option"}}],[11,"from_i64","","",69,{"i":[{"n":"i64"}],"o":{"g":["kernelarginfo"],"n":"option"}}],[11,"from_u64","","",69,{"i":[{"n":"u64"}],"o":{"g":["kernelarginfo"],"n":"option"}}],[11,"from_i64","","",47,{"i":[{"n":"i64"}],"o":{"g":["cbool"],"n":"option"}}],[11,"from_u64","","",47,{"i":[{"n":"u64"}],"o":{"g":["cbool"],"n":"option"}}],[11,"from_i64","","",73,{"i":[{"n":"i64"}],"o":{"g":["eventinfo"],"n":"option"}}],[11,"from_u64","","",73,{"i":[{"n":"u64"}],"o":{"g":["eventinfo"],"n":"option"}}],[11,"from_i64","","",45,{"i":[{"n":"i64"}],"o":{"g":["imagechannelorder"],"n":"option"}}],[11,"from_u64","","",45,{"i":[{"n":"u64"}],"o":{"g":["imagechannelorder"],"n":"option"}}],[11,"from_i64","","",60,{"i":[{"n":"i64"}],"o":{"g":["meminfo"],"n":"option"}}],[11,"from_u64","","",60,{"i":[{"n":"u64"}],"o":{"g":["meminfo"],"n":"option"}}],[11,"from_i64","","",70,{"i":[{"n":"i64"}],"o":{"g":["kernelargaddressqualifier"],"n":"option"}}],[11,"from_u64","","",70,{"i":[{"n":"u64"}],"o":{"g":["kernelargaddressqualifier"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["polling"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["polling"],"n":"option"}}],[11,"from_i64","","",71,{"i":[{"n":"i64"}],"o":{"g":["kernelargaccessqualifier"],"n":"option"}}],[11,"from_u64","","",71,{"i":[{"n":"u64"}],"o":{"g":["kernelargaccessqualifier"],"n":"option"}}],[11,"from_i64","","",76,{"i":[{"n":"i64"}],"o":{"g":["buffercreatetype"],"n":"option"}}],[11,"from_u64","","",76,{"i":[{"n":"u64"}],"o":{"g":["buffercreatetype"],"n":"option"}}],[11,"from_i64","","",66,{"i":[{"n":"i64"}],"o":{"g":["programbuildinfo"],"n":"option"}}],[11,"from_u64","","",66,{"i":[{"n":"u64"}],"o":{"g":["programbuildinfo"],"n":"option"}}],[11,"from_i64","","",51,{"i":[{"n":"i64"}],"o":{"g":["devicememcachetype"],"n":"option"}}],[11,"from_u64","","",51,{"i":[{"n":"u64"}],"o":{"g":["devicememcachetype"],"n":"option"}}],[11,"from_i64","","",72,{"i":[{"n":"i64"}],"o":{"g":["kernelworkgroupinfo"],"n":"option"}}],[11,"from_u64","","",72,{"i":[{"n":"u64"}],"o":{"g":["kernelworkgroupinfo"],"n":"option"}}],[11,"from_i64","","",68,{"i":[{"n":"i64"}],"o":{"g":["kernelinfo"],"n":"option"}}],[11,"from_u64","","",68,{"i":[{"n":"u64"}],"o":{"g":["kernelinfo"],"n":"option"}}],[11,"bitand","ocl::flags","Returns the intersection between the two sets of flags.",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"deviceaffinitydomain"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"programbinarytype"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"commandqueueproperties"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"memflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"deviceexeccapabilities"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"kernelargtypequalifier"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"memmigrationflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"devicetype"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"devicefpconfig"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"partial_cmp","","",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"le","","",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"gt","","",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"ge","","",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"le","","",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"gt","","",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"ge","","",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"le","","",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"gt","","",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"ge","","",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"le","","",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"gt","","",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"ge","","",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"le","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"gt","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"ge","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"le","","",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"gt","","",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"ge","","",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"le","","",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"gt","","",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"ge","","",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"le","","",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"gt","","",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"ge","","",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"le","","",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"gt","","",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"ge","","",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"le","","",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"gt","","",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"ge","","",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitor_assign","ocl::prm","",107,null],[11,"bitor_assign","","",108,null],[11,"bitor_assign","","",109,null],[11,"bitor_assign","","",110,null],[11,"bitor_assign","","",111,null],[11,"bitor_assign","","",112,null],[11,"bitor_assign","","",113,null],[11,"bitor_assign","","",114,null],[11,"bitor_assign","","",115,null],[11,"bitor_assign","","",116,null],[11,"bitor_assign","","",117,null],[11,"bitor_assign","","",118,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",120,null],[11,"bitor_assign","","",121,null],[11,"bitor_assign","","",122,null],[11,"bitor_assign","","",123,null],[11,"bitor_assign","","",124,null],[11,"bitor_assign","","",125,null],[11,"bitor_assign","","",126,null],[11,"bitor_assign","","",127,null],[11,"bitor_assign","","",128,null],[11,"bitor_assign","","",129,null],[11,"bitor_assign","","",130,null],[11,"bitor_assign","","",131,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",133,null],[11,"bitor_assign","","",134,null],[11,"bitor_assign","","",135,null],[11,"bitor_assign","","",136,null],[11,"bitor_assign","","",137,null],[11,"bitor_assign","","",138,null],[11,"bitor_assign","","",139,null],[11,"bitor_assign","","",140,null],[11,"bitor_assign","","",141,null],[11,"bitor_assign","","",142,null],[11,"bitor_assign","","",143,null],[11,"bitor_assign","","",144,null],[11,"bitor_assign","","",145,null],[11,"bitor_assign","","",146,null],[11,"bitor_assign","","",147,null],[11,"bitor_assign","","",148,null],[11,"bitor_assign","","",149,null],[11,"bitor_assign","","",150,null],[11,"bitor_assign","","",151,null],[11,"bitor_assign","","",152,null],[11,"bitor_assign","","",153,null],[11,"bitor_assign","","",154,null],[11,"neg","","",139,{"i":[{"n":"self"}],"o":{"n":"ulong2"}}],[11,"neg","","",127,{"i":[{"n":"self"}],"o":{"n":"uint16"}}],[11,"neg","","",125,{"i":[{"n":"self"}],"o":{"n":"long2"}}],[11,"neg","","",155,{"i":[{"n":"self"}],"o":{"n":"double2"}}],[11,"neg","","",111,{"i":[{"n":"self"}],"o":{"n":"ulong3"}}],[11,"neg","","",117,{"i":[{"n":"self"}],"o":{"n":"char4"}}],[11,"neg","","",115,{"i":[{"n":"self"}],"o":{"n":"ushort2"}}],[11,"neg","","",109,{"i":[{"n":"self"}],"o":{"n":"ushort"}}],[11,"neg","","",122,{"i":[{"n":"self"}],"o":{"n":"int4"}}],[11,"neg","","",118,{"i":[{"n":"self"}],"o":{"n":"int2"}}],[11,"neg","","",120,{"i":[{"n":"self"}],"o":{"n":"long"}}],[11,"neg","","",151,{"i":[{"n":"self"}],"o":{"n":"int3"}}],[11,"neg","","",131,{"i":[{"n":"self"}],"o":{"n":"uint8"}}],[11,"neg","","",116,{"i":[{"n":"self"}],"o":{"n":"long16"}}],[11,"neg","","",129,{"i":[{"n":"self"}],"o":{"n":"char2"}}],[11,"neg","","",144,{"i":[{"n":"self"}],"o":{"n":"ulong8"}}],[11,"neg","","",156,{"i":[{"n":"self"}],"o":{"n":"float3"}}],[11,"neg","","",157,{"i":[{"n":"self"}],"o":{"n":"float"}}],[11,"neg","","",146,{"i":[{"n":"self"}],"o":{"n":"long4"}}],[11,"neg","","",150,{"i":[{"n":"self"}],"o":{"n":"short4"}}],[11,"neg","","",141,{"i":[{"n":"self"}],"o":{"n":"short8"}}],[11,"neg","","",137,{"i":[{"n":"self"}],"o":{"n":"uchar8"}}],[11,"neg","","",154,{"i":[{"n":"self"}],"o":{"n":"short3"}}],[11,"neg","","",143,{"i":[{"n":"self"}],"o":{"n":"uchar4"}}],[11,"neg","","",130,{"i":[{"n":"self"}],"o":{"n":"ulong"}}],[11,"neg","","",136,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"neg","","",149,{"i":[{"n":"self"}],"o":{"n":"ushort3"}}],[11,"neg","","",110,{"i":[{"n":"self"}],"o":{"n":"uint2"}}],[11,"neg","","",121,{"i":[{"n":"self"}],"o":{"n":"int8"}}],[11,"neg","","",158,{"i":[{"n":"self"}],"o":{"n":"float2"}}],[11,"neg","","",138,{"i":[{"n":"self"}],"o":{"n":"ulong16"}}],[11,"neg","","",142,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"neg","","",159,{"i":[{"n":"self"}],"o":{"n":"double"}}],[11,"neg","","",148,{"i":[{"n":"self"}],"o":{"n":"ushort4"}}],[11,"neg","","",114,{"i":[{"n":"self"}],"o":{"n":"uchar3"}}],[11,"neg","","",112,{"i":[{"n":"self"}],"o":{"n":"uchar2"}}],[11,"neg","","",123,{"i":[{"n":"self"}],"o":{"n":"long3"}}],[11,"neg","","",124,{"i":[{"n":"self"}],"o":{"n":"ulong4"}}],[11,"neg","","",126,{"i":[{"n":"self"}],"o":{"n":"uint4"}}],[11,"neg","","",153,{"i":[{"n":"self"}],"o":{"n":"int16"}}],[11,"neg","","",160,{"i":[{"n":"self"}],"o":{"n":"float4"}}],[11,"neg","","",161,{"i":[{"n":"self"}],"o":{"n":"double16"}}],[11,"neg","","",152,{"i":[{"n":"self"}],"o":{"n":"char16"}}],[11,"neg","","",128,{"i":[{"n":"self"}],"o":{"n":"uchar16"}}],[11,"neg","","",140,{"i":[{"n":"self"}],"o":{"n":"long8"}}],[11,"neg","","",133,{"i":[{"n":"self"}],"o":{"n":"short16"}}],[11,"neg","","",162,{"i":[{"n":"self"}],"o":{"n":"double3"}}],[11,"neg","","",147,{"i":[{"n":"self"}],"o":{"n":"char8"}}],[11,"neg","","",163,{"i":[{"n":"self"}],"o":{"n":"float16"}}],[11,"neg","","",164,{"i":[{"n":"self"}],"o":{"n":"double4"}}],[11,"neg","","",135,{"i":[{"n":"self"}],"o":{"n":"ushort8"}}],[11,"neg","","",119,{"i":[{"n":"self"}],"o":{"n":"char3"}}],[11,"neg","","",165,{"i":[{"n":"self"}],"o":{"n":"double8"}}],[11,"neg","","",108,{"i":[{"n":"self"}],"o":{"n":"ushort16"}}],[11,"neg","","",113,{"i":[{"n":"self"}],"o":{"n":"uchar"}}],[11,"neg","","",145,{"i":[{"n":"self"}],"o":{"n":"short"}}],[11,"neg","","",107,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"neg","","",166,{"i":[{"n":"self"}],"o":{"n":"float8"}}],[11,"neg","","",132,{"i":[{"n":"self"}],"o":{"n":"uint3"}}],[11,"neg","","",134,{"i":[{"n":"self"}],"o":{"n":"short2"}}],[11,"shl_assign","","",113,null],[11,"shl_assign","","",142,null],[11,"shl_assign","","",152,null],[11,"shl_assign","","",148,null],[11,"shl_assign","","",125,null],[11,"shl_assign","","",114,null],[11,"shl_assign","","",115,null],[11,"shl_assign","","",149,null],[11,"shl_assign","","",134,null],[11,"shl_assign","","",110,null],[11,"shl_assign","","",111,null],[11,"shl_assign","","",136,null],[11,"shl_assign","","",150,null],[11,"shl_assign","","",130,null],[11,"shl_assign","","",129,null],[11,"shl_assign","","",121,null],[11,"shl_assign","","",123,null],[11,"shl_assign","","",109,null],[11,"shl_assign","","",131,null],[11,"shl_assign","","",117,null],[11,"shl_assign","","",137,null],[11,"shl_assign","","",124,null],[11,"shl_assign","","",128,null],[11,"shl_assign","","",122,null],[11,"shl_assign","","",119,null],[11,"shl_assign","","",151,null],[11,"shl_assign","","",144,null],[11,"shl_assign","","",108,null],[11,"shl_assign","","",126,null],[11,"shl_assign","","",143,null],[11,"shl_assign","","",146,null],[11,"shl_assign","","",145,null],[11,"shl_assign","","",132,null],[11,"shl_assign","","",107,null],[11,"shl_assign","","",138,null],[11,"shl_assign","","",112,null],[11,"shl_assign","","",135,null],[11,"shl_assign","","",133,null],[11,"shl_assign","","",118,null],[11,"shl_assign","","",120,null],[11,"shl_assign","","",153,null],[11,"shl_assign","","",116,null],[11,"shl_assign","","",147,null],[11,"shl_assign","","",141,null],[11,"shl_assign","","",139,null],[11,"shl_assign","","",154,null],[11,"shl_assign","","",127,null],[11,"shl_assign","","",140,null],[11,"add_assign","","",137,null],[11,"add_assign","","",111,null],[11,"add_assign","","",114,null],[11,"add_assign","","",158,null],[11,"add_assign","","",134,null],[11,"add_assign","","",150,null],[11,"add_assign","","",164,null],[11,"add_assign","","",159,null],[11,"add_assign","","",148,null],[11,"add_assign","","",139,null],[11,"add_assign","","",118,null],[11,"add_assign","","",149,null],[11,"add_assign","","",165,null],[11,"add_assign","","",145,null],[11,"add_assign","","",146,null],[11,"add_assign","","",162,null],[11,"add_assign","","",123,null],[11,"add_assign","","",154,null],[11,"add_assign","","",117,null],[11,"add_assign","","",133,null],[11,"add_assign","","",132,null],[11,"add_assign","","",108,null],[11,"add_assign","","",142,null],[11,"add_assign","","",119,null],[11,"add_assign","","",112,null],[11,"add_assign","","",120,null],[11,"add_assign","","",135,null],[11,"add_assign","","",121,null],[11,"add_assign","","",156,null],[11,"add_assign","","",126,null],[11,"add_assign","","",144,null],[11,"add_assign","","",122,null],[11,"add_assign","","",147,null],[11,"add_assign","","",109,null],[11,"add_assign","","",127,null],[11,"add_assign","","",130,null],[11,"add_assign","","",166,null],[11,"add_assign","","",143,null],[11,"add_assign","","",161,null],[11,"add_assign","","",141,null],[11,"add_assign","","",125,null],[11,"add_assign","","",115,null],[11,"add_assign","","",153,null],[11,"add_assign","","",131,null],[11,"add_assign","","",128,null],[11,"add_assign","","",151,null],[11,"add_assign","","",129,null],[11,"add_assign","","",124,null],[11,"add_assign","","",140,null],[11,"add_assign","","",138,null],[11,"add_assign","","",155,null],[11,"add_assign","","",107,null],[11,"add_assign","","",116,null],[11,"add_assign","","",110,null],[11,"add_assign","","",152,null],[11,"add_assign","","",163,null],[11,"add_assign","","",113,null],[11,"add_assign","","",160,null],[11,"add_assign","","",136,null],[11,"add_assign","","",157,null],[11,"shl","","",153,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int16"}}],[11,"shl","","",121,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int8"}}],[11,"shl","","",123,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long3"}}],[11,"shl","","",145,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short"}}],[11,"shl","","",139,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong2"}}],[11,"shl","","",127,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint16"}}],[11,"shl","","",126,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint4"}}],[11,"shl","","",122,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int4"}}],[11,"shl","","",118,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int2"}}],[11,"shl","","",152,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char16"}}],[11,"shl","","",112,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar2"}}],[11,"shl","","",132,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint3"}}],[11,"shl","","",120,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long"}}],[11,"shl","","",150,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short4"}}],[11,"shl","","",138,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong16"}}],[11,"shl","","",110,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint2"}}],[11,"shl","","",124,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong4"}}],[11,"shl","","",116,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long16"}}],[11,"shl","","",111,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong3"}}],[11,"shl","","",134,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short2"}}],[11,"shl","","",108,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort16"}}],[11,"shl","","",135,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort8"}}],[11,"shl","","",109,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort"}}],[11,"shl","","",129,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char2"}}],[11,"shl","","",133,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short16"}}],[11,"shl","","",137,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar8"}}],[11,"shl","","",143,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar4"}}],[11,"shl","","",151,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int3"}}],[11,"shl","","",146,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long4"}}],[11,"shl","","",144,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong8"}}],[11,"shl","","",113,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar"}}],[11,"shl","","",142,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint"}}],[11,"shl","","",149,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort3"}}],[11,"shl","","",154,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short3"}}],[11,"shl","","",128,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar16"}}],[11,"shl","","",130,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong"}}],[11,"shl","","",136,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char"}}],[11,"shl","","",131,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint8"}}],[11,"shl","","",141,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short8"}}],[11,"shl","","",147,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char8"}}],[11,"shl","","",107,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int"}}],[11,"shl","","",117,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char4"}}],[11,"shl","","",140,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long8"}}],[11,"shl","","",148,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort4"}}],[11,"shl","","",119,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char3"}}],[11,"shl","","",125,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long2"}}],[11,"shl","","",114,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar3"}}],[11,"shl","","",115,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort2"}}],[11,"from","","",144,null],[11,"from","","",120,null],[11,"from","","",107,{"i":[{"n":"i32"}],"o":{"n":"int"}}],[11,"from","","",137,null],[11,"from","","",150,null],[11,"from","","",153,null],[11,"from","","",161,null],[11,"from","","",129,null],[11,"from","","",140,null],[11,"from","","",156,null],[11,"from","","",159,{"i":[{"n":"f64"}],"o":{"n":"double"}}],[11,"from","","",152,null],[11,"from","","",147,null],[11,"from","","",160,null],[11,"from","","",149,null],[11,"from","","",114,null],[11,"from","","",158,null],[11,"from","","",130,{"i":[{"n":"u64"}],"o":{"n":"ulong"}}],[11,"from","","",120,{"i":[{"n":"i64"}],"o":{"n":"long"}}],[11,"from","","",130,null],[11,"from","","",139,null],[11,"from","","",134,null],[11,"from","","",159,null],[11,"from","","",113,null],[11,"from","","",136,null],[11,"from","","",164,null],[11,"from","","",142,{"i":[{"n":"u32"}],"o":{"n":"uint"}}],[11,"from","","",166,null],[11,"from","","",157,null],[11,"from","","",148,null],[11,"from","","",126,null],[11,"from","","",145,{"i":[{"n":"i16"}],"o":{"n":"short"}}],[11,"from","","",124,null],[11,"from","","",113,{"i":[{"n":"u8"}],"o":{"n":"uchar"}}],[11,"from","","",128,null],[11,"from","","",133,null],[11,"from","","",135,null],[11,"from","","",121,null],[11,"from","","",117,null],[11,"from","","",145,null],[11,"from","","",112,null],[11,"from","","",146,null],[11,"from","","",118,null],[11,"from","","",108,null],[11,"from","","",155,null],[11,"from","","",142,null],[11,"from","","",131,null],[11,"from","","",119,null],[11,"from","","",162,null],[11,"from","","",116,null],[11,"from","","",132,null],[11,"from","","",111,null],[11,"from","","",115,null],[11,"from","","",109,{"i":[{"n":"u16"}],"o":{"n":"ushort"}}],[11,"from","","",127,null],[11,"from","","",110,null],[11,"from","","",125,null],[11,"from","","",165,null],[11,"from","","",143,null],[11,"from","","",151,null],[11,"from","","",163,null],[11,"from","","",154,null],[11,"from","","",107,null],[11,"from","","",122,null],[11,"from","","",157,{"i":[{"n":"f32"}],"o":{"n":"float"}}],[11,"from","","",109,null],[11,"from","","",136,{"i":[{"n":"i8"}],"o":{"n":"char"}}],[11,"from","","",123,null],[11,"from","","",138,null],[11,"from","","",141,null],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"one","","",156,{"o":{"n":"float3"}}],[11,"one","","",133,{"o":{"n":"short16"}}],[11,"one","","",134,{"o":{"n":"short2"}}],[11,"one","","",166,{"o":{"n":"float8"}}],[11,"one","","",159,{"o":{"n":"double"}}],[11,"one","","",140,{"o":{"n":"long8"}}],[11,"one","","",122,{"o":{"n":"int4"}}],[11,"one","","",135,{"o":{"n":"ushort8"}}],[11,"one","","",132,{"o":{"n":"uint3"}}],[11,"one","","",129,{"o":{"n":"char2"}}],[11,"one","","",113,{"o":{"n":"uchar"}}],[11,"one","","",158,{"o":{"n":"float2"}}],[11,"one","","",149,{"o":{"n":"ushort3"}}],[11,"one","","",151,{"o":{"n":"int3"}}],[11,"one","","",163,{"o":{"n":"float16"}}],[11,"one","","",114,{"o":{"n":"uchar3"}}],[11,"one","","",142,{"o":{"n":"uint"}}],[11,"one","","",148,{"o":{"n":"ushort4"}}],[11,"one","","",120,{"o":{"n":"long"}}],[11,"one","","",152,{"o":{"n":"char16"}}],[11,"one","","",109,{"o":{"n":"ushort"}}],[11,"one","","",165,{"o":{"n":"double8"}}],[11,"one","","",111,{"o":{"n":"ulong3"}}],[11,"one","","",125,{"o":{"n":"long2"}}],[11,"one","","",150,{"o":{"n":"short4"}}],[11,"one","","",137,{"o":{"n":"uchar8"}}],[11,"one","","",128,{"o":{"n":"uchar16"}}],[11,"one","","",144,{"o":{"n":"ulong8"}}],[11,"one","","",162,{"o":{"n":"double3"}}],[11,"one","","",119,{"o":{"n":"char3"}}],[11,"one","","",147,{"o":{"n":"char8"}}],[11,"one","","",136,{"o":{"n":"char"}}],[11,"one","","",123,{"o":{"n":"long3"}}],[11,"one","","",121,{"o":{"n":"int8"}}],[11,"one","","",161,{"o":{"n":"double16"}}],[11,"one","","",145,{"o":{"n":"short"}}],[11,"one","","",160,{"o":{"n":"float4"}}],[11,"one","","",139,{"o":{"n":"ulong2"}}],[11,"one","","",118,{"o":{"n":"int2"}}],[11,"one","","",117,{"o":{"n":"char4"}}],[11,"one","","",164,{"o":{"n":"double4"}}],[11,"one","","",146,{"o":{"n":"long4"}}],[11,"one","","",157,{"o":{"n":"float"}}],[11,"one","","",131,{"o":{"n":"uint8"}}],[11,"one","","",138,{"o":{"n":"ulong16"}}],[11,"one","","",154,{"o":{"n":"short3"}}],[11,"one","","",141,{"o":{"n":"short8"}}],[11,"one","","",124,{"o":{"n":"ulong4"}}],[11,"one","","",116,{"o":{"n":"long16"}}],[11,"one","","",126,{"o":{"n":"uint4"}}],[11,"one","","",130,{"o":{"n":"ulong"}}],[11,"one","","",107,{"o":{"n":"int"}}],[11,"one","","",153,{"o":{"n":"int16"}}],[11,"one","","",108,{"o":{"n":"ushort16"}}],[11,"one","","",155,{"o":{"n":"double2"}}],[11,"one","","",112,{"o":{"n":"uchar2"}}],[11,"one","","",115,{"o":{"n":"ushort2"}}],[11,"one","","",143,{"o":{"n":"uchar4"}}],[11,"one","","",110,{"o":{"n":"uint2"}}],[11,"one","","",127,{"o":{"n":"uint16"}}],[11,"eq","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"eq","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"eq","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"eq","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"eq","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"eq","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"eq","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"eq","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"eq","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"eq","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"eq","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"eq","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"eq","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"eq","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"eq","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"eq","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"eq","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"eq","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"eq","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"eq","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"eq","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"eq","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"eq","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"eq","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"eq","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"eq","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"eq","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"eq","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"eq","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"eq","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"eq","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"eq","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"eq","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"eq","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"add","","",141,null],[11,"add","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"add","","",145,null],[11,"add","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"add","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"add","","",139,null],[11,"add","","",126,null],[11,"add","","",150,null],[11,"add","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"add","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"add","","",127,null],[11,"add","","",166,null],[11,"add","","",137,null],[11,"add","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"add","","",161,null],[11,"add","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"add","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"add","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"add","","",152,null],[11,"add","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"add","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"add","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"add","","",124,null],[11,"add","","",140,null],[11,"add","","",155,null],[11,"add","","",111,null],[11,"add","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"add","","",121,null],[11,"add","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"add","","",138,null],[11,"add","","",146,null],[11,"add","","",123,null],[11,"add","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"add","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"add","","",162,null],[11,"add","","",159,null],[11,"add","","",113,null],[11,"add","","",116,null],[11,"add","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"add","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"add","","",110,null],[11,"add","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"add","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"add","","",164,null],[11,"add","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"add","","",133,null],[11,"add","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"add","","",151,null],[11,"add","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"add","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"add","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"add","","",120,null],[11,"add","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"add","","",117,null],[11,"add","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"add","","",108,null],[11,"add","","",118,null],[11,"add","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"add","","",142,null],[11,"add","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"add","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"add","","",112,null],[11,"add","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"add","","",132,null],[11,"add","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"add","","",134,null],[11,"add","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"add","","",143,null],[11,"add","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"add","","",115,null],[11,"add","","",156,null],[11,"add","","",147,null],[11,"add","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"add","","",157,null],[11,"add","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"add","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"add","","",163,null],[11,"add","","",153,null],[11,"add","","",154,null],[11,"add","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"add","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"add","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"add","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"add","","",122,null],[11,"add","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"add","","",119,null],[11,"add","","",129,null],[11,"add","","",158,null],[11,"add","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"add","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"add","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"add","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"add","","",114,null],[11,"add","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"add","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"add","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"add","","",135,null],[11,"add","","",136,null],[11,"add","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"add","","",165,null],[11,"add","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"add","","",128,null],[11,"add","","",160,null],[11,"add","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"add","","",149,null],[11,"add","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"add","","",130,null],[11,"add","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"add","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"add","","",144,null],[11,"add","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"add","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"add","","",107,null],[11,"add","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"add","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"add","","",125,null],[11,"add","","",109,null],[11,"add","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"add","","",148,null],[11,"add","","",131,null],[11,"deref_mut","","",153,null],[11,"deref_mut","","",145,null],[11,"deref_mut","","",112,null],[11,"deref_mut","","",111,null],[11,"deref_mut","","",151,null],[11,"deref_mut","","",115,null],[11,"deref_mut","","",142,null],[11,"deref_mut","","",110,null],[11,"deref_mut","","",124,null],[11,"deref_mut","","",158,null],[11,"deref_mut","","",132,null],[11,"deref_mut","","",134,null],[11,"deref_mut","","",162,null],[11,"deref_mut","","",113,null],[11,"deref_mut","","",117,null],[11,"deref_mut","","",150,null],[11,"deref_mut","","",152,null],[11,"deref_mut","","",107,null],[11,"deref_mut","","",109,null],[11,"deref_mut","","",155,null],[11,"deref_mut","","",120,null],[11,"deref_mut","","",163,null],[11,"deref_mut","","",133,null],[11,"deref_mut","","",143,null],[11,"deref_mut","","",108,null],[11,"deref_mut","","",118,null],[11,"deref_mut","","",136,null],[11,"deref_mut","","",154,null],[11,"deref_mut","","",149,null],[11,"deref_mut","","",119,null],[11,"deref_mut","","",147,null],[11,"deref_mut","","",116,null],[11,"deref_mut","","",131,null],[11,"deref_mut","","",165,null],[11,"deref_mut","","",141,null],[11,"deref_mut","","",157,null],[11,"deref_mut","","",125,null],[11,"deref_mut","","",161,null],[11,"deref_mut","","",140,null],[11,"deref_mut","","",123,null],[11,"deref_mut","","",144,null],[11,"deref_mut","","",138,null],[11,"deref_mut","","",135,null],[11,"deref_mut","","",122,null],[11,"deref_mut","","",126,null],[11,"deref_mut","","",130,null],[11,"deref_mut","","",114,null],[11,"deref_mut","","",129,null],[11,"deref_mut","","",148,null],[11,"deref_mut","","",137,null],[11,"deref_mut","","",121,null],[11,"deref_mut","","",156,null],[11,"deref_mut","","",160,null],[11,"deref_mut","","",146,null],[11,"deref_mut","","",139,null],[11,"deref_mut","","",166,null],[11,"deref_mut","","",127,null],[11,"deref_mut","","",164,null],[11,"deref_mut","","",128,null],[11,"deref_mut","","",159,null],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"uint4"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"uchar"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"ulong"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"double2"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"uchar2"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"uint8"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"int8"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"ulong4"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"ushort16"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"short16"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"ulong3"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"short"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"uint3"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"double8"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"ulong2"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"float3"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"short4"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"long8"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"short2"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"ulong16"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"long16"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"uchar3"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"float4"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"char3"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"uchar4"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"ushort"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"char4"}}],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"float8"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"ushort4"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"uint16"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"uchar16"}}],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"double16"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"ushort2"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"short8"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"uchar8"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"long"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"float2"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"int3"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"double4"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"int4"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"int2"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"long3"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"ulong8"}}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"short3"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"char2"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"ushort8"}}],[11,"clone","","",163,{"i":[{"n":"self"}],"o":{"n":"float16"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"long2"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"char16"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"double"}}],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"double3"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"int16"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"float"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"uint2"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"char8"}}],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"ushort3"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"long4"}}],[11,"shr","","",114,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar3"}}],[11,"shr","","",139,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong2"}}],[11,"shr","","",152,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char16"}}],[11,"shr","","",140,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long8"}}],[11,"shr","","",130,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong"}}],[11,"shr","","",141,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short8"}}],[11,"shr","","",148,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort4"}}],[11,"shr","","",137,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar8"}}],[11,"shr","","",122,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int4"}}],[11,"shr","","",146,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long4"}}],[11,"shr","","",151,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int3"}}],[11,"shr","","",135,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort8"}}],[11,"shr","","",131,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint8"}}],[11,"shr","","",117,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char4"}}],[11,"shr","","",145,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short"}}],[11,"shr","","",126,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint4"}}],[11,"shr","","",107,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int"}}],[11,"shr","","",108,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort16"}}],[11,"shr","","",115,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort2"}}],[11,"shr","","",120,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long"}}],[11,"shr","","",110,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint2"}}],[11,"shr","","",129,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char2"}}],[11,"shr","","",132,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint3"}}],[11,"shr","","",123,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long3"}}],[11,"shr","","",116,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long16"}}],[11,"shr","","",127,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint16"}}],[11,"shr","","",109,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort"}}],[11,"shr","","",147,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char8"}}],[11,"shr","","",113,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar"}}],[11,"shr","","",150,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short4"}}],[11,"shr","","",136,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char"}}],[11,"shr","","",119,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char3"}}],[11,"shr","","",124,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong4"}}],[11,"shr","","",143,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar4"}}],[11,"shr","","",134,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short2"}}],[11,"shr","","",125,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long2"}}],[11,"shr","","",112,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar2"}}],[11,"shr","","",142,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint"}}],[11,"shr","","",118,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int2"}}],[11,"shr","","",154,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short3"}}],[11,"shr","","",149,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort3"}}],[11,"shr","","",138,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong16"}}],[11,"shr","","",153,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int16"}}],[11,"shr","","",111,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong3"}}],[11,"shr","","",128,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar16"}}],[11,"shr","","",133,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short16"}}],[11,"shr","","",121,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int8"}}],[11,"shr","","",144,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong8"}}],[11,"bitor","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"bitor","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"bitor","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"bitor","","",109,null],[11,"bitor","","",143,null],[11,"bitor","","",124,null],[11,"bitor","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"bitor","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"bitor","","",129,null],[11,"bitor","","",116,null],[11,"bitor","","",121,null],[11,"bitor","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"bitor","","",145,null],[11,"bitor","","",113,null],[11,"bitor","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"bitor","","",112,null],[11,"bitor","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"bitor","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"bitor","","",118,null],[11,"bitor","","",140,null],[11,"bitor","","",137,null],[11,"bitor","","",134,null],[11,"bitor","","",133,null],[11,"bitor","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"bitor","","",128,null],[11,"bitor","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"bitor","","",148,null],[11,"bitor","","",149,null],[11,"bitor","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"bitor","","",150,null],[11,"bitor","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"bitor","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"bitor","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"bitor","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"bitor","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"bitor","","",146,null],[11,"bitor","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"bitor","","",120,null],[11,"bitor","","",135,null],[11,"bitor","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"bitor","","",130,null],[11,"bitor","","",125,null],[11,"bitor","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"bitor","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"bitor","","",114,null],[11,"bitor","","",107,null],[11,"bitor","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"bitor","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"bitor","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"bitor","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"bitor","","",136,null],[11,"bitor","","",131,null],[11,"bitor","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"bitor","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"bitor","","",111,null],[11,"bitor","","",127,null],[11,"bitor","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"bitor","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"bitor","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"bitor","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"bitor","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"bitor","","",154,null],[11,"bitor","","",153,null],[11,"bitor","","",132,null],[11,"bitor","","",119,null],[11,"bitor","","",139,null],[11,"bitor","","",138,null],[11,"bitor","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"bitor","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"bitor","","",144,null],[11,"bitor","","",141,null],[11,"bitor","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"bitor","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"bitor","","",142,null],[11,"bitor","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"bitor","","",152,null],[11,"bitor","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"bitor","","",147,null],[11,"bitor","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"bitor","","",151,null],[11,"bitor","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"bitor","","",126,null],[11,"bitor","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"bitor","","",122,null],[11,"bitor","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"bitor","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"bitor","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"bitor","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"bitor","","",108,null],[11,"bitor","","",117,null],[11,"bitor","","",110,null],[11,"bitor","","",123,null],[11,"bitor","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"bitor","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"bitor","","",115,null],[11,"bitor","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"cmp","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"ordering"}}],[11,"cmp","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"ordering"}}],[11,"cmp","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"ordering"}}],[11,"cmp","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ordering"}}],[11,"cmp","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"ordering"}}],[11,"cmp","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"ordering"}}],[11,"cmp","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"ordering"}}],[11,"cmp","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"ordering"}}],[11,"cmp","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"ordering"}}],[11,"cmp","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"ordering"}}],[11,"cmp","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"ordering"}}],[11,"cmp","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"ordering"}}],[11,"cmp","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"ordering"}}],[11,"cmp","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"ordering"}}],[11,"cmp","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ordering"}}],[11,"cmp","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ordering"}}],[11,"cmp","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ordering"}}],[11,"cmp","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"ordering"}}],[11,"cmp","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"ordering"}}],[11,"cmp","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ordering"}}],[11,"cmp","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"ordering"}}],[11,"cmp","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"ordering"}}],[11,"cmp","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"ordering"}}],[11,"cmp","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"ordering"}}],[11,"cmp","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ordering"}}],[11,"cmp","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"ordering"}}],[11,"cmp","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"ordering"}}],[11,"cmp","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"ordering"}}],[11,"cmp","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ordering"}}],[11,"cmp","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ordering"}}],[11,"cmp","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"ordering"}}],[11,"cmp","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"ordering"}}],[11,"cmp","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"ordering"}}],[11,"cmp","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"ordering"}}],[11,"cmp","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"ordering"}}],[11,"cmp","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ordering"}}],[11,"cmp","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ordering"}}],[11,"cmp","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"ordering"}}],[11,"cmp","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"ordering"}}],[11,"cmp","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"ordering"}}],[11,"cmp","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"ordering"}}],[11,"cmp","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"ordering"}}],[11,"cmp","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"ordering"}}],[11,"cmp","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"ordering"}}],[11,"cmp","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"ordering"}}],[11,"cmp","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ordering"}}],[11,"cmp","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"ordering"}}],[11,"cmp","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ordering"}}],[11,"default","","",122,{"o":{"n":"int4"}}],[11,"default","","",149,{"o":{"n":"ushort3"}}],[11,"default","","",134,{"o":{"n":"short2"}}],[11,"default","","",146,{"o":{"n":"long4"}}],[11,"default","","",114,{"o":{"n":"uchar3"}}],[11,"default","","",136,{"o":{"n":"char"}}],[11,"default","","",139,{"o":{"n":"ulong2"}}],[11,"default","","",111,{"o":{"n":"ulong3"}}],[11,"default","","",164,{"o":{"n":"double4"}}],[11,"default","","",140,{"o":{"n":"long8"}}],[11,"default","","",157,{"o":{"n":"float"}}],[11,"default","","",135,{"o":{"n":"ushort8"}}],[11,"default","","",156,{"o":{"n":"float3"}}],[11,"default","","",147,{"o":{"n":"char8"}}],[11,"default","","",112,{"o":{"n":"uchar2"}}],[11,"default","","",118,{"o":{"n":"int2"}}],[11,"default","","",153,{"o":{"n":"int16"}}],[11,"default","","",120,{"o":{"n":"long"}}],[11,"default","","",148,{"o":{"n":"ushort4"}}],[11,"default","","",116,{"o":{"n":"long16"}}],[11,"default","","",138,{"o":{"n":"ulong16"}}],[11,"default","","",117,{"o":{"n":"char4"}}],[11,"default","","",158,{"o":{"n":"float2"}}],[11,"default","","",165,{"o":{"n":"double8"}}],[11,"default","","",109,{"o":{"n":"ushort"}}],[11,"default","","",166,{"o":{"n":"float8"}}],[11,"default","","",124,{"o":{"n":"ulong4"}}],[11,"default","","",126,{"o":{"n":"uint4"}}],[11,"default","","",119,{"o":{"n":"char3"}}],[11,"default","","",142,{"o":{"n":"uint"}}],[11,"default","","",151,{"o":{"n":"int3"}}],[11,"default","","",160,{"o":{"n":"float4"}}],[11,"default","","",131,{"o":{"n":"uint8"}}],[11,"default","","",150,{"o":{"n":"short4"}}],[11,"default","","",108,{"o":{"n":"ushort16"}}],[11,"default","","",130,{"o":{"n":"ulong"}}],[11,"default","","",115,{"o":{"n":"ushort2"}}],[11,"default","","",125,{"o":{"n":"long2"}}],[11,"default","","",141,{"o":{"n":"short8"}}],[11,"default","","",128,{"o":{"n":"uchar16"}}],[11,"default","","",132,{"o":{"n":"uint3"}}],[11,"default","","",162,{"o":{"n":"double3"}}],[11,"default","","",154,{"o":{"n":"short3"}}],[11,"default","","",155,{"o":{"n":"double2"}}],[11,"default","","",144,{"o":{"n":"ulong8"}}],[11,"default","","",110,{"o":{"n":"uint2"}}],[11,"default","","",137,{"o":{"n":"uchar8"}}],[11,"default","","",113,{"o":{"n":"uchar"}}],[11,"default","","",127,{"o":{"n":"uint16"}}],[11,"default","","",121,{"o":{"n":"int8"}}],[11,"default","","",159,{"o":{"n":"double"}}],[11,"default","","",129,{"o":{"n":"char2"}}],[11,"default","","",163,{"o":{"n":"float16"}}],[11,"default","","",145,{"o":{"n":"short"}}],[11,"default","","",161,{"o":{"n":"double16"}}],[11,"default","","",133,{"o":{"n":"short16"}}],[11,"default","","",152,{"o":{"n":"char16"}}],[11,"default","","",143,{"o":{"n":"uchar4"}}],[11,"default","","",123,{"o":{"n":"long3"}}],[11,"default","","",107,{"o":{"n":"int"}}],[11,"product","","",137,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"product","","",154,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"product","","",127,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"product","","",142,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"product","","",121,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"product","","",144,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"product","","",148,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"product","","",160,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"product","","",158,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"product","","",131,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"product","","",162,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"product","","",109,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"product","","",137,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"product","","",138,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"product","","",118,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"product","","",131,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"product","","",122,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"product","","",158,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"product","","",109,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"product","","",143,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"product","","",155,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"product","","",147,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"product","","",128,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"product","","",149,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"product","","",122,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"product","","",124,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"product","","",123,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"product","","",139,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"product","","",159,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"product","","",107,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"product","","",124,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"product","","",140,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"product","","",151,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"product","","",114,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"product","","",129,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"product","","",120,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"product","","",125,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"product","","",118,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"product","","",128,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"product","","",110,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"product","","",156,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"product","","",136,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"product","","",108,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"product","","",117,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"product","","",163,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"product","","",111,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"product","","",112,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"product","","",157,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"product","","",145,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"product","","",130,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"product","","",153,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"product","","",127,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"product","","",113,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"product","","",139,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"product","","",134,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"product","","",130,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"product","","",145,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"product","","",143,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"product","","",119,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"product","","",115,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"product","","",141,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"product","","",121,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"product","","",161,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"product","","",107,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"product","","",148,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"product","","",132,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"product","","",110,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"product","","",153,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"product","","",126,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"product","","",161,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"product","","",115,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"product","","",162,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"product","","",135,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"product","","",125,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"product","","",120,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"product","","",140,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"product","","",129,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"product","","",108,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"product","","",119,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"product","","",166,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"product","","",123,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"product","","",133,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"product","","",150,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"product","","",112,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"product","","",165,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"product","","",132,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"product","","",117,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"product","","",135,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"product","","",165,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"product","","",144,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"product","","",155,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"product","","",146,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"product","","",164,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"product","","",152,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"product","","",160,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"product","","",152,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"product","","",138,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"product","","",151,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"product","","",141,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"product","","",136,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"product","","",147,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"product","","",163,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"product","","",111,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"product","","",156,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"product","","",126,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"product","","",134,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"product","","",113,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"product","","",164,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"product","","",114,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"product","","",159,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"product","","",116,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"product","","",146,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"product","","",116,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"product","","",150,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"product","","",154,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"product","","",133,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"product","","",157,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"product","","",166,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"product","","",142,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"product","","",149,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"deref","","",128,null],[11,"deref","","",113,null],[11,"deref","","",158,null],[11,"deref","","",144,null],[11,"deref","","",124,null],[11,"deref","","",141,null],[11,"deref","","",115,null],[11,"deref","","",166,null],[11,"deref","","",157,null],[11,"deref","","",134,null],[11,"deref","","",152,null],[11,"deref","","",136,null],[11,"deref","","",161,null],[11,"deref","","",119,null],[11,"deref","","",148,null],[11,"deref","","",146,null],[11,"deref","","",149,null],[11,"deref","","",107,null],[11,"deref","","",123,null],[11,"deref","","",118,null],[11,"deref","","",125,null],[11,"deref","","",133,null],[11,"deref","","",162,null],[11,"deref","","",138,null],[11,"deref","","",160,null],[11,"deref","","",164,null],[11,"deref","","",150,null],[11,"deref","","",131,null],[11,"deref","","",116,null],[11,"deref","","",145,null],[11,"deref","","",114,null],[11,"deref","","",154,null],[11,"deref","","",139,null],[11,"deref","","",120,null],[11,"deref","","",143,null],[11,"deref","","",117,null],[11,"deref","","",127,null],[11,"deref","","",163,null],[11,"deref","","",135,null],[11,"deref","","",159,null],[11,"deref","","",142,null],[11,"deref","","",122,null],[11,"deref","","",112,null],[11,"deref","","",153,null],[11,"deref","","",132,null],[11,"deref","","",156,null],[11,"deref","","",126,null],[11,"deref","","",121,null],[11,"deref","","",155,null],[11,"deref","","",137,null],[11,"deref","","",130,null],[11,"deref","","",129,null],[11,"deref","","",165,null],[11,"deref","","",140,null],[11,"deref","","",111,null],[11,"deref","","",109,null],[11,"deref","","",110,null],[11,"deref","","",151,null],[11,"deref","","",108,null],[11,"deref","","",147,null],[11,"bitxor","","",107,null],[11,"bitxor","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"bitxor","","",146,null],[11,"bitxor","","",113,null],[11,"bitxor","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"bitxor","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"bitxor","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"bitxor","","",138,null],[11,"bitxor","","",137,null],[11,"bitxor","","",147,null],[11,"bitxor","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"bitxor","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"bitxor","","",120,null],[11,"bitxor","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"bitxor","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"bitxor","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"bitxor","","",119,null],[11,"bitxor","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"bitxor","","",153,null],[11,"bitxor","","",152,null],[11,"bitxor","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"bitxor","","",123,null],[11,"bitxor","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"bitxor","","",117,null],[11,"bitxor","","",115,null],[11,"bitxor","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"bitxor","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"bitxor","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"bitxor","","",121,null],[11,"bitxor","","",109,null],[11,"bitxor","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"bitxor","","",131,null],[11,"bitxor","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"bitxor","","",114,null],[11,"bitxor","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"bitxor","","",112,null],[11,"bitxor","","",154,null],[11,"bitxor","","",129,null],[11,"bitxor","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"bitxor","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"bitxor","","",132,null],[11,"bitxor","","",143,null],[11,"bitxor","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"bitxor","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"bitxor","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"bitxor","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"bitxor","","",135,null],[11,"bitxor","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"bitxor","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"bitxor","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"bitxor","","",145,null],[11,"bitxor","","",150,null],[11,"bitxor","","",111,null],[11,"bitxor","","",136,null],[11,"bitxor","","",125,null],[11,"bitxor","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"bitxor","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"bitxor","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"bitxor","","",133,null],[11,"bitxor","","",128,null],[11,"bitxor","","",139,null],[11,"bitxor","","",148,null],[11,"bitxor","","",142,null],[11,"bitxor","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"bitxor","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"bitxor","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"bitxor","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"bitxor","","",144,null],[11,"bitxor","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"bitxor","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"bitxor","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"bitxor","","",141,null],[11,"bitxor","","",134,null],[11,"bitxor","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"bitxor","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"bitxor","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"bitxor","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"bitxor","","",130,null],[11,"bitxor","","",151,null],[11,"bitxor","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"bitxor","","",116,null],[11,"bitxor","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"bitxor","","",126,null],[11,"bitxor","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"bitxor","","",140,null],[11,"bitxor","","",110,null],[11,"bitxor","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"bitxor","","",124,null],[11,"bitxor","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"bitxor","","",108,null],[11,"bitxor","","",127,null],[11,"bitxor","","",122,null],[11,"bitxor","","",118,null],[11,"bitxor","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"bitxor","","",149,null],[11,"bitxor","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitand_assign","","",137,null],[11,"bitand_assign","","",149,null],[11,"bitand_assign","","",120,null],[11,"bitand_assign","","",125,null],[11,"bitand_assign","","",136,null],[11,"bitand_assign","","",117,null],[11,"bitand_assign","","",141,null],[11,"bitand_assign","","",134,null],[11,"bitand_assign","","",143,null],[11,"bitand_assign","","",151,null],[11,"bitand_assign","","",110,null],[11,"bitand_assign","","",146,null],[11,"bitand_assign","","",112,null],[11,"bitand_assign","","",123,null],[11,"bitand_assign","","",148,null],[11,"bitand_assign","","",111,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",130,null],[11,"bitand_assign","","",131,null],[11,"bitand_assign","","",154,null],[11,"bitand_assign","","",142,null],[11,"bitand_assign","","",116,null],[11,"bitand_assign","","",147,null],[11,"bitand_assign","","",108,null],[11,"bitand_assign","","",135,null],[11,"bitand_assign","","",121,null],[11,"bitand_assign","","",127,null],[11,"bitand_assign","","",124,null],[11,"bitand_assign","","",109,null],[11,"bitand_assign","","",144,null],[11,"bitand_assign","","",118,null],[11,"bitand_assign","","",133,null],[11,"bitand_assign","","",150,null],[11,"bitand_assign","","",140,null],[11,"bitand_assign","","",145,null],[11,"bitand_assign","","",114,null],[11,"bitand_assign","","",138,null],[11,"bitand_assign","","",153,null],[11,"bitand_assign","","",126,null],[11,"bitand_assign","","",128,null],[11,"bitand_assign","","",107,null],[11,"bitand_assign","","",122,null],[11,"bitand_assign","","",115,null],[11,"bitand_assign","","",139,null],[11,"bitand_assign","","",152,null],[11,"bitand_assign","","",113,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",129,null],[11,"sub_assign","","",143,null],[11,"sub_assign","","",144,null],[11,"sub_assign","","",121,null],[11,"sub_assign","","",108,null],[11,"sub_assign","","",109,null],[11,"sub_assign","","",120,null],[11,"sub_assign","","",116,null],[11,"sub_assign","","",147,null],[11,"sub_assign","","",158,null],[11,"sub_assign","","",164,null],[11,"sub_assign","","",163,null],[11,"sub_assign","","",166,null],[11,"sub_assign","","",113,null],[11,"sub_assign","","",117,null],[11,"sub_assign","","",127,null],[11,"sub_assign","","",137,null],[11,"sub_assign","","",145,null],[11,"sub_assign","","",150,null],[11,"sub_assign","","",139,null],[11,"sub_assign","","",142,null],[11,"sub_assign","","",130,null],[11,"sub_assign","","",131,null],[11,"sub_assign","","",126,null],[11,"sub_assign","","",148,null],[11,"sub_assign","","",159,null],[11,"sub_assign","","",118,null],[11,"sub_assign","","",161,null],[11,"sub_assign","","",162,null],[11,"sub_assign","","",140,null],[11,"sub_assign","","",133,null],[11,"sub_assign","","",146,null],[11,"sub_assign","","",112,null],[11,"sub_assign","","",153,null],[11,"sub_assign","","",134,null],[11,"sub_assign","","",122,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",111,null],[11,"sub_assign","","",155,null],[11,"sub_assign","","",124,null],[11,"sub_assign","","",138,null],[11,"sub_assign","","",107,null],[11,"sub_assign","","",135,null],[11,"sub_assign","","",152,null],[11,"sub_assign","","",125,null],[11,"sub_assign","","",157,null],[11,"sub_assign","","",110,null],[11,"sub_assign","","",156,null],[11,"sub_assign","","",128,null],[11,"sub_assign","","",136,null],[11,"sub_assign","","",123,null],[11,"sub_assign","","",149,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",160,null],[11,"sub_assign","","",129,null],[11,"sub_assign","","",154,null],[11,"sub_assign","","",115,null],[11,"sub_assign","","",165,null],[11,"sub_assign","","",151,null],[11,"sub_assign","","",141,null],[11,"sub_assign","","",114,null],[11,"bitxor_assign","","",117,null],[11,"bitxor_assign","","",107,null],[11,"bitxor_assign","","",144,null],[11,"bitxor_assign","","",116,null],[11,"bitxor_assign","","",122,null],[11,"bitxor_assign","","",120,null],[11,"bitxor_assign","","",142,null],[11,"bitxor_assign","","",141,null],[11,"bitxor_assign","","",136,null],[11,"bitxor_assign","","",145,null],[11,"bitxor_assign","","",140,null],[11,"bitxor_assign","","",130,null],[11,"bitxor_assign","","",121,null],[11,"bitxor_assign","","",109,null],[11,"bitxor_assign","","",126,null],[11,"bitxor_assign","","",128,null],[11,"bitxor_assign","","",125,null],[11,"bitxor_assign","","",118,null],[11,"bitxor_assign","","",149,null],[11,"bitxor_assign","","",138,null],[11,"bitxor_assign","","",129,null],[11,"bitxor_assign","","",123,null],[11,"bitxor_assign","","",134,null],[11,"bitxor_assign","","",150,null],[11,"bitxor_assign","","",152,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",124,null],[11,"bitxor_assign","","",113,null],[11,"bitxor_assign","","",115,null],[11,"bitxor_assign","","",154,null],[11,"bitxor_assign","","",147,null],[11,"bitxor_assign","","",135,null],[11,"bitxor_assign","","",133,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",114,null],[11,"bitxor_assign","","",139,null],[11,"bitxor_assign","","",146,null],[11,"bitxor_assign","","",148,null],[11,"bitxor_assign","","",112,null],[11,"bitxor_assign","","",153,null],[11,"bitxor_assign","","",110,null],[11,"bitxor_assign","","",108,null],[11,"bitxor_assign","","",111,null],[11,"bitxor_assign","","",137,null],[11,"bitxor_assign","","",143,null],[11,"bitxor_assign","","",151,null],[11,"bitxor_assign","","",131,null],[11,"bitxor_assign","","",127,null],[11,"not","","",127,{"i":[{"n":"self"}],"o":{"n":"uint16"}}],[11,"not","","",150,{"i":[{"n":"self"}],"o":{"n":"short4"}}],[11,"not","","",139,{"i":[{"n":"self"}],"o":{"n":"ulong2"}}],[11,"not","","",123,{"i":[{"n":"self"}],"o":{"n":"long3"}}],[11,"not","","",119,{"i":[{"n":"self"}],"o":{"n":"char3"}}],[11,"not","","",132,{"i":[{"n":"self"}],"o":{"n":"uint3"}}],[11,"not","","",110,{"i":[{"n":"self"}],"o":{"n":"uint2"}}],[11,"not","","",145,{"i":[{"n":"self"}],"o":{"n":"short"}}],[11,"not","","",136,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"not","","",134,{"i":[{"n":"self"}],"o":{"n":"short2"}}],[11,"not","","",151,{"i":[{"n":"self"}],"o":{"n":"int3"}}],[11,"not","","",137,{"i":[{"n":"self"}],"o":{"n":"uchar8"}}],[11,"not","","",113,{"i":[{"n":"self"}],"o":{"n":"uchar"}}],[11,"not","","",142,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"not","","",152,{"i":[{"n":"self"}],"o":{"n":"char16"}}],[11,"not","","",121,{"i":[{"n":"self"}],"o":{"n":"int8"}}],[11,"not","","",114,{"i":[{"n":"self"}],"o":{"n":"uchar3"}}],[11,"not","","",149,{"i":[{"n":"self"}],"o":{"n":"ushort3"}}],[11,"not","","",148,{"i":[{"n":"self"}],"o":{"n":"ushort4"}}],[11,"not","","",128,{"i":[{"n":"self"}],"o":{"n":"uchar16"}}],[11,"not","","",129,{"i":[{"n":"self"}],"o":{"n":"char2"}}],[11,"not","","",107,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"not","","",108,{"i":[{"n":"self"}],"o":{"n":"ushort16"}}],[11,"not","","",147,{"i":[{"n":"self"}],"o":{"n":"char8"}}],[11,"not","","",130,{"i":[{"n":"self"}],"o":{"n":"ulong"}}],[11,"not","","",109,{"i":[{"n":"self"}],"o":{"n":"ushort"}}],[11,"not","","",112,{"i":[{"n":"self"}],"o":{"n":"uchar2"}}],[11,"not","","",144,{"i":[{"n":"self"}],"o":{"n":"ulong8"}}],[11,"not","","",116,{"i":[{"n":"self"}],"o":{"n":"long16"}}],[11,"not","","",111,{"i":[{"n":"self"}],"o":{"n":"ulong3"}}],[11,"not","","",115,{"i":[{"n":"self"}],"o":{"n":"ushort2"}}],[11,"not","","",118,{"i":[{"n":"self"}],"o":{"n":"int2"}}],[11,"not","","",126,{"i":[{"n":"self"}],"o":{"n":"uint4"}}],[11,"not","","",122,{"i":[{"n":"self"}],"o":{"n":"int4"}}],[11,"not","","",143,{"i":[{"n":"self"}],"o":{"n":"uchar4"}}],[11,"not","","",135,{"i":[{"n":"self"}],"o":{"n":"ushort8"}}],[11,"not","","",146,{"i":[{"n":"self"}],"o":{"n":"long4"}}],[11,"not","","",117,{"i":[{"n":"self"}],"o":{"n":"char4"}}],[11,"not","","",140,{"i":[{"n":"self"}],"o":{"n":"long8"}}],[11,"not","","",133,{"i":[{"n":"self"}],"o":{"n":"short16"}}],[11,"not","","",154,{"i":[{"n":"self"}],"o":{"n":"short3"}}],[11,"not","","",124,{"i":[{"n":"self"}],"o":{"n":"ulong4"}}],[11,"not","","",138,{"i":[{"n":"self"}],"o":{"n":"ulong16"}}],[11,"not","","",153,{"i":[{"n":"self"}],"o":{"n":"int16"}}],[11,"not","","",120,{"i":[{"n":"self"}],"o":{"n":"long"}}],[11,"not","","",125,{"i":[{"n":"self"}],"o":{"n":"long2"}}],[11,"not","","",141,{"i":[{"n":"self"}],"o":{"n":"short8"}}],[11,"not","","",131,{"i":[{"n":"self"}],"o":{"n":"uint8"}}],[11,"div","","",123,null],[11,"div","","",160,null],[11,"div","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"div","","",141,null],[11,"div","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"div","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"div","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"div","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"div","","",156,null],[11,"div","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"div","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"div","","",150,null],[11,"div","","",154,null],[11,"div","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"div","","",143,null],[11,"div","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"div","","",119,null],[11,"div","","",107,null],[11,"div","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"div","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"div","","",109,null],[11,"div","","",117,null],[11,"div","","",159,null],[11,"div","","",136,null],[11,"div","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"div","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"div","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"div","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"div","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"div","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"div","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"div","","",152,null],[11,"div","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"div","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"div","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"div","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"div","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"div","","",149,null],[11,"div","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"div","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"div","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"div","","",161,null],[11,"div","","",158,null],[11,"div","","",120,null],[11,"div","","",112,null],[11,"div","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"div","","",116,null],[11,"div","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"div","","",126,null],[11,"div","","",125,null],[11,"div","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"div","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"div","","",146,null],[11,"div","","",153,null],[11,"div","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"div","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"div","","",148,null],[11,"div","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"div","","",115,null],[11,"div","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"div","","",134,null],[11,"div","","",165,null],[11,"div","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"div","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"div","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"div","","",135,null],[11,"div","","",164,null],[11,"div","","",162,null],[11,"div","","",157,null],[11,"div","","",139,null],[11,"div","","",147,null],[11,"div","","",133,null],[11,"div","","",155,null],[11,"div","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"div","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"div","","",110,null],[11,"div","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"div","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"div","","",145,null],[11,"div","","",142,null],[11,"div","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"div","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"div","","",113,null],[11,"div","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"div","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"div","","",121,null],[11,"div","","",132,null],[11,"div","","",129,null],[11,"div","","",122,null],[11,"div","","",131,null],[11,"div","","",166,null],[11,"div","","",118,null],[11,"div","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"div","","",138,null],[11,"div","","",111,null],[11,"div","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"div","","",140,null],[11,"div","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"div","","",137,null],[11,"div","","",124,null],[11,"div","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"div","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"div","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"div","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"div","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"div","","",114,null],[11,"div","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"div","","",128,null],[11,"div","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"div","","",144,null],[11,"div","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"div","","",108,null],[11,"div","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"div","","",130,null],[11,"div","","",163,null],[11,"div","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"div","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"div","","",127,null],[11,"div","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"div","","",151,null],[11,"shr_assign","","",152,null],[11,"shr_assign","","",141,null],[11,"shr_assign","","",115,null],[11,"shr_assign","","",137,null],[11,"shr_assign","","",114,null],[11,"shr_assign","","",111,null],[11,"shr_assign","","",140,null],[11,"shr_assign","","",110,null],[11,"shr_assign","","",122,null],[11,"shr_assign","","",150,null],[11,"shr_assign","","",151,null],[11,"shr_assign","","",116,null],[11,"shr_assign","","",123,null],[11,"shr_assign","","",107,null],[11,"shr_assign","","",130,null],[11,"shr_assign","","",121,null],[11,"shr_assign","","",154,null],[11,"shr_assign","","",146,null],[11,"shr_assign","","",147,null],[11,"shr_assign","","",134,null],[11,"shr_assign","","",129,null],[11,"shr_assign","","",139,null],[11,"shr_assign","","",109,null],[11,"shr_assign","","",128,null],[11,"shr_assign","","",144,null],[11,"shr_assign","","",133,null],[11,"shr_assign","","",148,null],[11,"shr_assign","","",108,null],[11,"shr_assign","","",125,null],[11,"shr_assign","","",124,null],[11,"shr_assign","","",153,null],[11,"shr_assign","","",120,null],[11,"shr_assign","","",127,null],[11,"shr_assign","","",138,null],[11,"shr_assign","","",145,null],[11,"shr_assign","","",132,null],[11,"shr_assign","","",118,null],[11,"shr_assign","","",143,null],[11,"shr_assign","","",119,null],[11,"shr_assign","","",142,null],[11,"shr_assign","","",126,null],[11,"shr_assign","","",117,null],[11,"shr_assign","","",135,null],[11,"shr_assign","","",149,null],[11,"shr_assign","","",131,null],[11,"shr_assign","","",112,null],[11,"shr_assign","","",136,null],[11,"shr_assign","","",113,null],[11,"sum","","",132,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"sum","","",128,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"sum","","",126,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"sum","","",129,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"sum","","",130,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"sum","","",119,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"sum","","",165,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"sum","","",151,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"sum","","",117,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"sum","","",149,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"sum","","",139,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"sum","","",141,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"sum","","",151,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"sum","","",146,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"sum","","",142,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"sum","","",127,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"sum","","",143,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"sum","","",154,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"sum","","",114,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"sum","","",114,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"sum","","",153,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"sum","","",153,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"sum","","",113,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"sum","","",152,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"sum","","",120,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"sum","","",110,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"sum","","",110,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"sum","","",113,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"sum","","",129,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"sum","","",139,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"sum","","",164,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"sum","","",131,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"sum","","",135,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"sum","","",158,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"sum","","",130,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"sum","","",166,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"sum","","",111,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"sum","","",136,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"sum","","",123,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"sum","","",133,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"sum","","",108,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"sum","","",144,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"sum","","",112,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"sum","","",161,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"sum","","",122,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"sum","","",116,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"sum","","",124,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"sum","","",117,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"sum","","",156,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"sum","","",118,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"sum","","",154,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"sum","","",159,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"sum","","",162,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"sum","","",147,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"sum","","",120,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"sum","","",161,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"sum","","",159,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"sum","","",141,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"sum","","",150,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"sum","","",163,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"sum","","",116,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"sum","","",155,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"sum","","",140,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"sum","","",118,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"sum","","",132,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"sum","","",142,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"sum","","",155,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"sum","","",123,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"sum","","",121,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"sum","","",107,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"sum","","",157,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"sum","","",166,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"sum","","",164,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"sum","","",109,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"sum","","",128,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"sum","","",134,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"sum","","",147,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"sum","","",109,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"sum","","",134,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"sum","","",144,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"sum","","",143,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"sum","","",160,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"sum","","",125,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"sum","","",148,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"sum","","",163,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"sum","","",158,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"sum","","",108,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"sum","","",119,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"sum","","",140,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"sum","","",135,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"sum","","",127,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"sum","","",145,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"sum","","",138,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"sum","","",157,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"sum","","",131,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"sum","","",152,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"sum","","",126,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"sum","","",115,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"sum","","",121,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"sum","","",145,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"sum","","",150,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"sum","","",136,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"sum","","",165,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"sum","","",138,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"sum","","",149,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"sum","","",137,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"sum","","",133,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"sum","","",111,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"sum","","",122,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"sum","","",162,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"sum","","",156,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"sum","","",146,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"sum","","",107,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"sum","","",148,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"sum","","",160,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"sum","","",124,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"sum","","",115,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"sum","","",125,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"sum","","",112,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"sum","","",137,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"bitand","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"bitand","","",111,null],[11,"bitand","","",130,null],[11,"bitand","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"bitand","","",146,null],[11,"bitand","","",144,null],[11,"bitand","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"bitand","","",132,null],[11,"bitand","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"bitand","","",124,null],[11,"bitand","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"bitand","","",127,null],[11,"bitand","","",141,null],[11,"bitand","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"bitand","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"bitand","","",117,null],[11,"bitand","","",129,null],[11,"bitand","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"bitand","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"bitand","","",122,null],[11,"bitand","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"bitand","","",123,null],[11,"bitand","","",131,null],[11,"bitand","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"bitand","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"bitand","","",154,null],[11,"bitand","","",143,null],[11,"bitand","","",133,null],[11,"bitand","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"bitand","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"bitand","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"bitand","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"bitand","","",128,null],[11,"bitand","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"bitand","","",109,null],[11,"bitand","","",112,null],[11,"bitand","","",135,null],[11,"bitand","","",147,null],[11,"bitand","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"bitand","","",110,null],[11,"bitand","","",115,null],[11,"bitand","","",145,null],[11,"bitand","","",119,null],[11,"bitand","","",148,null],[11,"bitand","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"bitand","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"bitand","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"bitand","","",136,null],[11,"bitand","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"bitand","","",113,null],[11,"bitand","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"bitand","","",121,null],[11,"bitand","","",137,null],[11,"bitand","","",134,null],[11,"bitand","","",140,null],[11,"bitand","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"bitand","","",153,null],[11,"bitand","","",142,null],[11,"bitand","","",114,null],[11,"bitand","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"bitand","","",149,null],[11,"bitand","","",139,null],[11,"bitand","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"bitand","","",120,null],[11,"bitand","","",151,null],[11,"bitand","","",108,null],[11,"bitand","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"bitand","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"bitand","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"bitand","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"bitand","","",118,null],[11,"bitand","","",150,null],[11,"bitand","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"bitand","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"bitand","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"bitand","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"bitand","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"bitand","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"bitand","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"bitand","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"bitand","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"bitand","","",116,null],[11,"bitand","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"bitand","","",126,null],[11,"bitand","","",138,null],[11,"bitand","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"bitand","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"bitand","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"bitand","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"bitand","","",125,null],[11,"bitand","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"bitand","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"bitand","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"bitand","","",152,null],[11,"bitand","","",107,null],[11,"bitand","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"rem","","",129,null],[11,"rem","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"rem","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"rem","","",156,null],[11,"rem","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"rem","","",164,null],[11,"rem","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"rem","","",159,null],[11,"rem","","",151,null],[11,"rem","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"rem","","",145,null],[11,"rem","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"rem","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"rem","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"rem","","",115,null],[11,"rem","","",124,null],[11,"rem","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"rem","","",125,null],[11,"rem","","",140,null],[11,"rem","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"rem","","",150,null],[11,"rem","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"rem","","",147,null],[11,"rem","","",139,null],[11,"rem","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"rem","","",133,null],[11,"rem","","",122,null],[11,"rem","","",127,null],[11,"rem","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"rem","","",136,null],[11,"rem","","",132,null],[11,"rem","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"rem","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"rem","","",107,null],[11,"rem","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"rem","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"rem","","",158,null],[11,"rem","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"rem","","",148,null],[11,"rem","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"rem","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"rem","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"rem","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"rem","","",135,null],[11,"rem","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"rem","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"rem","","",108,null],[11,"rem","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"rem","","",121,null],[11,"rem","","",109,null],[11,"rem","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"rem","","",152,null],[11,"rem","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"rem","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"rem","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"rem","","",134,null],[11,"rem","","",143,null],[11,"rem","","",123,null],[11,"rem","","",141,null],[11,"rem","","",114,null],[11,"rem","","",111,null],[11,"rem","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"rem","","",113,null],[11,"rem","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"rem","","",131,null],[11,"rem","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"rem","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"rem","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"rem","","",161,null],[11,"rem","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"rem","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"rem","","",130,null],[11,"rem","","",157,null],[11,"rem","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"rem","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"rem","","",116,null],[11,"rem","","",110,null],[11,"rem","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"rem","","",165,null],[11,"rem","","",163,null],[11,"rem","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"rem","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"rem","","",117,null],[11,"rem","","",166,null],[11,"rem","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"rem","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"rem","","",128,null],[11,"rem","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"rem","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"rem","","",155,null],[11,"rem","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"rem","","",142,null],[11,"rem","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"rem","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"rem","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"rem","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"rem","","",118,null],[11,"rem","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"rem","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"rem","","",144,null],[11,"rem","","",154,null],[11,"rem","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"rem","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"rem","","",146,null],[11,"rem","","",160,null],[11,"rem","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"rem","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"rem","","",153,null],[11,"rem","","",119,null],[11,"rem","","",137,null],[11,"rem","","",162,null],[11,"rem","","",138,null],[11,"rem","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"rem","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"rem","","",120,null],[11,"rem","","",126,null],[11,"rem","","",149,null],[11,"rem","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"rem","","",112,null],[11,"rem","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"partial_cmp","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"le","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"gt","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"ge","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"le","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"gt","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"ge","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"le","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"gt","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"ge","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"le","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"gt","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"ge","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"le","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"gt","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"ge","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"le","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"gt","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"ge","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"le","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"gt","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"ge","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"le","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"gt","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"ge","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"le","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"gt","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"ge","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"le","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"gt","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"ge","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"le","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"gt","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"ge","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"le","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"gt","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"ge","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"le","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"gt","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"ge","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"le","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"gt","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"ge","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"le","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"gt","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"ge","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"le","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"gt","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"ge","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"le","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"gt","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"ge","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"le","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"gt","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"ge","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"le","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"gt","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"ge","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"le","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"gt","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"ge","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"le","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"gt","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"ge","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"le","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"gt","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"ge","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"le","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"gt","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"ge","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"le","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"gt","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"ge","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"le","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"gt","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"ge","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"le","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"gt","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"ge","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"le","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"gt","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"ge","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"le","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"gt","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"ge","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"le","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"gt","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"ge","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"le","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"gt","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"ge","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"le","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"gt","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"ge","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"le","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"gt","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"ge","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"le","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"gt","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"ge","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"le","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"gt","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"ge","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"le","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"gt","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"ge","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"le","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"gt","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"ge","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"le","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"gt","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"ge","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"le","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"gt","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"ge","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"le","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"gt","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"ge","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"le","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"gt","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"ge","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"le","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"gt","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"ge","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"le","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"gt","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"ge","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"le","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"gt","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"ge","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"le","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"gt","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"ge","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"le","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"gt","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"ge","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"le","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"gt","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"ge","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"le","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"gt","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"ge","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"le","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"gt","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"ge","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"le","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"gt","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"ge","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"le","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"gt","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"ge","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"le","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"gt","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"ge","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"le","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"gt","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"ge","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"le","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"gt","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"ge","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"le","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"gt","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"ge","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"le","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"gt","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"ge","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"le","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"gt","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"ge","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"le","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"gt","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"ge","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"le","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"gt","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"ge","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"le","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"gt","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"ge","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"le","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"gt","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"ge","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"sub","","",165,null],[11,"sub","","",157,null],[11,"sub","","",143,null],[11,"sub","","",118,null],[11,"sub","","",161,null],[11,"sub","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"sub","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"sub","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"sub","","",131,null],[11,"sub","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"sub","","",116,null],[11,"sub","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"sub","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"sub","","",114,null],[11,"sub","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"sub","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"sub","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"sub","","",151,null],[11,"sub","","",153,null],[11,"sub","","",130,null],[11,"sub","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"sub","","",156,null],[11,"sub","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"sub","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"sub","","",127,null],[11,"sub","","",162,null],[11,"sub","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"sub","","",144,null],[11,"sub","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"sub","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"sub","","",152,null],[11,"sub","","",109,null],[11,"sub","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"sub","","",133,null],[11,"sub","","",122,null],[11,"sub","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"sub","","",159,null],[11,"sub","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"sub","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"sub","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"sub","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"sub","","",119,null],[11,"sub","","",132,null],[11,"sub","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"sub","","",142,null],[11,"sub","","",121,null],[11,"sub","","",117,null],[11,"sub","","",125,null],[11,"sub","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"sub","","",129,null],[11,"sub","","",135,null],[11,"sub","","",164,null],[11,"sub","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"sub","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"sub","","",112,null],[11,"sub","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"sub","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"sub","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"sub","","",145,null],[11,"sub","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"sub","","",160,null],[11,"sub","","",120,null],[11,"sub","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"sub","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"sub","","",149,null],[11,"sub","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"sub","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"sub","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"sub","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"sub","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"sub","","",128,null],[11,"sub","","",141,null],[11,"sub","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"sub","","",150,null],[11,"sub","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"sub","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"sub","","",140,null],[11,"sub","","",166,null],[11,"sub","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"sub","","",147,null],[11,"sub","","",163,null],[11,"sub","","",110,null],[11,"sub","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"sub","","",136,null],[11,"sub","","",126,null],[11,"sub","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"sub","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"sub","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"sub","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"sub","","",111,null],[11,"sub","","",123,null],[11,"sub","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"sub","","",107,null],[11,"sub","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"sub","","",146,null],[11,"sub","","",138,null],[11,"sub","","",148,null],[11,"sub","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"sub","","",139,null],[11,"sub","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"sub","","",108,null],[11,"sub","","",124,null],[11,"sub","","",115,null],[11,"sub","","",155,null],[11,"sub","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"sub","","",154,null],[11,"sub","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"sub","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"sub","","",134,null],[11,"sub","","",137,null],[11,"sub","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"sub","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"sub","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"sub","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"sub","","",158,null],[11,"sub","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"sub","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"sub","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"sub","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"sub","","",113,null],[11,"div_assign","","",159,null],[11,"div_assign","","",110,null],[11,"div_assign","","",148,null],[11,"div_assign","","",140,null],[11,"div_assign","","",166,null],[11,"div_assign","","",128,null],[11,"div_assign","","",107,null],[11,"div_assign","","",156,null],[11,"div_assign","","",158,null],[11,"div_assign","","",114,null],[11,"div_assign","","",165,null],[11,"div_assign","","",142,null],[11,"div_assign","","",108,null],[11,"div_assign","","",137,null],[11,"div_assign","","",136,null],[11,"div_assign","","",130,null],[11,"div_assign","","",153,null],[11,"div_assign","","",150,null],[11,"div_assign","","",113,null],[11,"div_assign","","",120,null],[11,"div_assign","","",125,null],[11,"div_assign","","",109,null],[11,"div_assign","","",155,null],[11,"div_assign","","",151,null],[11,"div_assign","","",124,null],[11,"div_assign","","",147,null],[11,"div_assign","","",133,null],[11,"div_assign","","",118,null],[11,"div_assign","","",116,null],[11,"div_assign","","",111,null],[11,"div_assign","","",135,null],[11,"div_assign","","",160,null],[11,"div_assign","","",146,null],[11,"div_assign","","",129,null],[11,"div_assign","","",143,null],[11,"div_assign","","",138,null],[11,"div_assign","","",139,null],[11,"div_assign","","",123,null],[11,"div_assign","","",119,null],[11,"div_assign","","",126,null],[11,"div_assign","","",115,null],[11,"div_assign","","",132,null],[11,"div_assign","","",161,null],[11,"div_assign","","",144,null],[11,"div_assign","","",149,null],[11,"div_assign","","",145,null],[11,"div_assign","","",112,null],[11,"div_assign","","",134,null],[11,"div_assign","","",127,null],[11,"div_assign","","",131,null],[11,"div_assign","","",162,null],[11,"div_assign","","",152,null],[11,"div_assign","","",164,null],[11,"div_assign","","",121,null],[11,"div_assign","","",122,null],[11,"div_assign","","",163,null],[11,"div_assign","","",154,null],[11,"div_assign","","",117,null],[11,"div_assign","","",141,null],[11,"div_assign","","",157,null],[11,"mul_assign","","",127,null],[11,"mul_assign","","",160,null],[11,"mul_assign","","",165,null],[11,"mul_assign","","",141,null],[11,"mul_assign","","",138,null],[11,"mul_assign","","",125,null],[11,"mul_assign","","",131,null],[11,"mul_assign","","",156,null],[11,"mul_assign","","",149,null],[11,"mul_assign","","",159,null],[11,"mul_assign","","",158,null],[11,"mul_assign","","",130,null],[11,"mul_assign","","",122,null],[11,"mul_assign","","",136,null],[11,"mul_assign","","",155,null],[11,"mul_assign","","",133,null],[11,"mul_assign","","",139,null],[11,"mul_assign","","",157,null],[11,"mul_assign","","",144,null],[11,"mul_assign","","",116,null],[11,"mul_assign","","",152,null],[11,"mul_assign","","",137,null],[11,"mul_assign","","",118,null],[11,"mul_assign","","",140,null],[11,"mul_assign","","",150,null],[11,"mul_assign","","",111,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",154,null],[11,"mul_assign","","",145,null],[11,"mul_assign","","",115,null],[11,"mul_assign","","",123,null],[11,"mul_assign","","",142,null],[11,"mul_assign","","",161,null],[11,"mul_assign","","",164,null],[11,"mul_assign","","",162,null],[11,"mul_assign","","",107,null],[11,"mul_assign","","",110,null],[11,"mul_assign","","",117,null],[11,"mul_assign","","",163,null],[11,"mul_assign","","",135,null],[11,"mul_assign","","",121,null],[11,"mul_assign","","",147,null],[11,"mul_assign","","",153,null],[11,"mul_assign","","",124,null],[11,"mul_assign","","",120,null],[11,"mul_assign","","",143,null],[11,"mul_assign","","",113,null],[11,"mul_assign","","",166,null],[11,"mul_assign","","",114,null],[11,"mul_assign","","",134,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",128,null],[11,"mul_assign","","",148,null],[11,"mul_assign","","",112,null],[11,"mul_assign","","",151,null],[11,"mul_assign","","",108,null],[11,"mul_assign","","",126,null],[11,"mul_assign","","",109,null],[11,"mul_assign","","",129,null],[11,"mul_assign","","",146,null],[11,"hash","","",121,null],[11,"hash","","",127,null],[11,"hash","","",122,null],[11,"hash","","",131,null],[11,"hash","","",118,null],[11,"hash","","",109,null],[11,"hash","","",130,null],[11,"hash","","",146,null],[11,"hash","","",129,null],[11,"hash","","",139,null],[11,"hash","","",147,null],[11,"hash","","",134,null],[11,"hash","","",154,null],[11,"hash","","",117,null],[11,"hash","","",135,null],[11,"hash","","",148,null],[11,"hash","","",150,null],[11,"hash","","",112,null],[11,"hash","","",141,null],[11,"hash","","",108,null],[11,"hash","","",125,null],[11,"hash","","",149,null],[11,"hash","","",111,null],[11,"hash","","",137,null],[11,"hash","","",126,null],[11,"hash","","",115,null],[11,"hash","","",140,null],[11,"hash","","",132,null],[11,"hash","","",144,null],[11,"hash","","",116,null],[11,"hash","","",153,null],[11,"hash","","",114,null],[11,"hash","","",107,null],[11,"hash","","",120,null],[11,"hash","","",151,null],[11,"hash","","",119,null],[11,"hash","","",128,null],[11,"hash","","",123,null],[11,"hash","","",136,null],[11,"hash","","",110,null],[11,"hash","","",143,null],[11,"hash","","",142,null],[11,"hash","","",145,null],[11,"hash","","",113,null],[11,"hash","","",138,null],[11,"hash","","",124,null],[11,"hash","","",152,null],[11,"hash","","",133,null],[11,"zero","","",145,{"o":{"n":"short"}}],[11,"is_zero","","",145,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",121,{"o":{"n":"int8"}}],[11,"is_zero","","",121,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",148,{"o":{"n":"ushort4"}}],[11,"is_zero","","",148,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",132,{"o":{"n":"uint3"}}],[11,"is_zero","","",132,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",119,{"o":{"n":"char3"}}],[11,"is_zero","","",119,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",157,{"o":{"n":"float"}}],[11,"is_zero","","",157,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",153,{"o":{"n":"int16"}}],[11,"is_zero","","",153,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",114,{"o":{"n":"uchar3"}}],[11,"is_zero","","",114,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",147,{"o":{"n":"char8"}}],[11,"is_zero","","",147,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",128,{"o":{"n":"uchar16"}}],[11,"is_zero","","",128,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",113,{"o":{"n":"uchar"}}],[11,"is_zero","","",113,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",110,{"o":{"n":"uint2"}}],[11,"is_zero","","",110,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",115,{"o":{"n":"ushort2"}}],[11,"is_zero","","",115,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",144,{"o":{"n":"ulong8"}}],[11,"is_zero","","",144,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",112,{"o":{"n":"uchar2"}}],[11,"is_zero","","",112,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",159,{"o":{"n":"double"}}],[11,"is_zero","","",159,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",126,{"o":{"n":"uint4"}}],[11,"is_zero","","",126,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",138,{"o":{"n":"ulong16"}}],[11,"is_zero","","",138,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",131,{"o":{"n":"uint8"}}],[11,"is_zero","","",131,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",140,{"o":{"n":"long8"}}],[11,"is_zero","","",140,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",156,{"o":{"n":"float3"}}],[11,"is_zero","","",156,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",122,{"o":{"n":"int4"}}],[11,"is_zero","","",122,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",123,{"o":{"n":"long3"}}],[11,"is_zero","","",123,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",137,{"o":{"n":"uchar8"}}],[11,"is_zero","","",137,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",133,{"o":{"n":"short16"}}],[11,"is_zero","","",133,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",142,{"o":{"n":"uint"}}],[11,"is_zero","","",142,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",155,{"o":{"n":"double2"}}],[11,"is_zero","","",155,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",118,{"o":{"n":"int2"}}],[11,"is_zero","","",118,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",129,{"o":{"n":"char2"}}],[11,"is_zero","","",129,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",164,{"o":{"n":"double4"}}],[11,"is_zero","","",164,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",151,{"o":{"n":"int3"}}],[11,"is_zero","","",151,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",111,{"o":{"n":"ulong3"}}],[11,"is_zero","","",111,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",116,{"o":{"n":"long16"}}],[11,"is_zero","","",116,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",135,{"o":{"n":"ushort8"}}],[11,"is_zero","","",135,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",130,{"o":{"n":"ulong"}}],[11,"is_zero","","",130,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",139,{"o":{"n":"ulong2"}}],[11,"is_zero","","",139,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",117,{"o":{"n":"char4"}}],[11,"is_zero","","",117,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",134,{"o":{"n":"short2"}}],[11,"is_zero","","",134,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",160,{"o":{"n":"float4"}}],[11,"is_zero","","",160,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",120,{"o":{"n":"long"}}],[11,"is_zero","","",120,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",162,{"o":{"n":"double3"}}],[11,"is_zero","","",162,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",127,{"o":{"n":"uint16"}}],[11,"is_zero","","",127,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",154,{"o":{"n":"short3"}}],[11,"is_zero","","",154,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",109,{"o":{"n":"ushort"}}],[11,"is_zero","","",109,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",150,{"o":{"n":"short4"}}],[11,"is_zero","","",150,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",125,{"o":{"n":"long2"}}],[11,"is_zero","","",125,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",146,{"o":{"n":"long4"}}],[11,"is_zero","","",146,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",143,{"o":{"n":"uchar4"}}],[11,"is_zero","","",143,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",166,{"o":{"n":"float8"}}],[11,"is_zero","","",166,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",152,{"o":{"n":"char16"}}],[11,"is_zero","","",152,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",136,{"o":{"n":"char"}}],[11,"is_zero","","",136,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",161,{"o":{"n":"double16"}}],[11,"is_zero","","",161,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",149,{"o":{"n":"ushort3"}}],[11,"is_zero","","",149,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",163,{"o":{"n":"float16"}}],[11,"is_zero","","",163,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",158,{"o":{"n":"float2"}}],[11,"is_zero","","",158,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",108,{"o":{"n":"ushort16"}}],[11,"is_zero","","",108,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",107,{"o":{"n":"int"}}],[11,"is_zero","","",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",141,{"o":{"n":"short8"}}],[11,"is_zero","","",141,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",124,{"o":{"n":"ulong4"}}],[11,"is_zero","","",124,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",165,{"o":{"n":"double8"}}],[11,"is_zero","","",165,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"rem_assign","","",116,null],[11,"rem_assign","","",146,null],[11,"rem_assign","","",114,null],[11,"rem_assign","","",152,null],[11,"rem_assign","","",121,null],[11,"rem_assign","","",164,null],[11,"rem_assign","","",117,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",111,null],[11,"rem_assign","","",133,null],[11,"rem_assign","","",154,null],[11,"rem_assign","","",149,null],[11,"rem_assign","","",130,null],[11,"rem_assign","","",126,null],[11,"rem_assign","","",136,null],[11,"rem_assign","","",156,null],[11,"rem_assign","","",161,null],[11,"rem_assign","","",118,null],[11,"rem_assign","","",125,null],[11,"rem_assign","","",109,null],[11,"rem_assign","","",112,null],[11,"rem_assign","","",129,null],[11,"rem_assign","","",162,null],[11,"rem_assign","","",122,null],[11,"rem_assign","","",124,null],[11,"rem_assign","","",120,null],[11,"rem_assign","","",155,null],[11,"rem_assign","","",153,null],[11,"rem_assign","","",128,null],[11,"rem_assign","","",139,null],[11,"rem_assign","","",107,null],[11,"rem_assign","","",144,null],[11,"rem_assign","","",108,null],[11,"rem_assign","","",166,null],[11,"rem_assign","","",150,null],[11,"rem_assign","","",142,null],[11,"rem_assign","","",123,null],[11,"rem_assign","","",159,null],[11,"rem_assign","","",160,null],[11,"rem_assign","","",110,null],[11,"rem_assign","","",119,null],[11,"rem_assign","","",147,null],[11,"rem_assign","","",127,null],[11,"rem_assign","","",141,null],[11,"rem_assign","","",134,null],[11,"rem_assign","","",158,null],[11,"rem_assign","","",143,null],[11,"rem_assign","","",140,null],[11,"rem_assign","","",138,null],[11,"rem_assign","","",165,null],[11,"rem_assign","","",115,null],[11,"rem_assign","","",113,null],[11,"rem_assign","","",137,null],[11,"rem_assign","","",148,null],[11,"rem_assign","","",163,null],[11,"rem_assign","","",135,null],[11,"rem_assign","","",145,null],[11,"rem_assign","","",151,null],[11,"rem_assign","","",157,null],[11,"rem_assign","","",131,null],[11,"mul","","",136,null],[11,"mul","","",117,null],[11,"mul","","",156,null],[11,"mul","","",164,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"mul","","",129,null],[11,"mul","","",109,null],[11,"mul","","",139,null],[11,"mul","","",146,null],[11,"mul","","",120,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"mul","","",116,null],[11,"mul","","",150,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"mul","","",160,null],[11,"mul","","",107,null],[11,"mul","","",153,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"mul","","",112,null],[11,"mul","","",155,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"mul","","",160,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"mul","","",120,null],[11,"mul","","",148,null],[11,"mul","","",122,null],[11,"mul","","",119,null],[11,"mul","","",127,null],[11,"mul","","",145,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"mul","","",165,null],[11,"mul","","",162,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"mul","","",112,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"mul","","",137,null],[11,"mul","","",113,null],[11,"mul","","",127,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"mul","","",113,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"mul","","",159,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"mul","","",126,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"mul","","",144,null],[11,"mul","","",155,null],[11,"mul","","",162,null],[11,"mul","","",114,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"mul","","",161,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"mul","","",157,null],[11,"mul","","",139,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"mul","","",154,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"mul","","",140,null],[11,"mul","","",132,null],[11,"mul","","",149,null],[11,"mul","","",133,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"mul","","",141,null],[11,"mul","","",145,null],[11,"mul","","",137,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"mul","","",128,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"mul","","",135,null],[11,"mul","","",164,null],[11,"mul","","",108,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"mul","","",147,null],[11,"mul","","",151,null],[11,"mul","","",135,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"mul","","",111,null],[11,"mul","","",154,null],[11,"mul","","",114,null],[11,"mul","","",134,null],[11,"mul","","",136,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"mul","","",131,null],[11,"mul","","",161,null],[11,"mul","","",138,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"mul","","",158,null],[11,"mul","","",150,null],[11,"mul","","",151,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"mul","","",149,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"mul","","",110,null],[11,"mul","","",116,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"mul","","",126,null],[11,"mul","","",163,null],[11,"mul","","",128,null],[11,"mul","","",141,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"mul","","",140,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"mul","","",165,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"mul","","",115,null],[11,"mul","","",138,null],[11,"mul","","",129,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"mul","","",143,null],[11,"mul","","",133,null],[11,"mul","","",117,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"mul","","",130,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"mul","","",148,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"mul","","",143,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"mul","","",111,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"mul","","",124,null],[11,"mul","","",159,null],[11,"mul","","",158,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"mul","","",152,null],[11,"mul","","",153,null],[11,"mul","","",163,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"mul","","",146,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"mul","","",147,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"mul","","",142,null],[11,"mul","","",118,null],[11,"mul","","",124,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"mul","","",115,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"mul","","",125,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"mul","","",118,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"mul","","",121,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"mul","","",156,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"mul","","",130,null],[11,"mul","","",134,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"mul","","",157,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"mul","","",108,null],[11,"mul","","",125,null],[11,"mul","","",121,null],[11,"mul","","",107,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"mul","","",152,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"mul","","",109,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"mul","","",166,null],[11,"mul","","",110,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"mul","","",132,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"mul","","",123,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"mul","","",131,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"mul","","",142,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"mul","","",123,null],[11,"mul","","",166,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"mul","","",119,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"mul","","",122,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"mul","","",144,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"fmt","ocl::builders","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"devicespecifier"}}],[11,"all","","Returns a `DeviceSpecifier::All` variant which specifies all devices on a platform.",39,{"i":[{"n":"self"}],"o":{"n":"devicespecifier"}}],[11,"first","","Returns a `DeviceSpecifier::First` variant which specifies only the first device on a platform.",39,{"i":[{"n":"self"}],"o":{"n":"devicespecifier"}}],[11,"single","","Returns a `DeviceSpecifier::Single` variant which specifies a single device.",39,{"i":[{"n":"self"},{"n":"device"}],"o":{"n":"devicespecifier"}}],[11,"list","","Returns a `DeviceSpecifier::List` variant which specifies a list of devices.",39,{"i":[{"n":"self"},{"g":["device"],"n":"vec"}],"o":{"n":"devicespecifier"}}],[11,"indices","","Returns a `DeviceSpecifier::Indices` variant which specifies a list of devices by index.",39,{"i":[{"n":"self"},{"g":["usize"],"n":"vec"}],"o":{"n":"devicespecifier"}}],[11,"wrapping_indices","","Returns a `DeviceSpecifier::WrappingIndices` variant, specifying a list of devices by indices which are wrapped around (simply using the modulo operator) so that every index is always valid.",39,{"i":[{"n":"self"},{"g":["usize"],"n":"vec"}],"o":{"n":"devicespecifier"}}],[11,"type_flags","","Returns a `DeviceSpecifier::TypeFlags` variant which specifies a list of devices using a conventional bitfield.",39,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"devicespecifier"}}],[11,"to_device_list","","Returns the list of devices matching the parameters specified by this `DeviceSpecifier`",39,{"i":[{"n":"self"},{"n":"option"}],"o":{"g":["vec"],"n":"oclresult"}}],[11,"default","","",39,{"o":{"n":"devicespecifier"}}],[11,"from","","",39,{"i":[{"n":"usize"}],"o":{"n":"devicespecifier"}}],[11,"from","","",39,null],[11,"from","","",39,{"i":[{"n":"vec"}],"o":{"n":"devicespecifier"}}],[11,"from","","",39,null],[11,"from","","",39,{"i":[{"n":"vec"}],"o":{"n":"devicespecifier"}}],[11,"from","","",39,{"i":[{"n":"device"}],"o":{"n":"devicespecifier"}}],[11,"from","","",39,{"i":[{"n":"device"}],"o":{"n":"devicespecifier"}}],[11,"from","","",39,{"i":[{"n":"deviceidcore"}],"o":{"n":"devicespecifier"}}],[11,"from","","",39,{"i":[{"n":"deviceidcore"}],"o":{"n":"devicespecifier"}}],[11,"from","","",39,{"i":[{"n":"devicetype"}],"o":{"n":"devicespecifier"}}],[11,"new","","Creates a new `ContextBuilder`",167,{"o":{"n":"contextbuilder"}}],[11,"properties","","Specifies all context properties directly.",167,{"i":[{"n":"self"},{"n":"contextproperties"}],"o":{"n":"contextbuilder"}}],[11,"property","","Specifies a context property.",167,{"i":[{"n":"self"},{"n":"contextpropertyvalue"}],"o":{"n":"contextbuilder"}}],[11,"platform","","Specifies a platform.",167,{"i":[{"n":"self"},{"n":"platform"}],"o":{"n":"contextbuilder"}}],[11,"gl_context","","Specifies an OpenGL context to associate with.",167,null],[11,"glx_display","","Specifies a Display pointer for the GLX context.",167,null],[11,"devices","","Specifies a list of devices with which to associate the context.",167,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"contextbuilder"}}],[11,"build","","Returns a new `Context` with the parameters hitherinforthto specified (say what?).",167,{"i":[{"n":"self"}],"o":{"g":["context"],"n":"oclresult"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"buildopt"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cmplr_def","","Returns a `BuildOpt::CmplrDefine`.",38,{"i":[{"n":"s"},{"n":"i32"}],"o":{"n":"buildopt"}}],[11,"include_def","","Returns a `BuildOpt::IncludeDefine`.",38,{"i":[{"n":"s"},{"n":"string"}],"o":{"n":"buildopt"}}],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"programbuilder"}}],[11,"fmt","","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new, empty, build configuration object.",168,{"o":{"n":"programbuilder"}}],[11,"cmplr_def","","Adds a build option containing a compiler command line definition. Formatted as `-D {name}={val}`.",168,{"i":[{"n":"self"},{"n":"s"},{"n":"i32"}],"o":{"n":"programbuilder"}}],[11,"cmplr_opt","","Adds a build option containing a raw compiler command line parameter. Formatted as `{}` (exact text).",168,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"programbuilder"}}],[11,"bo","","Pushes pre-created build option to the list of options.",168,{"i":[{"n":"self"},{"n":"buildopt"}],"o":{"n":"programbuilder"}}],[11,"src_file","","Adds the contents of a file to the program.",168,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"programbuilder"}}],[11,"source_file","","Opens a file and adds its contents to the program source.",168,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"programbuilder"}}],[11,"src","","Adds raw text to the program source.",168,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"programbuilder"}}],[11,"source","","Adds raw text to the program source.",168,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"programbuilder"}}],[11,"binaries","","Adds a binary to be loaded.",168,null],[11,"il","","Adds Adds SPIR-V or an implementation-defined intermediate language to this program.",168,null],[11,"devices","","Specifies a list of devices to build this program on. The devices must be associated with the context passed to `::build` later on.",168,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"programbuilder"}}],[11,"get_device_spec","","Returns the devices specified to be associated the program.",168,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_compiler_options","","Returns a concatenated string of command line options to be passed to the compiler when building this program.",168,{"i":[{"n":"self"}],"o":{"g":["cstring"],"n":"oclresult"}}],[11,"get_src_strings","","Returns the final program source code as a list of strings.",168,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclresult"}}],[11,"build","","Returns a newly built Program.",168,{"i":[{"n":"self"},{"n":"context"}],"o":{"g":["program"],"n":"oclresult"}}],[11,"new","ocl::prm","",136,{"i":[{"n":"i8"}],"o":{"n":"char"}}],[11,"splat","","",136,{"i":[{"n":"i8"}],"o":{"n":"char"}}],[11,"zero","","",136,{"o":{"n":"char"}}],[11,"is_zero","","",136,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",136,{"o":{"n":"char"}}],[11,"new","","",129,{"i":[{"n":"i8"},{"n":"i8"}],"o":{"n":"char2"}}],[11,"splat","","",129,{"i":[{"n":"i8"}],"o":{"n":"char2"}}],[11,"zero","","",129,{"o":{"n":"char2"}}],[11,"is_zero","","",129,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",129,{"o":{"n":"char2"}}],[11,"new","","",119,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char3"}}],[11,"splat","","",119,{"i":[{"n":"i8"}],"o":{"n":"char3"}}],[11,"zero","","",119,{"o":{"n":"char3"}}],[11,"is_zero","","",119,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",119,{"o":{"n":"char3"}}],[11,"new","","",117,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char4"}}],[11,"splat","","",117,{"i":[{"n":"i8"}],"o":{"n":"char4"}}],[11,"zero","","",117,{"o":{"n":"char4"}}],[11,"is_zero","","",117,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",117,{"o":{"n":"char4"}}],[11,"new","","",147,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char8"}}],[11,"splat","","",147,{"i":[{"n":"i8"}],"o":{"n":"char8"}}],[11,"zero","","",147,{"o":{"n":"char8"}}],[11,"is_zero","","",147,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",147,{"o":{"n":"char8"}}],[11,"new","","",152,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char16"}}],[11,"splat","","",152,{"i":[{"n":"i8"}],"o":{"n":"char16"}}],[11,"zero","","",152,{"o":{"n":"char16"}}],[11,"is_zero","","",152,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",152,{"o":{"n":"char16"}}],[11,"new","","",113,{"i":[{"n":"u8"}],"o":{"n":"uchar"}}],[11,"splat","","",113,{"i":[{"n":"u8"}],"o":{"n":"uchar"}}],[11,"zero","","",113,{"o":{"n":"uchar"}}],[11,"is_zero","","",113,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",113,{"o":{"n":"uchar"}}],[11,"new","","",112,{"i":[{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar2"}}],[11,"splat","","",112,{"i":[{"n":"u8"}],"o":{"n":"uchar2"}}],[11,"zero","","",112,{"o":{"n":"uchar2"}}],[11,"is_zero","","",112,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",112,{"o":{"n":"uchar2"}}],[11,"new","","",114,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar3"}}],[11,"splat","","",114,{"i":[{"n":"u8"}],"o":{"n":"uchar3"}}],[11,"zero","","",114,{"o":{"n":"uchar3"}}],[11,"is_zero","","",114,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",114,{"o":{"n":"uchar3"}}],[11,"new","","",143,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar4"}}],[11,"splat","","",143,{"i":[{"n":"u8"}],"o":{"n":"uchar4"}}],[11,"zero","","",143,{"o":{"n":"uchar4"}}],[11,"is_zero","","",143,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",143,{"o":{"n":"uchar4"}}],[11,"new","","",137,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar8"}}],[11,"splat","","",137,{"i":[{"n":"u8"}],"o":{"n":"uchar8"}}],[11,"zero","","",137,{"o":{"n":"uchar8"}}],[11,"is_zero","","",137,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",137,{"o":{"n":"uchar8"}}],[11,"new","","",128,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar16"}}],[11,"splat","","",128,{"i":[{"n":"u8"}],"o":{"n":"uchar16"}}],[11,"zero","","",128,{"o":{"n":"uchar16"}}],[11,"is_zero","","",128,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",128,{"o":{"n":"uchar16"}}],[11,"new","","",145,{"i":[{"n":"i16"}],"o":{"n":"short"}}],[11,"splat","","",145,{"i":[{"n":"i16"}],"o":{"n":"short"}}],[11,"zero","","",145,{"o":{"n":"short"}}],[11,"is_zero","","",145,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",145,{"o":{"n":"short"}}],[11,"new","","",134,{"i":[{"n":"i16"},{"n":"i16"}],"o":{"n":"short2"}}],[11,"splat","","",134,{"i":[{"n":"i16"}],"o":{"n":"short2"}}],[11,"zero","","",134,{"o":{"n":"short2"}}],[11,"is_zero","","",134,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",134,{"o":{"n":"short2"}}],[11,"new","","",154,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short3"}}],[11,"splat","","",154,{"i":[{"n":"i16"}],"o":{"n":"short3"}}],[11,"zero","","",154,{"o":{"n":"short3"}}],[11,"is_zero","","",154,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",154,{"o":{"n":"short3"}}],[11,"new","","",150,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short4"}}],[11,"splat","","",150,{"i":[{"n":"i16"}],"o":{"n":"short4"}}],[11,"zero","","",150,{"o":{"n":"short4"}}],[11,"is_zero","","",150,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",150,{"o":{"n":"short4"}}],[11,"new","","",141,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short8"}}],[11,"splat","","",141,{"i":[{"n":"i16"}],"o":{"n":"short8"}}],[11,"zero","","",141,{"o":{"n":"short8"}}],[11,"is_zero","","",141,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",141,{"o":{"n":"short8"}}],[11,"new","","",133,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short16"}}],[11,"splat","","",133,{"i":[{"n":"i16"}],"o":{"n":"short16"}}],[11,"zero","","",133,{"o":{"n":"short16"}}],[11,"is_zero","","",133,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",133,{"o":{"n":"short16"}}],[11,"new","","",109,{"i":[{"n":"u16"}],"o":{"n":"ushort"}}],[11,"splat","","",109,{"i":[{"n":"u16"}],"o":{"n":"ushort"}}],[11,"zero","","",109,{"o":{"n":"ushort"}}],[11,"is_zero","","",109,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",109,{"o":{"n":"ushort"}}],[11,"new","","",115,{"i":[{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort2"}}],[11,"splat","","",115,{"i":[{"n":"u16"}],"o":{"n":"ushort2"}}],[11,"zero","","",115,{"o":{"n":"ushort2"}}],[11,"is_zero","","",115,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",115,{"o":{"n":"ushort2"}}],[11,"new","","",149,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort3"}}],[11,"splat","","",149,{"i":[{"n":"u16"}],"o":{"n":"ushort3"}}],[11,"zero","","",149,{"o":{"n":"ushort3"}}],[11,"is_zero","","",149,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",149,{"o":{"n":"ushort3"}}],[11,"new","","",148,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort4"}}],[11,"splat","","",148,{"i":[{"n":"u16"}],"o":{"n":"ushort4"}}],[11,"zero","","",148,{"o":{"n":"ushort4"}}],[11,"is_zero","","",148,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",148,{"o":{"n":"ushort4"}}],[11,"new","","",135,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort8"}}],[11,"splat","","",135,{"i":[{"n":"u16"}],"o":{"n":"ushort8"}}],[11,"zero","","",135,{"o":{"n":"ushort8"}}],[11,"is_zero","","",135,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",135,{"o":{"n":"ushort8"}}],[11,"new","","",108,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort16"}}],[11,"splat","","",108,{"i":[{"n":"u16"}],"o":{"n":"ushort16"}}],[11,"zero","","",108,{"o":{"n":"ushort16"}}],[11,"is_zero","","",108,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",108,{"o":{"n":"ushort16"}}],[11,"new","","",107,{"i":[{"n":"i32"}],"o":{"n":"int"}}],[11,"splat","","",107,{"i":[{"n":"i32"}],"o":{"n":"int"}}],[11,"zero","","",107,{"o":{"n":"int"}}],[11,"is_zero","","",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",107,{"o":{"n":"int"}}],[11,"new","","",118,{"i":[{"n":"i32"},{"n":"i32"}],"o":{"n":"int2"}}],[11,"splat","","",118,{"i":[{"n":"i32"}],"o":{"n":"int2"}}],[11,"zero","","",118,{"o":{"n":"int2"}}],[11,"is_zero","","",118,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",118,{"o":{"n":"int2"}}],[11,"new","","",151,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int3"}}],[11,"splat","","",151,{"i":[{"n":"i32"}],"o":{"n":"int3"}}],[11,"zero","","",151,{"o":{"n":"int3"}}],[11,"is_zero","","",151,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",151,{"o":{"n":"int3"}}],[11,"new","","",122,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int4"}}],[11,"splat","","",122,{"i":[{"n":"i32"}],"o":{"n":"int4"}}],[11,"zero","","",122,{"o":{"n":"int4"}}],[11,"is_zero","","",122,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",122,{"o":{"n":"int4"}}],[11,"new","","",121,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int8"}}],[11,"splat","","",121,{"i":[{"n":"i32"}],"o":{"n":"int8"}}],[11,"zero","","",121,{"o":{"n":"int8"}}],[11,"is_zero","","",121,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",121,{"o":{"n":"int8"}}],[11,"new","","",153,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int16"}}],[11,"splat","","",153,{"i":[{"n":"i32"}],"o":{"n":"int16"}}],[11,"zero","","",153,{"o":{"n":"int16"}}],[11,"is_zero","","",153,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",153,{"o":{"n":"int16"}}],[11,"new","","",142,{"i":[{"n":"u32"}],"o":{"n":"uint"}}],[11,"splat","","",142,{"i":[{"n":"u32"}],"o":{"n":"uint"}}],[11,"zero","","",142,{"o":{"n":"uint"}}],[11,"is_zero","","",142,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",142,{"o":{"n":"uint"}}],[11,"new","","",110,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"uint2"}}],[11,"splat","","",110,{"i":[{"n":"u32"}],"o":{"n":"uint2"}}],[11,"zero","","",110,{"o":{"n":"uint2"}}],[11,"is_zero","","",110,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",110,{"o":{"n":"uint2"}}],[11,"new","","",132,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"uint3"}}],[11,"splat","","",132,{"i":[{"n":"u32"}],"o":{"n":"uint3"}}],[11,"zero","","",132,{"o":{"n":"uint3"}}],[11,"is_zero","","",132,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",132,{"o":{"n":"uint3"}}],[11,"new","","",126,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"uint4"}}],[11,"splat","","",126,{"i":[{"n":"u32"}],"o":{"n":"uint4"}}],[11,"zero","","",126,{"o":{"n":"uint4"}}],[11,"is_zero","","",126,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",126,{"o":{"n":"uint4"}}],[11,"new","","",131,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"uint8"}}],[11,"splat","","",131,{"i":[{"n":"i8"}],"o":{"n":"uint8"}}],[11,"zero","","",131,{"o":{"n":"uint8"}}],[11,"is_zero","","",131,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",131,{"o":{"n":"uint8"}}],[11,"new","","",127,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"uint16"}}],[11,"splat","","",127,{"i":[{"n":"u32"}],"o":{"n":"uint16"}}],[11,"zero","","",127,{"o":{"n":"uint16"}}],[11,"is_zero","","",127,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",127,{"o":{"n":"uint16"}}],[11,"new","","",120,{"i":[{"n":"i64"}],"o":{"n":"long"}}],[11,"splat","","",120,{"i":[{"n":"i64"}],"o":{"n":"long"}}],[11,"zero","","",120,{"o":{"n":"long"}}],[11,"is_zero","","",120,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",120,{"o":{"n":"long"}}],[11,"new","","",125,{"i":[{"n":"i64"},{"n":"i64"}],"o":{"n":"long2"}}],[11,"splat","","",125,{"i":[{"n":"i64"}],"o":{"n":"long2"}}],[11,"zero","","",125,{"o":{"n":"long2"}}],[11,"is_zero","","",125,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",125,{"o":{"n":"long2"}}],[11,"new","","",123,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long3"}}],[11,"splat","","",123,{"i":[{"n":"i64"}],"o":{"n":"long3"}}],[11,"zero","","",123,{"o":{"n":"long3"}}],[11,"is_zero","","",123,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",123,{"o":{"n":"long3"}}],[11,"new","","",146,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long4"}}],[11,"splat","","",146,{"i":[{"n":"i64"}],"o":{"n":"long4"}}],[11,"zero","","",146,{"o":{"n":"long4"}}],[11,"is_zero","","",146,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",146,{"o":{"n":"long4"}}],[11,"new","","",140,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long8"}}],[11,"splat","","",140,{"i":[{"n":"i64"}],"o":{"n":"long8"}}],[11,"zero","","",140,{"o":{"n":"long8"}}],[11,"is_zero","","",140,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",140,{"o":{"n":"long8"}}],[11,"new","","",116,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long16"}}],[11,"splat","","",116,{"i":[{"n":"i64"}],"o":{"n":"long16"}}],[11,"zero","","",116,{"o":{"n":"long16"}}],[11,"is_zero","","",116,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",116,{"o":{"n":"long16"}}],[11,"new","","",130,{"i":[{"n":"u64"}],"o":{"n":"ulong"}}],[11,"splat","","",130,{"i":[{"n":"u64"}],"o":{"n":"ulong"}}],[11,"zero","","",130,{"o":{"n":"ulong"}}],[11,"is_zero","","",130,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",130,{"o":{"n":"ulong"}}],[11,"new","","",139,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong2"}}],[11,"splat","","",139,{"i":[{"n":"u64"}],"o":{"n":"ulong2"}}],[11,"zero","","",139,{"o":{"n":"ulong2"}}],[11,"is_zero","","",139,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",139,{"o":{"n":"ulong2"}}],[11,"new","","",111,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong3"}}],[11,"splat","","",111,{"i":[{"n":"u64"}],"o":{"n":"ulong3"}}],[11,"zero","","",111,{"o":{"n":"ulong3"}}],[11,"is_zero","","",111,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",111,{"o":{"n":"ulong3"}}],[11,"new","","",124,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong4"}}],[11,"splat","","",124,{"i":[{"n":"u64"}],"o":{"n":"ulong4"}}],[11,"zero","","",124,{"o":{"n":"ulong4"}}],[11,"is_zero","","",124,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",124,{"o":{"n":"ulong4"}}],[11,"new","","",144,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong8"}}],[11,"splat","","",144,{"i":[{"n":"u64"}],"o":{"n":"ulong8"}}],[11,"zero","","",144,{"o":{"n":"ulong8"}}],[11,"is_zero","","",144,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",144,{"o":{"n":"ulong8"}}],[11,"new","","",138,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong16"}}],[11,"splat","","",138,{"i":[{"n":"u64"}],"o":{"n":"ulong16"}}],[11,"zero","","",138,{"o":{"n":"ulong16"}}],[11,"is_zero","","",138,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",138,{"o":{"n":"ulong16"}}],[11,"new","","",157,{"i":[{"n":"f32"}],"o":{"n":"float"}}],[11,"splat","","",157,{"i":[{"n":"f32"}],"o":{"n":"float"}}],[11,"zero","","",157,{"o":{"n":"float"}}],[11,"is_zero","","",157,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",157,{"o":{"n":"float"}}],[11,"new","","",158,{"i":[{"n":"f32"},{"n":"f32"}],"o":{"n":"float2"}}],[11,"splat","","",158,{"i":[{"n":"f32"}],"o":{"n":"float2"}}],[11,"zero","","",158,{"o":{"n":"float2"}}],[11,"is_zero","","",158,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",158,{"o":{"n":"float2"}}],[11,"new","","",156,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float3"}}],[11,"splat","","",156,{"i":[{"n":"f32"}],"o":{"n":"float3"}}],[11,"zero","","",156,{"o":{"n":"float3"}}],[11,"is_zero","","",156,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",156,{"o":{"n":"float3"}}],[11,"new","","",160,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float4"}}],[11,"splat","","",160,{"i":[{"n":"f32"}],"o":{"n":"float4"}}],[11,"zero","","",160,{"o":{"n":"float4"}}],[11,"is_zero","","",160,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",160,{"o":{"n":"float4"}}],[11,"new","","",166,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float8"}}],[11,"splat","","",166,{"i":[{"n":"f32"}],"o":{"n":"float8"}}],[11,"zero","","",166,{"o":{"n":"float8"}}],[11,"is_zero","","",166,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",166,{"o":{"n":"float8"}}],[11,"new","","",163,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float16"}}],[11,"splat","","",163,{"i":[{"n":"f32"}],"o":{"n":"float16"}}],[11,"zero","","",163,{"o":{"n":"float16"}}],[11,"is_zero","","",163,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",163,{"o":{"n":"float16"}}],[11,"new","","",159,{"i":[{"n":"f64"}],"o":{"n":"double"}}],[11,"splat","","",159,{"i":[{"n":"f64"}],"o":{"n":"double"}}],[11,"zero","","",159,{"o":{"n":"double"}}],[11,"is_zero","","",159,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",159,{"o":{"n":"double"}}],[11,"new","","",155,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"double2"}}],[11,"splat","","",155,{"i":[{"n":"f64"}],"o":{"n":"double2"}}],[11,"zero","","",155,{"o":{"n":"double2"}}],[11,"is_zero","","",155,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",155,{"o":{"n":"double2"}}],[11,"new","","",162,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double3"}}],[11,"splat","","",162,{"i":[{"n":"f64"}],"o":{"n":"double3"}}],[11,"zero","","",162,{"o":{"n":"double3"}}],[11,"is_zero","","",162,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",162,{"o":{"n":"double3"}}],[11,"new","","",164,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double4"}}],[11,"splat","","",164,{"i":[{"n":"f64"}],"o":{"n":"double4"}}],[11,"zero","","",164,{"o":{"n":"double4"}}],[11,"is_zero","","",164,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",164,{"o":{"n":"double4"}}],[11,"new","","",165,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double8"}}],[11,"splat","","",165,{"i":[{"n":"f64"}],"o":{"n":"double8"}}],[11,"zero","","",165,{"o":{"n":"double8"}}],[11,"is_zero","","",165,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",165,{"o":{"n":"double8"}}],[11,"new","","",161,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double16"}}],[11,"splat","","",161,{"i":[{"n":"f64"}],"o":{"n":"double16"}}],[11,"zero","","",161,{"o":{"n":"double16"}}],[11,"is_zero","","",161,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",161,{"o":{"n":"double16"}}],[11,"queue","ocl::builders","Specifies a queue to use for this call only.",169,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"kernelcmd"}}],[11,"gwo","","Specifies a global work offset for this call only.",169,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelcmd"}}],[11,"gws","","Specifies a global work size for this call only.",169,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelcmd"}}],[11,"lws","","Specifies a local work size for this call only.",169,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelcmd"}}],[11,"global_work_offset","","Specifies a global work offset for this call only.",169,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelcmd"}}],[11,"global_work_size","","Specifies a global work size for this call only.",169,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelcmd"}}],[11,"local_work_size","","Specifies a local work size for this call only.",169,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelcmd"}}],[11,"ewait","","Specifies an event or list of events to wait on before the command will run.",169,{"i":[{"n":"self"},{"n":"ewl"}],"o":{"n":"kernelcmd"}}],[11,"enew","","Specifies the destination to store a new, optionally created event associated with this command.",169,{"i":[{"n":"self"},{"n":"en"}],"o":{"n":"kernelcmd"}}],[11,"enq","","Enqueues this kernel command.",169,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"fmt","","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new kernel builder.",170,{"o":{"n":"kernelbuilder"}}],[11,"program","","Specifies a program object with a successfully built executable.",170,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"kernelbuilder"}}],[11,"name","","Specifies a function name in the program declared with the `__kernel` qualifier (e.g. `__kernel void add_values(...`).",170,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"kernelbuilder"}}],[11,"queue","","Sets the default queue to be used by all subsequent enqueue commands unless otherwise changed (with `::set_default_queue`) or overridden (by `::cmd().queue(...)...`).",170,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"kernelbuilder"}}],[11,"gwo","","Sets the default global work offset.",170,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelbuilder"}}],[11,"gws","","Sets the default global work size.",170,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelbuilder"}}],[11,"lws","","Sets the default local work size.",170,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelbuilder"}}],[11,"global_work_offset","","Sets the default global work offset.",170,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelbuilder"}}],[11,"global_work_size","","Sets the default global work size.",170,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelbuilder"}}],[11,"local_work_size","","Sets the default local work size.",170,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"kernelbuilder"}}],[11,"arg","","Adds a new `Buffer`, `Image`, scalar, or vector argument to the kernel.",170,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"kernelbuilder"}}],[11,"arg_buf","","Adds a new argument to the kernel specifying the buffer object represented by 'buffer'.",170,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"kernelbuilder"}}],[11,"arg_img","","Adds a new argument to the kernel specifying the image object represented by 'image'.",170,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"kernelbuilder"}}],[11,"arg_smp","","Adds a new argument to the kernel specifying the sampler object represented by 'sampler'. Argument is added to the bottom of the argument order.",170,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"kernelbuilder"}}],[11,"arg_scl","","Adds a new argument specifying the value: `scalar`.",170,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"kernelbuilder"}}],[11,"arg_vec","","Adds a new argument specifying the value: `vector`.",170,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"kernelbuilder"}}],[11,"arg_loc","","Adds a new argument specifying the allocation of a local variable of size `length * sizeof(T)` bytes (builder_style).",170,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"kernelbuilder"}}],[11,"arg_sampler","","Adds a new argument to the kernel specifying the sampler object represented by 'sampler'. Argument is added to the bottom of the argument order.",170,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"kernelbuilder"}}],[11,"arg_local","","Adds a new argument specifying the allocation of a local variable of size `length * sizeof(T)` bytes (builder_style).",170,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"kernelbuilder"}}],[11,"arg_named","","Adds a new named `Buffer`, `Image`, scalar, or vector argument to the kernel.",170,{"i":[{"n":"self"},{"n":"str"},{"n":"a"}],"o":{"n":"kernelbuilder"}}],[11,"arg_buf_named","","Adds a new named argument specifying the buffer object represented by 'buffer'.",170,{"i":[{"n":"self"},{"n":"str"},{"n":"option"}],"o":{"n":"kernelbuilder"}}],[11,"arg_img_named","","Adds a new named argument specifying the image object represented by 'image'.",170,{"i":[{"n":"self"},{"n":"str"},{"n":"option"}],"o":{"n":"kernelbuilder"}}],[11,"arg_smp_named","","Adds a new named argument specifying the sampler object represented by 'sampler'.",170,{"i":[{"n":"self"},{"n":"str"},{"g":["sampler"],"n":"option"}],"o":{"n":"kernelbuilder"}}],[11,"arg_scl_named","","Adds a new named argument  specifying the value: `scalar`.",170,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"kernelbuilder"}}],[11,"arg_vec_named","","Adds a new named argument specifying the value: `vector`.",170,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"kernelbuilder"}}],[11,"arg_sampler_named","","Adds a new named argument specifying the sampler object represented by 'sampler'.",170,{"i":[{"n":"self"},{"n":"str"},{"g":["sampler"],"n":"option"}],"o":{"n":"kernelbuilder"}}],[11,"disable_mem_arg_retention","","Specifies whether or not to store a copy of memory objects (`Buffer` and `Image`).",170,{"i":[{"n":"self"}],"o":{"n":"kernelbuilder"}}],[11,"disable_arg_type_check","","Disables argument type checking when setting arguments.",170,{"i":[{"n":"self"}],"o":{"n":"kernelbuilder"}}],[11,"build","","Builds and returns a new `Kernel`",170,{"i":[{"n":"self"}],"o":{"g":["kernel"],"n":"oclresult"}}],[11,"read","","Specifies that this command will be a read operation.",171,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"bufferreadcmd"}}],[11,"write","","Specifies that this command will be a write operation.",171,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"bufferwritecmd"}}],[11,"map","","Specifies that this command will be a map operation.",171,{"i":[{"n":"self"}],"o":{"n":"buffermapcmd"}}],[11,"copy","","Specifies that this command will be a copy operation.",171,{"i":[{"n":"self"},{"n":"m"},{"g":["usize"],"n":"option"},{"g":["usize"],"n":"option"}],"o":{"n":"buffercmd"}}],[11,"copy_to_image","","Specifies that this command will be a copy to image operation.",171,null],[11,"gl_acquire","","Specifies that this command will acquire a GL buffer.",171,{"i":[{"n":"self"}],"o":{"n":"buffercmd"}}],[11,"gl_release","","Specifies that this command will release a GL buffer.",171,{"i":[{"n":"self"}],"o":{"n":"buffercmd"}}],[11,"fill","","Specifies that this command will be a fill operation.",171,{"i":[{"n":"self"},{"n":"t"},{"g":["usize"],"n":"option"}],"o":{"n":"buffercmd"}}],[11,"queue","","Specifies a queue to use for this call only.",171,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"buffercmd"}}],[11,"block","","Specifies whether or not to block the current thread until completion.",171,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"buffercmd"}}],[11,"offset","","Sets the linear offset for an operation.",171,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffercmd"}}],[11,"rect","","Specifies that this will be a rectangularly shaped operation (the default being linear).",171,null],[11,"ewait","","Specifies an event or list of events to wait on before the command will run.",171,{"i":[{"n":"self"},{"n":"ewl"}],"o":{"n":"buffercmd"}}],[11,"enew","","Specifies the destination to store a new, optionally created event associated with this command.",171,{"i":[{"n":"self"},{"n":"en"}],"o":{"n":"buffercmd"}}],[11,"enq","","Enqueues this command.",171,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"queue","","Specifies a queue to use for this call only.",172,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"bufferreadcmd"}}],[11,"block","","Specifies whether or not to block the current thread until completion.",172,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bufferreadcmd"}}],[11,"offset","","Sets the linear offset for an operation.",172,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferreadcmd"}}],[11,"dst_offset","","Sets an offset into the destination data.",172,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferreadcmd"}}],[11,"len","","Sets the total length of data to read.",172,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferreadcmd"}}],[11,"rect","","Specifies that this will be a rectangularly shaped operation (the default being linear).",172,null],[11,"ewait","","Specifies an event or list of events to wait on before the command will run.",172,{"i":[{"n":"self"},{"n":"ewl"}],"o":{"n":"bufferreadcmd"}}],[11,"enew","","Specifies the destination to store a new, optionally created event associated with this command.",172,{"i":[{"n":"self"},{"n":"en"}],"o":{"n":"bufferreadcmd"}}],[11,"enq","","Enqueues this command, blocking the current thread until it is complete.",172,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"enq_async","","Enqueues this command and returns a future representing its completion which resolves to a guard providing exclusive data access usable within subsequent futures.",172,{"i":[{"n":"self"}],"o":{"g":["futurewriteguard"],"n":"oclresult"}}],[11,"queue","","Specifies a queue to use for this call only.",173,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"bufferwritecmd"}}],[11,"block","","Specifies whether or not to block the current thread until completion.",173,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bufferwritecmd"}}],[11,"offset","","Sets the linear offset for an operation.",173,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferwritecmd"}}],[11,"src_offset","","Sets an offset into the source data.",173,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferwritecmd"}}],[11,"len","","Sets the total length of data to write.",173,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferwritecmd"}}],[11,"rect","","Specifies that this will be a rectangularly shaped operation (the default being linear).",173,null],[11,"ewait","","Specifies an event or list of events to wait on before the command will run.",173,{"i":[{"n":"self"},{"n":"ewl"}],"o":{"n":"bufferwritecmd"}}],[11,"enew","","Specifies the destination to store a new, optionally created event associated with this command.",173,{"i":[{"n":"self"},{"n":"en"}],"o":{"n":"bufferwritecmd"}}],[11,"enq","","Enqueues this command, blocking the current thread until it is complete.",173,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"enq_async","","Enqueues this command and returns a future representing its completion which resolves to a read guard usable within subsequent futures.",173,{"i":[{"n":"self"}],"o":{"g":["futurereadguard"],"n":"oclresult"}}],[11,"enq_async_then_write","","Enqueues this command and returns a future representing its completion.",173,{"i":[{"n":"self"}],"o":{"g":["futurewriteguard"],"n":"oclresult"}}],[11,"flags","","Specifies the flags to be used for this map command.",174,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"buffermapcmd"}}],[11,"read","","Specifies that the memory object is being mapped for reading.",174,{"i":[{"n":"self"}],"o":{"n":"buffermapcmd"}}],[11,"write","","Specifies that the memory object is being mapped for writing.",174,{"i":[{"n":"self"}],"o":{"n":"buffermapcmd"}}],[11,"write_invalidate","","Specifies that the memory object is being mapped for writing and that the local (host) memory region may contain stale data that must be completely overwritten before unmapping.",174,{"i":[{"n":"self"}],"o":{"n":"buffermapcmd"}}],[11,"len","","Specifies the length of the region to map.",174,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffermapcmd"}}],[11,"queue","","Specifies a queue to use for this call only.",174,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"buffermapcmd"}}],[11,"offset","","Sets the linear offset for an operation.",174,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffermapcmd"}}],[11,"ewait","","Specifies an event or list of events to wait on before the command will run.",174,{"i":[{"n":"self"},{"n":"ewl"}],"o":{"n":"buffermapcmd"}}],[11,"enew","","Specifies the destination to store a new, optionally created event associated with this command.",174,{"i":[{"n":"self"},{"n":"en"}],"o":{"n":"buffermapcmd"}}],[11,"enq","","Enqueues a map command, blocking the current thread until it completes and returns a reference to the mapped memory.",174,{"i":[{"n":"self"}],"o":{"g":["memmap"],"n":"oclresult"}}],[11,"enq_async","","Enqueues a map command and returns a future representing the completion of that map command.",174,{"i":[{"n":"self"}],"o":{"g":["futurememmap"],"n":"oclresult"}}],[11,"fmt","","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new buffer builder.",175,{"o":{"n":"bufferbuilder"}}],[11,"context","","Sets the context with which to associate the buffer.",175,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"bufferbuilder"}}],[11,"queue","","Specifies the default queue used to be used by the buffer for all command enqueue operations (reads, writes, etc.).",175,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"bufferbuilder"}}],[11,"flags","","Sets the flags used when creating the buffer.",175,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bufferbuilder"}}],[11,"use_host_slice","","Specifies a region of host memory to use as storage for the buffer.",175,null],[11,"copy_host_slice","","Specifies a region of memory to copy into the buffer upon creation.",175,null],[11,"len","","Sets the length for this buffer.",175,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"bufferbuilder"}}],[11,"fill_val","","Allows the caller to automatically fill the buffer with a value (such as zero) immediately after creation.",175,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bufferbuilder"}}],[11,"fill_event","","Specifies the (empty) event to use for association with the completion of the fill command.",175,{"i":[{"n":"self"},{"n":"en"}],"o":{"n":"bufferbuilder"}}],[11,"build","","Creates a buffer and returns it.",175,{"i":[{"n":"self"}],"o":{"g":["buffer"],"n":"oclresult"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"read","","Specifies that this command will be a blocking read operation.",176,null],[11,"write","","Specifies that this command will be a write operation.",176,null],[11,"map","","Specifies that this command will be a map operation.",176,{"i":[{"n":"self"}],"o":{"n":"imagemapcmd"}}],[11,"copy","","Specifies that this command will be a copy operation.",176,null],[11,"copy_to_buffer","","Specifies that this command will be a copy to image.",176,{"i":[{"n":"self"},{"n":"memcore"},{"n":"usize"}],"o":{"n":"imagecmd"}}],[11,"gl_acquire","","Specifies that this command will acquire a GL buffer.",176,{"i":[{"n":"self"}],"o":{"n":"imagecmd"}}],[11,"gl_release","","Specifies that this command will release a GL buffer.",176,{"i":[{"n":"self"}],"o":{"n":"imagecmd"}}],[11,"fill","","Specifies that this command will be a fill.",176,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"imagecmd"}}],[11,"queue","","Specifies a queue to use for this call only.",176,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"imagecmd"}}],[11,"block","","Specifies whether or not to block the current thread until completion.",176,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"imagecmd"}}],[11,"origin","","Sets the three dimensional offset, the origin point, for an operation.",176,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"imagecmd"}}],[11,"region","","Sets the region size for an operation.",176,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"imagecmd"}}],[11,"pitch_bytes","","Sets the row and slice pitch for a read or write operation in bytes.",176,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"imagecmd"}}],[11,"ewait","","Specifies an event or list of events to wait on before the command will run.",176,{"i":[{"n":"self"},{"n":"ewl"}],"o":{"n":"imagecmd"}}],[11,"enew","","Specifies the destination to store a new, optionally created event associated with this command.",176,{"i":[{"n":"self"},{"n":"en"}],"o":{"n":"imagecmd"}}],[11,"enq","","Enqueues this command.",176,{"i":[{"n":"self"}],"o":{"n":"oclresult"}}],[11,"new","","Returns a new `ImageBuilder` with very basic defaults.",177,{"o":{"n":"imagebuilder"}}],[11,"context","","Sets the context with which to associate the buffer.",177,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"imagebuilder"}}],[11,"queue","","Sets the default queue.",177,{"i":[{"n":"self"},{"n":"queue"}],"o":{"n":"imagebuilder"}}],[11,"flags","","Sets the flags used when creating the image.",177,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"imagebuilder"}}],[11,"use_host_slice","","Specifies a region of host memory to use as storage for the image.",177,null],[11,"copy_host_slice","","Specifies a region of memory to copy into the image upon creation.",177,null],[11,"channel_order","","",177,{"i":[{"n":"self"},{"n":"imagechannelorder"}],"o":{"n":"imagebuilder"}}],[11,"channel_data_type","","",177,{"i":[{"n":"self"},{"n":"imagechanneldatatype"}],"o":{"n":"imagebuilder"}}],[11,"image_type","","Sets the type of image (technically the type of memory buffer).",177,{"i":[{"n":"self"},{"n":"memobjecttype"}],"o":{"n":"imagebuilder"}}],[11,"dims","","The width, height, and depth of an image or image array:",177,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"imagebuilder"}}],[11,"array_size","","Image array size.",177,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"imagebuilder"}}],[11,"row_pitch_bytes","","Image row pitch.",177,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"imagebuilder"}}],[11,"slc_pitch_bytes","","Image slice pitch.",177,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"imagebuilder"}}],[11,"buffer_sync","","Buffer synchronization.",177,{"i":[{"n":"self"},{"n":"memcore"}],"o":{"n":"imagebuilder"}}],[11,"image_format","","Specifies the image pixel format.",177,{"i":[{"n":"self"},{"n":"imageformat"}],"o":{"n":"imagebuilder"}}],[11,"image_desc","","Specifies the image descriptor containing a number of important settings.",177,{"i":[{"n":"self"},{"n":"imagedescriptor"}],"o":{"n":"imagebuilder"}}],[11,"build","","Builds with no host side image data memory specified and returns a new `Image`.",177,{"i":[{"n":"self"}],"o":{"g":["image"],"n":"oclresult"}}],[11,"new","","Returns a new `ProQueBuilder` with an empty / default configuration.",178,{"o":{"n":"proquebuilder"}}],[11,"platform","","Sets the platform to be used and returns the builder.",178,{"i":[{"n":"self"},{"n":"platform"}],"o":{"n":"proquebuilder"}}],[11,"context","","Sets the context and returns the `ProQueBuilder`.",178,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"proquebuilder"}}],[11,"device","","Sets a device or devices to be used and returns a `ProQueBuilder` reference.",178,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"proquebuilder"}}],[11,"src","","Adds some source code to be compiled and returns the `ProQueBuilder`.",178,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"proquebuilder"}}],[11,"prog_bldr","","Adds a pre-configured `ProgramBuilder` and returns the `ProQueBuilder`.",178,{"i":[{"n":"self"},{"n":"programbuilder"}],"o":{"n":"proquebuilder"}}],[11,"dims","","Sets the built-in dimensions.",178,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"proquebuilder"}}],[11,"queue_properties","","Sets the command queue properties.",178,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"proquebuilder"}}],[11,"build","","Returns a new `ProQue`.",178,{"i":[{"n":"self"}],"o":{"g":["proque"],"n":"oclresult"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_marker","","Converts this `ClWaitListPtrEnum` into a single marker event.",44,{"i":[{"n":"self"},{"n":"queue"}],"o":{"g":["event"],"n":"oclresult"}}],[11,"to_list","","Returns an `EventList` containing owned copies of each element in this `ClWaitListPtrEnum`.",44,{"i":[{"n":"self"}],"o":{"n":"eventlist"}}],[11,"as_ptr_ptr","","",44,null],[11,"count","","",44,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from","","",44,{"i":[{"n":"eventcore"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,{"i":[{"n":"eventcore"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,{"i":[{"n":"eventcore"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,{"i":[{"n":"event"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,{"i":[{"n":"event"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,{"i":[{"n":"event"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,{"i":[{"n":"eventlist"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,{"i":[{"n":"eventlist"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,null],[11,"from","","",44,null],[11,"from","","",44,null],[11,"from","","",44,null],[11,"from","","",44,null],[11,"from","","",44,{"i":[{"g":["eventlist"],"n":"ref"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,{"i":[{"g":["clwaitlistptr"],"n":"ref"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,{"i":[{"g":["clwaitlistptr"],"n":"box"}],"o":{"n":"clwaitlistptrenum"}}],[11,"from","","",44,{"i":[{"n":"option"}],"o":{"n":"clwaitlistptrenum"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"alloc_new","","",43,null],[11,"clone_from","","",43,{"i":[{"n":"self"},{"n":"e"}]}],[11,"from","","",43,{"i":[{"n":"event"}],"o":{"n":"clnulleventptrenum"}}],[11,"from","","",43,{"i":[{"n":"eventlist"}],"o":{"n":"clnulleventptrenum"}}],[11,"from","","",43,null],[11,"from","","",43,{"i":[{"n":"option"}],"o":{"n":"clnulleventptrenum"}}],[11,"forget","ocl::async","",31,{"i":[{"n":"self"}]}],[11,"new","ocl::builders","",36,{"i":[{"n":"imagechannelorder"},{"n":"imagechanneldatatype"}],"o":{"n":"imageformat"}}],[11,"new_rgba","","",36,{"o":{"n":"imageformat"}}],[11,"from_raw","","",36,{"i":[{"n":"cl_image_format"}],"o":{"g":["imageformat","imageformatparseerror"],"n":"result"}}],[11,"list_from_raw","","",36,{"i":[{"g":["cl_image_format"],"n":"vec"}],"o":{"g":["result"],"n":"vec"}}],[11,"to_raw","","",36,{"i":[{"n":"self"}],"o":{"n":"cl_image_format"}}],[11,"new_raw","","",36,{"o":{"n":"cl_image_format"}}],[11,"pixel_bytes","","Returns the size in bytes of a pixel using the format specified by this `ImageFormat`.",36,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"new","","",37,{"i":[{"n":"memobjecttype"},{"n":"usize"},{"n":"usize"},{"n":"usize"},{"n":"usize"},{"n":"usize"},{"n":"usize"},{"g":["mem"],"n":"option"}],"o":{"n":"imagedescriptor"}}],[11,"to_raw","","",37,{"i":[{"n":"self"}],"o":{"n":"cl_image_desc"}}],[11,"new","","Returns an empty new list of context properties",105,{"o":{"n":"contextproperties"}}],[11,"platform","","Specifies a platform (builder-style).",105,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"contextproperties"}}],[11,"interop_user_sync","","Specifies whether the user is responsible for synchronization between OpenCL and other APIs (builder-style).",105,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"contextproperties"}}],[11,"gl_context","","Specifies an OpenGL context handle (builder-style).",105,null],[11,"glx_display","","Specifies a Display pointer for the GLX context (builder-style).",105,null],[11,"wgl_hdc","","Specifies a Display pointer for the WGL HDC (builder-style).",105,null],[11,"cgl_sharegroup","","Specifies an OpenGL context CGL share group to associate the OpenCL context with (builder-style).",105,null],[11,"egl_display","","Specifies a pointer for the EGL display (builder-style).",105,null],[11,"property_value","","Pushes a `ContextPropertyValue` onto this list of properties (builder-style).",105,{"i":[{"n":"self"},{"n":"contextpropertyvalue"}],"o":{"n":"contextproperties"}}],[11,"set_platform","","Specifies a platform.",105,null],[11,"set_interop_user_sync","","Specifies whether the user is responsible for synchronization between OpenCL and other APIs.",105,null],[11,"set_gl_context","","Specifies an OpenGL context handle.",105,null],[11,"set_glx_display","","Specifies a Display pointer for the GLX context.",105,null],[11,"set_wgl_hdc","","Specifies a Display pointer for the WGL HDC.",105,null],[11,"set_cgl_sharegroup","","Specifies an OpenGL context CGL share group to associate the OpenCL context with.",105,null],[11,"set_egl_display","","Specifies a pointer for the EGL display.",105,null],[11,"set_property_value","","Pushes a `ContextPropertyValue` onto this list of properties.",105,null],[11,"get_platform","","Returns a platform id or none.",105,{"i":[{"n":"self"}],"o":{"g":["platformid"],"n":"option"}}],[11,"contains_gl_context_or_sharegroup","","Returns true if this set of context properties specifies any OpenGL context or sharegroup to associate with.",105,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_raw","","Converts this list into a packed-word representation as specified here.",105,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"vec"}}],[11,"extract_property_from_raw","","Returns a single context property value.",105,null],[11,"from_raw","","Converts raw stuff into other stuff.",105,null],[11,"new","ocl::flags","",100,{"o":{"n":"devicetype"}}],[11,"system_default","","",100,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"cpu","","",100,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"gpu","","",100,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"accelerator","","",100,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"custom","","",100,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[18,"DEFAULT","","",100,null],[18,"CPU","","",100,null],[18,"GPU","","",100,null],[18,"ACCELERATOR","","",100,null],[18,"CUSTOM","","",100,null],[18,"ALL","","",100,null],[11,"empty","","Returns an empty set of flags.",100,{"o":{"n":"devicetype"}}],[11,"all","","Returns the set containing all flags.",100,{"o":{"n":"devicetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",100,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",100,{"i":[{"n":"u64"}],"o":{"g":["devicetype"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",100,{"i":[{"n":"u64"}],"o":{"n":"devicetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",100,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",100,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",100,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",100,null],[11,"remove","","Removes the specified flags in-place.",100,null],[11,"toggle","","Toggles the specified flags in-place.",100,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",100,null],[18,"DENORM","","",98,null],[18,"INF_NAN","","",98,null],[18,"ROUND_TO_NEAREST","","",98,null],[18,"ROUND_TO_ZERO","","",98,null],[18,"ROUND_TO_INF","","",98,null],[18,"FMA","","",98,null],[18,"SOFT_FLOAT","","",98,null],[18,"CORRECTLY_ROUNDED_DIVIDE_SQRT","","",98,null],[11,"empty","","Returns an empty set of flags.",98,{"o":{"n":"devicefpconfig"}}],[11,"all","","Returns the set containing all flags.",98,{"o":{"n":"devicefpconfig"}}],[11,"bits","","Returns the raw value of the flags currently stored.",98,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",98,{"i":[{"n":"u64"}],"o":{"g":["devicefpconfig"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",98,{"i":[{"n":"u64"}],"o":{"n":"devicefpconfig"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",98,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",98,null],[11,"remove","","Removes the specified flags in-place.",98,null],[11,"toggle","","Toggles the specified flags in-place.",98,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",98,null],[18,"KERNEL","","",97,null],[18,"NATIVE_KERNEL","","",97,null],[11,"empty","","Returns an empty set of flags.",97,{"o":{"n":"deviceexeccapabilities"}}],[11,"all","","Returns the set containing all flags.",97,{"o":{"n":"deviceexeccapabilities"}}],[11,"bits","","Returns the raw value of the flags currently stored.",97,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",97,{"i":[{"n":"u64"}],"o":{"g":["deviceexeccapabilities"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",97,{"i":[{"n":"u64"}],"o":{"n":"deviceexeccapabilities"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",97,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",97,null],[11,"remove","","Removes the specified flags in-place.",97,null],[11,"toggle","","Toggles the specified flags in-place.",97,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",97,null],[11,"new","","",101,{"o":{"n":"commandqueueproperties"}}],[11,"out_of_order","","",101,{"i":[{"n":"self"}],"o":{"n":"commandqueueproperties"}}],[11,"profiling","","",101,{"i":[{"n":"self"}],"o":{"n":"commandqueueproperties"}}],[18,"OUT_OF_ORDER_EXEC_MODE_ENABLE","","",101,null],[18,"PROFILING_ENABLE","","",101,null],[18,"ON_DEVICE","","",101,null],[18,"ON_DEVICE_DEFAULT","","",101,null],[11,"empty","","Returns an empty set of flags.",101,{"o":{"n":"commandqueueproperties"}}],[11,"all","","Returns the set containing all flags.",101,{"o":{"n":"commandqueueproperties"}}],[11,"bits","","Returns the raw value of the flags currently stored.",101,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",101,{"i":[{"n":"u64"}],"o":{"g":["commandqueueproperties"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",101,{"i":[{"n":"u64"}],"o":{"n":"commandqueueproperties"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",101,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",101,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",101,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",101,null],[11,"remove","","Removes the specified flags in-place.",101,null],[11,"toggle","","Toggles the specified flags in-place.",101,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",101,null],[18,"NUMA","","",99,null],[18,"L4_CACHE","","",99,null],[18,"L3_CACHE","","",99,null],[18,"L2_CACHE","","",99,null],[18,"L1_CACHE","","",99,null],[18,"NEXT_PARTITIONABLE","","",99,null],[11,"empty","","Returns an empty set of flags.",99,{"o":{"n":"deviceaffinitydomain"}}],[11,"all","","Returns the set containing all flags.",99,{"o":{"n":"deviceaffinitydomain"}}],[11,"bits","","Returns the raw value of the flags currently stored.",99,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",99,{"i":[{"n":"u64"}],"o":{"g":["deviceaffinitydomain"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",99,{"i":[{"n":"u64"}],"o":{"n":"deviceaffinitydomain"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",99,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",99,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",99,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",99,null],[11,"remove","","Removes the specified flags in-place.",99,null],[11,"toggle","","Toggles the specified flags in-place.",99,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",99,null],[11,"new","","",95,{"o":{"n":"memflags"}}],[11,"read_write","","",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"write_only","","",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"read_only","","",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"use_host_ptr","","",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"alloc_host_ptr","","",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"copy_host_ptr","","",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"host_write_only","","",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"host_read_only","","",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"host_no_access","","",95,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[18,"READ_WRITE","","",95,null],[18,"WRITE_ONLY","","",95,null],[18,"READ_ONLY","","",95,null],[18,"USE_HOST_PTR","","",95,null],[18,"ALLOC_HOST_PTR","","",95,null],[18,"COPY_HOST_PTR","","",95,null],[18,"HOST_WRITE_ONLY","","",95,null],[18,"HOST_READ_ONLY","","",95,null],[18,"HOST_NO_ACCESS","","",95,null],[11,"empty","","Returns an empty set of flags.",95,{"o":{"n":"memflags"}}],[11,"all","","Returns the set containing all flags.",95,{"o":{"n":"memflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",95,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",95,{"i":[{"n":"u64"}],"o":{"g":["memflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",95,{"i":[{"n":"u64"}],"o":{"n":"memflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",95,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",95,null],[11,"remove","","Removes the specified flags in-place.",95,null],[11,"toggle","","Toggles the specified flags in-place.",95,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",95,null],[18,"OBJECT_HOST","","",103,null],[18,"OBJECT_CONTENT_UNDEFINED","","",103,null],[11,"empty","","Returns an empty set of flags.",103,{"o":{"n":"memmigrationflags"}}],[11,"all","","Returns the set containing all flags.",103,{"o":{"n":"memmigrationflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",103,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",103,{"i":[{"n":"u64"}],"o":{"g":["memmigrationflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",103,{"i":[{"n":"u64"}],"o":{"n":"memmigrationflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",103,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",103,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",103,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",103,null],[11,"remove","","Removes the specified flags in-place.",103,null],[11,"toggle","","Toggles the specified flags in-place.",103,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",103,null],[11,"new","","",96,{"o":{"n":"mapflags"}}],[11,"read","","",96,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"write","","",96,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"write_invalidate_region","","",96,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[18,"READ","","",96,null],[18,"WRITE","","",96,null],[18,"WRITE_INVALIDATE_REGION","","",96,null],[11,"empty","","Returns an empty set of flags.",96,{"o":{"n":"mapflags"}}],[11,"all","","Returns the set containing all flags.",96,{"o":{"n":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",96,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",96,{"i":[{"n":"u64"}],"o":{"g":["mapflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",96,{"i":[{"n":"u64"}],"o":{"n":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",96,null],[11,"remove","","Removes the specified flags in-place.",96,null],[11,"toggle","","Toggles the specified flags in-place.",96,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",96,null],[18,"NONE","","",102,null],[18,"COMPILED_OBJECT","","",102,null],[18,"LIBRARY","","",102,null],[18,"EXECUTABLE","","",102,null],[11,"empty","","Returns an empty set of flags.",102,{"o":{"n":"programbinarytype"}}],[11,"all","","Returns the set containing all flags.",102,{"o":{"n":"programbinarytype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",102,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",102,{"i":[{"n":"u32"}],"o":{"g":["programbinarytype"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",102,{"i":[{"n":"u32"}],"o":{"n":"programbinarytype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",102,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",102,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",102,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",102,null],[11,"remove","","Removes the specified flags in-place.",102,null],[11,"toggle","","Toggles the specified flags in-place.",102,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",102,null],[18,"NONE","","",104,null],[18,"CONST","","",104,null],[18,"RESTRICT","","",104,null],[18,"VOLATILE","","",104,null],[11,"empty","","Returns an empty set of flags.",104,{"o":{"n":"kernelargtypequalifier"}}],[11,"all","","Returns the set containing all flags.",104,{"o":{"n":"kernelargtypequalifier"}}],[11,"bits","","Returns the raw value of the flags currently stored.",104,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",104,{"i":[{"n":"u64"}],"o":{"g":["kernelargtypequalifier"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",104,{"i":[{"n":"u64"}],"o":{"n":"kernelargtypequalifier"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",104,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",104,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",104,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",104,null],[11,"remove","","Removes the specified flags in-place.",104,null],[11,"toggle","","Toggles the specified flags in-place.",104,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",104,null],[11,"mem","ocl::enums","Returns a new `ArgVal` referring to a `Mem` object.",106,{"i":[{"n":"mem"}],"o":{"n":"argval"}}],[11,"mem_null","","Returns a new `ArgVal` corresponding to a null `Mem` object.",106,{"o":{"n":"argval"}}],[11,"sampler","","Returns a new `ArgVal` referring to a `Sampler` object.",106,{"i":[{"n":"sampler"}],"o":{"n":"argval"}}],[11,"sampler_null","","Returns a new `ArgVal` referring to a null `Sampler` object.",106,{"o":{"n":"argval"}}],[11,"primitive","","Returns a new `ArgVal` referring to a scalar or vector primitive.",106,{"i":[{"n":"t"}],"o":{"n":"argval"}}],[11,"scalar","","Returns a new `ArgVal` referring to a scalar primitive.",106,{"i":[{"n":"t"}],"o":{"n":"argval"}}],[11,"vector","","Returns a new `ArgVal` referring to a vector primitive.",106,{"i":[{"n":"t"}],"o":{"n":"argval"}}],[11,"local","","Returns a new `ArgVal` corresponding to a `__local` argument.",106,{"i":[{"n":"usize"}],"o":{"n":"argval"}}],[11,"from_raw","","Returns a new `ArgVal` containing the size in bytes and a raw pointer to the argument value.",106,null],[11,"as_raw","","Returns the size (in bytes) and raw pointer to the contained kernel argument value.",106,null],[11,"is_null","","Returns `true` if this `ArgVal` represents a null `Mem` or `Sampler` object.",106,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_bytes","","",79,{"i":[{"n":"platforminfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["platforminforesult","error"],"n":"result"}}],[11,"as_opencl_version","","Parse the `Version` string and get a numeric result as `OpenclVersion`.",79,{"i":[{"n":"self"}],"o":{"g":["openclversion","error"],"n":"result"}}],[11,"from_bytes_max_work_item_sizes","","Returns a new `DeviceInfoResult::MaxWorkItemSizes` variant.",80,{"i":[{"n":"deviceinfo"},{"g":["u8"],"n":"vec"},{"n":"u32"}],"o":{"g":["deviceinforesult","error"],"n":"result"}}],[11,"from_bytes","","Returns a new `DeviceInfoResult` for all variants except `MaxWorkItemSizes`.",80,{"i":[{"n":"deviceinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["deviceinforesult","error"],"n":"result"}}],[11,"as_opencl_version","","Parse the `Version` string and get a numeric result as `OpenclVersion`.",80,{"i":[{"n":"self"}],"o":{"g":["openclversion","error"],"n":"result"}}],[11,"from_bytes","","",81,{"i":[{"n":"contextinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["contextinforesult","error"],"n":"result"}}],[11,"platform","","",81,{"i":[{"n":"self"}],"o":{"g":["platformid"],"n":"option"}}],[11,"from_bytes","","",82,{"i":[{"n":"commandqueueinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["commandqueueinforesult","error"],"n":"result"}}],[11,"from_bytes","","",83,{"i":[{"n":"meminfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["meminforesult","error"],"n":"result"}}],[11,"from_bytes","","",84,{"i":[{"n":"imageinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["imageinforesult","error"],"n":"result"}}],[11,"from_bytes","","",85,{"i":[{"n":"samplerinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["samplerinforesult","error"],"n":"result"}}],[11,"from_bytes","","",86,{"i":[{"n":"programinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["programinforesult","error"],"n":"result"}}],[11,"from_bytes","","",87,{"i":[{"n":"programbuildinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["programbuildinforesult","error"],"n":"result"}}],[11,"from_bytes","","",88,{"i":[{"n":"kernelinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["kernelinforesult","error"],"n":"result"}}],[11,"from_bytes","","",89,{"i":[{"n":"kernelarginfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["kernelarginforesult","error"],"n":"result"}}],[11,"from_bytes","","",90,{"i":[{"n":"kernelworkgroupinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["kernelworkgroupinforesult","error"],"n":"result"}}],[11,"from_bytes","","",91,{"i":[{"n":"eventinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["eventinforesult","error"],"n":"result"}}],[11,"from_bytes","","",92,{"i":[{"n":"profilinginfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["profilinginforesult","error"],"n":"result"}}],[11,"time","","",92,{"i":[{"n":"self"}],"o":{"g":["u64","error"],"n":"result"}}]],"paths":[[4,"SpatialDims"],[4,"BufferCmdError"],[3,"Extensions"],[3,"Platform"],[3,"Device"],[3,"Context"],[3,"Program"],[3,"Kernel"],[3,"Queue"],[3,"Buffer"],[3,"Image"],[3,"Sampler"],[3,"ProQue"],[3,"Event"],[3,"EventArray"],[3,"EventList"],[4,"ErrorKind"],[3,"Error"],[3,"FutureMemMap"],[3,"ReadGuard"],[3,"WriteGuard"],[3,"FutureGuard"],[3,"OrderLock"],[3,"RwVec"],[3,"MemMap"],[3,"FutureFlush"],[3,"BufferSinkInner"],[3,"BufferSink"],[3,"FutureFlood"],[3,"BufferStreamInner"],[3,"BufferStream"],[8,"OrderGuard"],[8,"WorkDims"],[8,"MemLen"],[8,"IntoMarker"],[8,"IntoRawEventArray"],[3,"ImageFormat"],[3,"ImageDescriptor"],[4,"BuildOpt"],[4,"DeviceSpecifier"],[4,"BufferCmdKind"],[4,"BufferCmdDataShape"],[4,"ImageCmdKind"],[4,"ClNullEventPtrEnum"],[4,"ClWaitListPtrEnum"],[4,"ImageChannelOrder"],[4,"ImageChannelDataType"],[4,"Cbool"],[4,"Polling"],[4,"PlatformInfo"],[4,"DeviceInfo"],[4,"DeviceMemCacheType"],[4,"DeviceLocalMemType"],[4,"ContextInfo"],[4,"ContextProperty"],[4,"ContextInfoOrPropertiesPointerType"],[4,"DevicePartitionProperty"],[4,"CommandQueueInfo"],[4,"ChannelType"],[4,"MemObjectType"],[4,"MemInfo"],[4,"ImageInfo"],[4,"AddressingMode"],[4,"FilterMode"],[4,"SamplerInfo"],[4,"ProgramInfo"],[4,"ProgramBuildInfo"],[4,"ProgramBuildStatus"],[4,"KernelInfo"],[4,"KernelArgInfo"],[4,"KernelArgAddressQualifier"],[4,"KernelArgAccessQualifier"],[4,"KernelWorkGroupInfo"],[4,"EventInfo"],[4,"CommandType"],[4,"CommandExecutionStatus"],[4,"BufferCreateType"],[4,"ProfilingInfo"],[4,"ContextPropertyValue"],[4,"PlatformInfoResult"],[4,"DeviceInfoResult"],[4,"ContextInfoResult"],[4,"CommandQueueInfoResult"],[4,"MemInfoResult"],[4,"ImageInfoResult"],[4,"SamplerInfoResult"],[4,"ProgramInfoResult"],[4,"ProgramBuildInfoResult"],[4,"KernelInfoResult"],[4,"KernelArgInfoResult"],[4,"KernelWorkGroupInfoResult"],[4,"EventInfoResult"],[4,"ProfilingInfoResult"],[4,"Status"],[3,"OclCoreError"],[3,"MemFlags"],[3,"MapFlags"],[3,"DeviceExecCapabilities"],[3,"DeviceFpConfig"],[3,"DeviceAffinityDomain"],[3,"DeviceType"],[3,"CommandQueueProperties"],[3,"ProgramBinaryType"],[3,"MemMigrationFlags"],[3,"KernelArgTypeQualifier"],[3,"ContextProperties"],[3,"ArgVal"],[3,"Int"],[3,"Ushort16"],[3,"Ushort"],[3,"Uint2"],[3,"Ulong3"],[3,"Uchar2"],[3,"Uchar"],[3,"Uchar3"],[3,"Ushort2"],[3,"Long16"],[3,"Char4"],[3,"Int2"],[3,"Char3"],[3,"Long"],[3,"Int8"],[3,"Int4"],[3,"Long3"],[3,"Ulong4"],[3,"Long2"],[3,"Uint4"],[3,"Uint16"],[3,"Uchar16"],[3,"Char2"],[3,"Ulong"],[3,"Uint8"],[3,"Uint3"],[3,"Short16"],[3,"Short2"],[3,"Ushort8"],[3,"Char"],[3,"Uchar8"],[3,"Ulong16"],[3,"Ulong2"],[3,"Long8"],[3,"Short8"],[3,"Uint"],[3,"Uchar4"],[3,"Ulong8"],[3,"Short"],[3,"Long4"],[3,"Char8"],[3,"Ushort4"],[3,"Ushort3"],[3,"Short4"],[3,"Int3"],[3,"Char16"],[3,"Int16"],[3,"Short3"],[3,"Double2"],[3,"Float3"],[3,"Float"],[3,"Float2"],[3,"Double"],[3,"Float4"],[3,"Double16"],[3,"Double3"],[3,"Float16"],[3,"Double4"],[3,"Double8"],[3,"Float8"],[3,"ContextBuilder"],[3,"ProgramBuilder"],[3,"KernelCmd"],[3,"KernelBuilder"],[3,"BufferCmd"],[3,"BufferReadCmd"],[3,"BufferWriteCmd"],[3,"BufferMapCmd"],[3,"BufferBuilder"],[3,"ImageCmd"],[3,"ImageBuilder"],[3,"ProQueBuilder"]]};
searchIndex["ocl_core"] = {"doc":"Thin wrappers for the `OpenCL` FFI functions and types.","items":[[3,"Char","ocl_core","",null,null],[3,"Char2","","",null,null],[3,"Char3","","",null,null],[3,"Char4","","",null,null],[3,"Char8","","",null,null],[3,"Char16","","",null,null],[3,"Uchar","","",null,null],[3,"Uchar2","","",null,null],[3,"Uchar3","","",null,null],[3,"Uchar4","","",null,null],[3,"Uchar8","","",null,null],[3,"Uchar16","","",null,null],[3,"Short","","",null,null],[3,"Short2","","",null,null],[3,"Short3","","",null,null],[3,"Short4","","",null,null],[3,"Short8","","",null,null],[3,"Short16","","",null,null],[3,"Ushort","","",null,null],[3,"Ushort2","","",null,null],[3,"Ushort3","","",null,null],[3,"Ushort4","","",null,null],[3,"Ushort8","","",null,null],[3,"Ushort16","","",null,null],[3,"Int","","",null,null],[3,"Int2","","",null,null],[3,"Int3","","",null,null],[3,"Int4","","",null,null],[3,"Int8","","",null,null],[3,"Int16","","",null,null],[3,"Uint","","",null,null],[3,"Uint2","","",null,null],[3,"Uint3","","",null,null],[3,"Uint4","","",null,null],[3,"Uint8","","",null,null],[3,"Uint16","","",null,null],[3,"Long","","",null,null],[3,"Long2","","",null,null],[3,"Long3","","",null,null],[3,"Long4","","",null,null],[3,"Long8","","",null,null],[3,"Long16","","",null,null],[3,"Ulong","","",null,null],[3,"Ulong2","","",null,null],[3,"Ulong3","","",null,null],[3,"Ulong4","","",null,null],[3,"Ulong8","","",null,null],[3,"Ulong16","","",null,null],[3,"Float","","",null,null],[3,"Float2","","",null,null],[3,"Float3","","",null,null],[3,"Float4","","",null,null],[3,"Float8","","",null,null],[3,"Float16","","",null,null],[3,"Double","","",null,null],[3,"Double2","","",null,null],[3,"Double3","","",null,null],[3,"Double4","","",null,null],[3,"Double8","","",null,null],[3,"Double16","","",null,null],[3,"DeviceType","","cl_device_type - bitfield",null,null],[3,"DeviceFpConfig","","cl_device_fp_config - bitfield",null,null],[3,"DeviceExecCapabilities","","cl_device_exec_capabilities - bitfield",null,null],[3,"CommandQueueProperties","","cl_command_queue_properties - bitfield",null,null],[3,"DeviceAffinityDomain","","cl_device_affinity_domain",null,null],[3,"MemFlags","","cl_mem_flags - bitfield",null,null],[3,"MemMigrationFlags","","cl_mem_migration_flags - bitfield",null,null],[3,"MapFlags","","cl_map_flags - bitfield",null,null],[3,"ProgramBinaryType","","cl_program_binary_type",null,null],[3,"KernelArgTypeQualifier","","cl_kernel_arg_type_qualifer",null,null],[4,"Status","","The status of an OpenCL API call. Used for returning success/error codes.",null,null],[13,"CL_SUCCESS","","",0,null],[13,"CL_DEVICE_NOT_FOUND","","",0,null],[13,"CL_DEVICE_NOT_AVAILABLE","","",0,null],[13,"CL_COMPILER_NOT_AVAILABLE","","",0,null],[13,"CL_MEM_OBJECT_ALLOCATION_FAILURE","","",0,null],[13,"CL_OUT_OF_RESOURCES","","",0,null],[13,"CL_OUT_OF_HOST_MEMORY","","",0,null],[13,"CL_PROFILING_INFO_NOT_AVAILABLE","","",0,null],[13,"CL_MEM_COPY_OVERLAP","","",0,null],[13,"CL_IMAGE_FORMAT_MISMATCH","","",0,null],[13,"CL_IMAGE_FORMAT_NOT_SUPPORTED","","",0,null],[13,"CL_BUILD_PROGRAM_FAILURE","","",0,null],[13,"CL_MAP_FAILURE","","",0,null],[13,"CL_MISALIGNED_SUB_BUFFER_OFFSET","","",0,null],[13,"CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST","","",0,null],[13,"CL_COMPILE_PROGRAM_FAILURE","","",0,null],[13,"CL_LINKER_NOT_AVAILABLE","","",0,null],[13,"CL_LINK_PROGRAM_FAILURE","","",0,null],[13,"CL_DEVICE_PARTITION_FAILED","","",0,null],[13,"CL_KERNEL_ARG_INFO_NOT_AVAILABLE","","",0,null],[13,"CL_INVALID_VALUE","","",0,null],[13,"CL_INVALID_DEVICE_TYPE","","",0,null],[13,"CL_INVALID_PLATFORM","","",0,null],[13,"CL_INVALID_DEVICE","","",0,null],[13,"CL_INVALID_CONTEXT","","",0,null],[13,"CL_INVALID_QUEUE_PROPERTIES","","",0,null],[13,"CL_INVALID_COMMAND_QUEUE","","",0,null],[13,"CL_INVALID_HOST_PTR","","",0,null],[13,"CL_INVALID_MEM_OBJECT","","",0,null],[13,"CL_INVALID_IMAGE_FORMAT_DESCRIPTOR","","",0,null],[13,"CL_INVALID_IMAGE_SIZE","","",0,null],[13,"CL_INVALID_SAMPLER","","",0,null],[13,"CL_INVALID_BINARY","","",0,null],[13,"CL_INVALID_BUILD_OPTIONS","","",0,null],[13,"CL_INVALID_PROGRAM","","",0,null],[13,"CL_INVALID_PROGRAM_EXECUTABLE","","",0,null],[13,"CL_INVALID_KERNEL_NAME","","",0,null],[13,"CL_INVALID_KERNEL_DEFINITION","","",0,null],[13,"CL_INVALID_KERNEL","","",0,null],[13,"CL_INVALID_ARG_INDEX","","",0,null],[13,"CL_INVALID_ARG_VALUE","","",0,null],[13,"CL_INVALID_ARG_SIZE","","",0,null],[13,"CL_INVALID_KERNEL_ARGS","","",0,null],[13,"CL_INVALID_WORK_DIMENSION","","",0,null],[13,"CL_INVALID_WORK_GROUP_SIZE","","",0,null],[13,"CL_INVALID_WORK_ITEM_SIZE","","",0,null],[13,"CL_INVALID_GLOBAL_OFFSET","","",0,null],[13,"CL_INVALID_EVENT_WAIT_LIST","","",0,null],[13,"CL_INVALID_EVENT","","",0,null],[13,"CL_INVALID_OPERATION","","",0,null],[13,"CL_INVALID_GL_OBJECT","","",0,null],[13,"CL_INVALID_BUFFER_SIZE","","",0,null],[13,"CL_INVALID_MIP_LEVEL","","",0,null],[13,"CL_INVALID_GLOBAL_WORK_SIZE","","",0,null],[13,"CL_INVALID_PROPERTY","","",0,null],[13,"CL_INVALID_IMAGE_DESCRIPTOR","","",0,null],[13,"CL_INVALID_COMPILER_OPTIONS","","",0,null],[13,"CL_INVALID_LINKER_OPTIONS","","",0,null],[13,"CL_INVALID_DEVICE_PARTITION_COUNT","","",0,null],[13,"CL_INVALID_PIPE_SIZE","","",0,null],[13,"CL_INVALID_DEVICE_QUEUE","","",0,null],[13,"CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR","","",0,null],[13,"CL_PLATFORM_NOT_FOUND_KHR","","",0,null],[13,"CL_NV_INVALID_MEM_ACCESS","","",0,null],[4,"GlTextureTarget","","specify the texture target type",null,null],[13,"GlTexture1d","","",1,null],[13,"GlTexture1dArray","","",1,null],[13,"GlTextureBuffer","","",1,null],[13,"GlTexture2d","","",1,null],[13,"GlTexture2dArray","","",1,null],[13,"GlTexture3d","","",1,null],[13,"GlTextureCubeMapPositiveX","","",1,null],[13,"GlTextureCubeMapPositiveY","","",1,null],[13,"GlTextureCubeMapPositiveZ","","",1,null],[13,"GlTextureCubeMapNegativeX","","",1,null],[13,"GlTextureCubeMapNegativeY","","",1,null],[13,"GlTextureCubeMapNegativeZ","","",1,null],[13,"GlTextureRectangle","","",1,null],[4,"ClGlObjectType","","",null,null],[13,"ClGlObjectBuffer","","",2,null],[13,"ClGlObjectTexture2D","","",2,null],[13,"ClGlObjectTexture3D","","",2,null],[13,"ClGlObjectRenderbuffer","","",2,null],[13,"ClGlObjectTexture2DArray","","",2,null],[13,"ClGlObjectTexture1D","","",2,null],[13,"ClGlObjectTexture1DArray","","",2,null],[13,"ClGlObjectTextureBuffer","","",2,null],[4,"ImageChannelOrder","","Specifies the number of channels and the channel layout i.e. the memory layout in which channels are stored in the image. Valid values are described in the table below. (from SDK)",null,null],[13,"R","","",3,null],[13,"A","","",3,null],[13,"Rg","","",3,null],[13,"Ra","","",3,null],[13,"Rgb","","",3,null],[13,"Rgba","","",3,null],[13,"Bgra","","",3,null],[13,"Argb","","",3,null],[13,"Intensity","","",3,null],[13,"Luminance","","",3,null],[13,"Rx","","",3,null],[13,"Rgx","","",3,null],[13,"Rgbx","","",3,null],[13,"Depth","","",3,null],[13,"DepthStencil","","",3,null],[4,"ImageChannelDataType","","Describes the size of the channel data type. The number of bits per element determined by the image_channel_data_type and image_channel_order must be a power of two. The list of supported values is described in the table below. (from SDK)",null,null],[13,"SnormInt8","","",4,null],[13,"SnormInt16","","",4,null],[13,"UnormInt8","","",4,null],[13,"UnormInt16","","",4,null],[13,"UnormShort565","","",4,null],[13,"UnormShort555","","",4,null],[13,"UnormInt101010","","",4,null],[13,"SignedInt8","","",4,null],[13,"SignedInt16","","",4,null],[13,"SignedInt32","","",4,null],[13,"UnsignedInt8","","",4,null],[13,"UnsignedInt16","","",4,null],[13,"UnsignedInt32","","",4,null],[13,"HalfFloat","","",4,null],[13,"Float","","",4,null],[13,"UnormInt24","","",4,null],[4,"Cbool","","cl_bool",null,null],[13,"False","","",5,null],[13,"True","","",5,null],[4,"Polling","","cl_bool: Polling",null,null],[13,"Blocking","","",6,null],[13,"NonBlocking","","",6,null],[4,"PlatformInfo","","cl_platform_info",null,null],[13,"Profile","","",7,null],[13,"Version","","",7,null],[13,"Name","","",7,null],[13,"Vendor","","",7,null],[13,"Extensions","","",7,null],[4,"DeviceInfo","","cl_device_info",null,null],[13,"Type","","",8,null],[13,"VendorId","","",8,null],[13,"MaxComputeUnits","","",8,null],[13,"MaxWorkItemDimensions","","",8,null],[13,"MaxWorkGroupSize","","",8,null],[13,"MaxWorkItemSizes","","",8,null],[13,"PreferredVectorWidthChar","","",8,null],[13,"PreferredVectorWidthShort","","",8,null],[13,"PreferredVectorWidthInt","","",8,null],[13,"PreferredVectorWidthLong","","",8,null],[13,"PreferredVectorWidthFloat","","",8,null],[13,"PreferredVectorWidthDouble","","",8,null],[13,"MaxClockFrequency","","",8,null],[13,"AddressBits","","",8,null],[13,"MaxReadImageArgs","","",8,null],[13,"MaxWriteImageArgs","","",8,null],[13,"MaxMemAllocSize","","",8,null],[13,"Image2dMaxWidth","","",8,null],[13,"Image2dMaxHeight","","",8,null],[13,"Image3dMaxWidth","","",8,null],[13,"Image3dMaxHeight","","",8,null],[13,"Image3dMaxDepth","","",8,null],[13,"ImageSupport","","",8,null],[13,"MaxParameterSize","","",8,null],[13,"MaxSamplers","","",8,null],[13,"MemBaseAddrAlign","","",8,null],[13,"MinDataTypeAlignSize","","",8,null],[13,"SingleFpConfig","","",8,null],[13,"GlobalMemCacheType","","",8,null],[13,"GlobalMemCachelineSize","","",8,null],[13,"GlobalMemCacheSize","","",8,null],[13,"GlobalMemSize","","",8,null],[13,"MaxConstantBufferSize","","",8,null],[13,"MaxConstantArgs","","",8,null],[13,"LocalMemType","","",8,null],[13,"LocalMemSize","","",8,null],[13,"ErrorCorrectionSupport","","",8,null],[13,"ProfilingTimerResolution","","",8,null],[13,"EndianLittle","","",8,null],[13,"Available","","",8,null],[13,"CompilerAvailable","","",8,null],[13,"ExecutionCapabilities","","",8,null],[13,"QueueProperties","","",8,null],[13,"Name","","",8,null],[13,"Vendor","","",8,null],[13,"DriverVersion","","",8,null],[13,"Profile","","",8,null],[13,"Version","","",8,null],[13,"Extensions","","",8,null],[13,"Platform","","",8,null],[13,"DoubleFpConfig","","",8,null],[13,"HalfFpConfig","","",8,null],[13,"PreferredVectorWidthHalf","","",8,null],[13,"HostUnifiedMemory","","",8,null],[13,"NativeVectorWidthChar","","",8,null],[13,"NativeVectorWidthShort","","",8,null],[13,"NativeVectorWidthInt","","",8,null],[13,"NativeVectorWidthLong","","",8,null],[13,"NativeVectorWidthFloat","","",8,null],[13,"NativeVectorWidthDouble","","",8,null],[13,"NativeVectorWidthHalf","","",8,null],[13,"OpenclCVersion","","",8,null],[13,"LinkerAvailable","","",8,null],[13,"BuiltInKernels","","",8,null],[13,"ImageMaxBufferSize","","",8,null],[13,"ImageMaxArraySize","","",8,null],[13,"ParentDevice","","",8,null],[13,"PartitionMaxSubDevices","","",8,null],[13,"PartitionProperties","","",8,null],[13,"PartitionAffinityDomain","","",8,null],[13,"PartitionType","","",8,null],[13,"ReferenceCount","","",8,null],[13,"PreferredInteropUserSync","","",8,null],[13,"PrintfBufferSize","","",8,null],[13,"ImagePitchAlignment","","",8,null],[13,"ImageBaseAddressAlignment","","",8,null],[4,"DeviceMemCacheType","","cl_mem_cache_type",null,null],[13,"None","","",9,null],[13,"ReadOnlyCache","","",9,null],[13,"ReadWriteCache","","",9,null],[4,"DeviceLocalMemType","","cl_device_local_mem_type",null,null],[13,"None","","",10,null],[13,"Local","","",10,null],[13,"Global","","",10,null],[4,"ContextInfo","","cl_context_info",null,null],[13,"ReferenceCount","","",11,null],[13,"Devices","","",11,null],[13,"Properties","","",11,null],[13,"NumDevices","","",11,null],[4,"GlContextInfo","","cl_gl_context_info",null,null],[13,"CurrentDevice","","",12,null],[13,"Devices","","",12,null],[4,"ContextProperty","","cl_context_info + cl_context_properties",null,null],[13,"Platform","","",13,null],[13,"InteropUserSync","","",13,null],[13,"D3d10DeviceKhr","","",13,null],[13,"GlContextKhr","","",13,null],[13,"EglDisplayKhr","","",13,null],[13,"GlxDisplayKhr","","",13,null],[13,"CglSharegroupKhr","","",13,null],[13,"WglHdcKhr","","",13,null],[13,"AdapterD3d9Khr","","",13,null],[13,"AdapterD3d9exKhr","","",13,null],[13,"AdapterDxvaKhr","","",13,null],[13,"D3d11DeviceKhr","","",13,null],[4,"ContextInfoOrPropertiesPointerType","","cl_context_info + cl_context_properties",null,null],[13,"Platform","","",14,null],[13,"InteropUserSync","","",14,null],[4,"DevicePartitionProperty","","[INCOMPLETE] cl_device_partition_property",null,null],[13,"Equally","","",15,null],[13,"ByCounts","","",15,null],[13,"ByCountsListEnd","","",15,null],[13,"ByAffinityDomain","","",15,null],[4,"CommandQueueInfo","","cl_command_queue_info",null,null],[13,"Context","","",16,null],[13,"Device","","",16,null],[13,"ReferenceCount","","",16,null],[13,"Properties","","",16,null],[4,"ChannelType","","cl_channel_type",null,null],[13,"SnormInt8","","",17,null],[13,"SnormInt16","","",17,null],[13,"UnormInt8","","",17,null],[13,"UnormInt16","","",17,null],[13,"UnormShort565","","",17,null],[13,"UnormShort555","","",17,null],[13,"UnormInt101010","","",17,null],[13,"SignedInt8","","",17,null],[13,"SignedInt16","","",17,null],[13,"SignedInt32","","",17,null],[13,"UnsignedInt8","","",17,null],[13,"UnsignedInt16","","",17,null],[13,"UnsignedInt32","","",17,null],[13,"HalfFloat","","",17,null],[13,"Float","","",17,null],[13,"UnormInt24","","",17,null],[4,"MemObjectType","","cl_mem_object_type",null,null],[13,"Buffer","","",18,null],[13,"Image2d","","",18,null],[13,"Image3d","","",18,null],[13,"Image2dArray","","",18,null],[13,"Image1d","","",18,null],[13,"Image1dArray","","",18,null],[13,"Image1dBuffer","","",18,null],[4,"MemInfo","","cl_mem_info",null,null],[13,"Type","","",19,null],[13,"Flags","","",19,null],[13,"Size","","",19,null],[13,"HostPtr","","",19,null],[13,"MapCount","","",19,null],[13,"ReferenceCount","","",19,null],[13,"Context","","",19,null],[13,"AssociatedMemobject","","",19,null],[13,"Offset","","",19,null],[4,"ImageInfo","","cl_image_info",null,null],[13,"Format","","",20,null],[13,"ElementSize","","",20,null],[13,"RowPitch","","",20,null],[13,"SlicePitch","","",20,null],[13,"Width","","",20,null],[13,"Height","","",20,null],[13,"Depth","","",20,null],[13,"ArraySize","","",20,null],[13,"Buffer","","",20,null],[13,"NumMipLevels","","",20,null],[13,"NumSamples","","",20,null],[4,"AddressingMode","","cl_addressing_mode",null,null],[13,"None","","",21,null],[13,"ClampToEdge","","",21,null],[13,"Clamp","","",21,null],[13,"Repeat","","",21,null],[13,"MirroredRepeat","","",21,null],[4,"FilterMode","","cl_filter_mode",null,null],[13,"Nearest","","",22,null],[13,"Linear","","",22,null],[4,"SamplerInfo","","cl_sampler_info",null,null],[13,"ReferenceCount","","",23,null],[13,"Context","","",23,null],[13,"NormalizedCoords","","",23,null],[13,"AddressingMode","","",23,null],[13,"FilterMode","","",23,null],[4,"ProgramInfo","","cl_program_info",null,null],[13,"ReferenceCount","","",24,null],[13,"Context","","",24,null],[13,"NumDevices","","",24,null],[13,"Devices","","",24,null],[13,"Source","","",24,null],[13,"BinarySizes","","",24,null],[13,"Binaries","","",24,null],[13,"NumKernels","","",24,null],[13,"KernelNames","","",24,null],[4,"ProgramBuildInfo","","cl_program_build_info",null,null],[13,"BuildStatus","","",25,null],[13,"BuildOptions","","",25,null],[13,"BuildLog","","",25,null],[13,"BinaryType","","",25,null],[4,"ProgramBuildStatus","","cl_build_status",null,null],[13,"Success","","",26,null],[13,"None","","",26,null],[13,"Error","","",26,null],[13,"InProgress","","",26,null],[4,"KernelInfo","","cl_kernel_info",null,null],[13,"FunctionName","","",27,null],[13,"NumArgs","","",27,null],[13,"ReferenceCount","","",27,null],[13,"Context","","",27,null],[13,"Program","","",27,null],[13,"Attributes","","",27,null],[4,"KernelArgInfo","","cl_kernel_arg_info",null,null],[13,"AddressQualifier","","",28,null],[13,"AccessQualifier","","",28,null],[13,"TypeName","","",28,null],[13,"TypeQualifier","","",28,null],[13,"Name","","",28,null],[4,"KernelArgAddressQualifier","","cl_kernel_arg_address_qualifier",null,null],[13,"Global","","",29,null],[13,"Local","","",29,null],[13,"Constant","","",29,null],[13,"Private","","",29,null],[4,"KernelArgAccessQualifier","","cl_kernel_arg_access_qualifier",null,null],[13,"ReadOnly","","",30,null],[13,"WriteOnly","","",30,null],[13,"ReadWrite","","",30,null],[13,"None","","",30,null],[4,"KernelWorkGroupInfo","","cl_kernel_work_group_info",null,null],[13,"WorkGroupSize","","",31,null],[13,"CompileWorkGroupSize","","",31,null],[13,"LocalMemSize","","",31,null],[13,"PreferredWorkGroupSizeMultiple","","",31,null],[13,"PrivateMemSize","","",31,null],[13,"GlobalWorkSize","","",31,null],[4,"EventInfo","","cl_event_info",null,null],[13,"CommandQueue","","",32,null],[13,"CommandType","","",32,null],[13,"ReferenceCount","","",32,null],[13,"CommandExecutionStatus","","",32,null],[13,"Context","","",32,null],[4,"CommandType","","cl_command_type",null,null],[13,"NdrangeKernel","","",33,null],[13,"Task","","",33,null],[13,"NativeKernel","","",33,null],[13,"ReadBuffer","","",33,null],[13,"WriteBuffer","","",33,null],[13,"CopyBuffer","","",33,null],[13,"ReadImage","","",33,null],[13,"WriteImage","","",33,null],[13,"CopyImage","","",33,null],[13,"CopyImageToBuffer","","",33,null],[13,"CopyBufferToImage","","",33,null],[13,"MapBuffer","","",33,null],[13,"MapImage","","",33,null],[13,"UnmapMemObject","","",33,null],[13,"Marker","","",33,null],[13,"AcquireGlObjects","","",33,null],[13,"ReleaseGlObjects","","",33,null],[13,"ReadBufferRect","","",33,null],[13,"WriteBufferRect","","",33,null],[13,"CopyBufferRect","","",33,null],[13,"User","","",33,null],[13,"Barrier","","",33,null],[13,"MigrateMemObjects","","",33,null],[13,"FillBuffer","","",33,null],[13,"FillImage","","",33,null],[4,"CommandExecutionStatus","","command execution status",null,null],[13,"Complete","","",34,null],[13,"Running","","",34,null],[13,"Submitted","","",34,null],[13,"Queued","","",34,null],[4,"BufferCreateType","","cl_buffer_create_type",null,null],[13,"Region","","",35,null],[13,"__DUMMY","","",35,null],[4,"ProfilingInfo","","cl_profiling_info",null,null],[13,"Queued","","",36,null],[13,"Submit","","",36,null],[13,"Start","","",36,null],[13,"End","","",36,null],[5,"get_platform_ids","","Returns a list of available platforms as 'core' objects.",null,{"o":{"g":["vec"],"n":"oclcoreresult"}}],[5,"get_platform_info","","Returns platform information of the requested type.",null,{"i":[{"n":"p"},{"n":"platforminfo"}],"o":{"g":["platforminforesult"],"n":"oclcoreresult"}}],[5,"get_device_ids","","Returns a list of available devices for a particular platform.",null,{"i":[{"n":"p"},{"g":["devicetype"],"n":"option"},{"g":["u32"],"n":"option"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[5,"get_device_info","","Returns information about a device.",null,{"i":[{"n":"d"},{"n":"deviceinfo"}],"o":{"g":["deviceinforesult"],"n":"oclcoreresult"}}],[5,"create_sub_devices","","[UNIMPLEMENTED: Please implement me]",null,{"i":[{"g":["openclversion"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"retain_device","","Increments the reference count of a device.",null,{"i":[{"n":"deviceid"},{"g":["openclversion"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"release_device","","Decrements the reference count of a device.",null,{"i":[{"n":"deviceid"},{"g":["openclversion"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"create_context","","Creates a new context pointer valid for all devices in `device_ids`.",null,null],[5,"create_context_from_type","","Creates a new context pointer for all devices of a specific type.",null,{"i":[{"g":["contextproperties"],"n":"option"},{"n":"devicetype"},{"g":["createcontextcallbackfn"],"n":"option"},{"g":["userdataptr"],"n":"option"}],"o":{"g":["context"],"n":"oclcoreresult"}}],[5,"retain_context","","Increments the reference count of a context.",null,{"i":[{"n":"c"}],"o":{"n":"oclcoreresult"}}],[5,"release_context","","Decrements reference count of a context.",null,{"i":[{"n":"c"}],"o":{"n":"oclcoreresult"}}],[5,"get_context_info","","Returns various kinds of context information.",null,{"i":[{"n":"c"},{"n":"contextinfo"}],"o":{"g":["contextinforesult"],"n":"oclcoreresult"}}],[5,"create_command_queue","","Returns a new command queue pointer.",null,{"i":[{"n":"c"},{"n":"d"},{"g":["commandqueueproperties"],"n":"option"}],"o":{"g":["commandqueue"],"n":"oclcoreresult"}}],[5,"retain_command_queue","","Increments the reference count of a command queue.",null,{"i":[{"n":"commandqueue"}],"o":{"n":"oclcoreresult"}}],[5,"release_command_queue","","Decrements the reference count of a command queue.",null,{"i":[{"n":"commandqueue"}],"o":{"n":"oclcoreresult"}}],[5,"get_command_queue_info","","Returns information about a command queue",null,{"i":[{"n":"commandqueue"},{"n":"commandqueueinfo"}],"o":{"g":["commandqueueinforesult"],"n":"oclcoreresult"}}],[5,"create_buffer","","Returns a new buffer pointer with size (bytes): `len` * sizeof(T).",null,{"i":[{"n":"c"},{"n":"memflags"},{"n":"usize"},{"n":"option"}],"o":{"g":["mem"],"n":"oclcoreresult"}}],[5,"create_sub_buffer","","Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.",null,{"i":[{"n":"mem"},{"n":"memflags"},{"n":"bufferregion"}],"o":{"g":["mem"],"n":"oclcoreresult"}}],[5,"create_image","","Returns a new image (mem) pointer.",null,{"i":[{"n":"c"},{"n":"memflags"},{"n":"imageformat"},{"n":"imagedescriptor"},{"n":"option"},{"n":"option"}],"o":{"g":["mem"],"n":"oclcoreresult"}}],[5,"retain_mem_object","","Increments the reference counter of a mem object.",null,{"i":[{"n":"mem"}],"o":{"n":"oclcoreresult"}}],[5,"release_mem_object","","Decrements the reference counter of a mem object.",null,{"i":[{"n":"mem"}],"o":{"n":"oclcoreresult"}}],[5,"get_supported_image_formats","","Returns a list of supported image formats.",null,{"i":[{"n":"c"},{"n":"memflags"},{"n":"memobjecttype"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[5,"get_mem_object_info","","Get mem object info.",null,{"i":[{"n":"mem"},{"n":"meminfo"}],"o":{"g":["meminforesult"],"n":"oclcoreresult"}}],[5,"get_image_info","","Get image info.",null,{"i":[{"n":"mem"},{"n":"imageinfo"}],"o":{"g":["imageinforesult"],"n":"oclcoreresult"}}],[5,"set_mem_object_destructor_callback","","[UNIMPLEMENTED: Please implement me]",null,{"o":{"n":"oclcoreresult"}}],[5,"create_sampler","","Creates and returns a new sampler object.",null,{"i":[{"n":"c"},{"n":"bool"},{"n":"addressingmode"},{"n":"filtermode"}],"o":{"g":["sampler"],"n":"oclcoreresult"}}],[5,"retain_sampler","","Increments a sampler reference counter.",null,{"i":[{"n":"sampler"}],"o":{"n":"oclcoreresult"}}],[5,"release_sampler","","Decrements a sampler reference counter.",null,{"i":[{"n":"sampler"}],"o":{"n":"oclcoreresult"}}],[5,"get_sampler_info","","Returns information about the sampler object.",null,{"i":[{"n":"sampler"},{"n":"samplerinfo"}],"o":{"g":["samplerinforesult"],"n":"oclcoreresult"}}],[5,"create_program_with_source","","Creates a new program.",null,null],[5,"create_program_with_binary","","Creates a program object for a context, and loads the binary bits specified by binary into the program object.",null,null],[5,"create_program_with_built_in_kernels","","[UNIMPLEMENTED: Please implement me]",null,{"i":[{"g":["openclversion"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"retain_program","","Increments a program reference counter.",null,{"i":[{"n":"program"}],"o":{"n":"oclcoreresult"}}],[5,"release_program","","Decrements a program reference counter.",null,{"i":[{"n":"program"}],"o":{"n":"oclcoreresult"}}],[5,"build_program","","Builds a program.",null,{"i":[{"n":"program"},{"n":"option"},{"n":"cstring"},{"g":["buildprogramcallbackfn"],"n":"option"},{"g":["box"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"compile_program","","[UNIMPLEMENTED: Please implement me]",null,{"i":[{"g":["openclversion"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"link_program","","[UNIMPLEMENTED: Please implement me]",null,{"i":[{"g":["openclversion"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"create_build_program","","Creates, builds, and returns a new program pointer from `src_strings`.",null,null],[5,"get_program_info","","Get program info.",null,{"i":[{"n":"program"},{"n":"programinfo"}],"o":{"g":["programinforesult"],"n":"oclcoreresult"}}],[5,"get_program_build_info","","Get program build info.",null,{"i":[{"n":"program"},{"n":"d"},{"n":"programbuildinfo"}],"o":{"g":["programbuildinforesult"],"n":"oclcoreresult"}}],[5,"create_kernel","","Returns a new kernel.",null,{"i":[{"n":"program"},{"n":"s"}],"o":{"g":["kernel"],"n":"oclcoreresult"}}],[5,"create_kernels_in_program","","[UNIMPLEMENTED: Please implement me]",null,{"o":{"n":"oclcoreresult"}}],[5,"retain_kernel","","Increments a kernel reference counter.",null,{"i":[{"n":"kernel"}],"o":{"n":"oclcoreresult"}}],[5,"release_kernel","","Decrements a kernel reference counter.",null,{"i":[{"n":"kernel"}],"o":{"n":"oclcoreresult"}}],[5,"set_kernel_arg","","Sets the argument value for the kernel argument at `index`.",null,{"i":[{"n":"kernel"},{"n":"u32"},{"n":"argval"}],"o":{"n":"oclcoreresult"}}],[5,"get_kernel_info","","Get kernel info.",null,{"i":[{"n":"kernel"},{"n":"kernelinfo"}],"o":{"g":["kernelinforesult"],"n":"oclcoreresult"}}],[5,"get_kernel_arg_info","","Get kernel arg info.",null,{"i":[{"n":"kernel"},{"n":"u32"},{"n":"kernelarginfo"},{"n":"option"}],"o":{"g":["kernelarginforesult"],"n":"oclcoreresult"}}],[5,"get_kernel_work_group_info","","Get kernel work group info.",null,{"i":[{"n":"kernel"},{"n":"d"},{"n":"kernelworkgroupinfo"}],"o":{"g":["kernelworkgroupinforesult"],"n":"oclcoreresult"}}],[5,"wait_for_events","","Blocks until the first `num_events` events in `event_list` are complete.",null,{"i":[{"n":"u32"},{"n":"clwaitlistptr"}],"o":{"n":"oclcoreresult"}}],[5,"get_event_info","","Get event info.",null,{"i":[{"n":"e"},{"n":"eventinfo"}],"o":{"g":["eventinforesult"],"n":"oclcoreresult"}}],[5,"create_user_event","","Creates an event not already associated with any command.",null,{"i":[{"n":"c"}],"o":{"g":["event"],"n":"oclcoreresult"}}],[5,"retain_event","","Increments an event's reference counter.",null,{"i":[{"n":"e"}],"o":{"n":"oclcoreresult"}}],[5,"release_event","","Decrements an event's reference counter.",null,{"i":[{"n":"e"}],"o":{"n":"oclcoreresult"}}],[5,"set_user_event_status","","Updates a user events status.",null,{"i":[{"n":"e"},{"n":"commandexecutionstatus"}],"o":{"n":"oclcoreresult"}}],[5,"set_event_callback","","Sets a callback function which is called as soon as the `callback_trigger` status is reached.",null,null],[5,"get_event_profiling_info","","Get event profiling info (for debugging / benchmarking).",null,{"i":[{"n":"e"},{"n":"profilinginfo"}],"o":{"g":["profilinginforesult"],"n":"oclcoreresult"}}],[5,"flush","","Flushes a command queue.",null,{"i":[{"n":"commandqueue"}],"o":{"n":"oclcoreresult"}}],[5,"finish","","Waits for a queue to finish.",null,{"i":[{"n":"commandqueue"}],"o":{"n":"oclcoreresult"}}],[5,"enqueue_read_buffer","","Enqueues a read from device memory referred to by `buffer` to device memory, `data`.",null,null],[5,"enqueue_read_buffer_rect","","Enqueues a command to read from a rectangular region from a buffer object to host memory.",null,null],[5,"enqueue_write_buffer","","Enqueues a write from host memory, `data`, to device memory referred to by `buffer`.",null,null],[5,"enqueue_write_buffer_rect","","Enqueues a command to write from a rectangular region from host memory to a buffer object.",null,null],[5,"enqueue_copy_buffer","","Copies the contents of one buffer to another.",null,{"i":[{"n":"commandqueue"},{"n":"m"},{"n":"m"},{"n":"usize"},{"n":"usize"},{"n":"usize"},{"n":"option"},{"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"enqueue_copy_buffer_rect","","Enqueues a command to copy a rectangular region from a buffer object to another buffer object.",null,null],[5,"enqueue_read_image","","Reads an image from device to host memory.",null,null],[5,"enqueue_write_image","","Enqueues a command to write to an image or image array object from host memory.",null,null],[5,"enqueue_fill_image","","Enqueues a command to fill an image object with a specified color.",null,null],[5,"enqueue_copy_image","","Enqueues a command to copy image objects.",null,null],[5,"enqueue_copy_image_to_buffer","","Enqueues a command to copy an image object to a buffer object.",null,null],[5,"enqueue_copy_buffer_to_image","","Enqueues a command to copy a buffer object to an image object.",null,null],[5,"enqueue_map_buffer","","Enqueues a command to map a region of the buffer object given by `buffer` into the host address space and returns a pointer to this mapped region.",null,{"i":[{"n":"commandqueue"},{"n":"m"},{"n":"bool"},{"n":"mapflags"},{"n":"usize"},{"n":"usize"},{"n":"option"},{"n":"option"}],"o":{"g":["memmap"],"n":"oclcoreresult"}}],[5,"enqueue_map_image","","Enqueues a command to map a region of the image object given by `image` into the host address space and returns a pointer to this mapped region.",null,null],[5,"enqueue_unmap_mem_object","","Enqueues a command to unmap a previously mapped region of a memory object.",null,{"i":[{"n":"commandqueue"},{"n":"m"},{"n":"memmap"},{"n":"option"},{"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"enqueue_migrate_mem_objects","","Enqueues a command to indicate which device a set of memory objects should be associated with.",null,null],[5,"enqueue_kernel","","Enqueues a command to execute a kernel on a device.",null,null],[5,"enqueue_task","","Enqueues a command to execute a kernel on a device.",null,{"i":[{"n":"commandqueue"},{"n":"kernel"},{"n":"option"},{"n":"option"},{"g":["str"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"enqueue_native_kernel","","[UNIMPLEMENTED: Please implement me]",null,{"o":{"n":"oclcoreresult"}}],[5,"enqueue_marker_with_wait_list","","Enqueues a marker command which waits for either a list of events to complete, or all previously enqueued commands to complete.",null,{"i":[{"n":"commandqueue"},{"n":"option"},{"n":"option"},{"g":["openclversion"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"enqueue_barrier_with_wait_list","","A synchronization point that enqueues a barrier operation.",null,{"i":[{"n":"commandqueue"},{"n":"option"},{"n":"option"},{"g":["openclversion"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"get_extension_function_address_for_platform","","Returns the address of the extension function named by `func_name` for a given platform.",null,{"i":[{"n":"platformid"},{"n":"str"},{"g":["openclversion"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"wait_for_event","","Blocks until an event is complete.",null,{"i":[{"n":"e"}],"o":{"n":"oclcoreresult"}}],[5,"event_status","","Returns the status of `event`.",null,{"i":[{"n":"e"}],"o":{"g":["commandexecutionstatus"],"n":"oclcoreresult"}}],[5,"default_platform_idx","","Returns the default platform if set by an environment variable or config file.",null,{"o":{"n":"usize"}}],[5,"program_build_err","","If the program pointed to by `cl_program` for any of the devices listed in `device_ids` has a build log of any length, it will be returned as an errcode result.",null,null],[5,"verify_context","","Verifies that the `context` is in fact a context object pointer.",null,{"i":[{"n":"c"}],"o":{"n":"oclcoreresult"}}],[5,"default_platform","","Returns the default or first platform.",null,{"o":{"g":["platformid"],"n":"oclcoreresult"}}],[5,"default_device_type","","Returns the default device type bitflags as specified by environment variable or else `DEVICE_TYPE_ALL`.",null,{"o":{"g":["devicetype"],"n":"oclcoreresult"}}],[5,"device_versions","","Returns a list of versions for devices.",null,null],[5,"event_is_complete","","Returns true if an event is complete, false if not complete.",null,{"i":[{"n":"e"}],"o":{"g":["bool"],"n":"oclcoreresult"}}],[5,"_dummy_event_callback","","Don't be a dummy. Buckle your `_dummy_callback`.",null,null],[5,"_complete_user_event","","If `event_status` is `CommandExecutionStatus::Complete`, the `cl_event` pointed to by `user_data` will be set to the same.",null,null],[5,"get_context_platform","","Returns the platform for a context.",null,{"i":[{"n":"c"}],"o":{"g":["option"],"n":"oclcoreresult"}}],[5,"get_device_info_raw","","Returns raw information about a device, as a vector of bytes. ",null,{"i":[{"n":"d"},{"n":"u32"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[5,"get_gl_context_info_khr","","[INOPERATIVE: Needs troubleshooting] Returns OpenGL context information.",null,{"i":[{"n":"contextproperties"},{"n":"glcontextinfo"}],"o":{"g":["glcontextinforesult"],"n":"oclcoreresult"}}],[5,"create_from_gl_buffer","","Return a buffer pointer from a `OpenGL` buffer object.",null,{"i":[{"n":"c"},{"n":"cl_gluint"},{"n":"memflags"}],"o":{"g":["mem"],"n":"oclcoreresult"}}],[5,"create_from_gl_renderbuffer","","Return a renderbuffer pointer from a `OpenGL` renderbuffer object.",null,{"i":[{"n":"c"},{"n":"cl_gluint"},{"n":"memflags"}],"o":{"g":["mem"],"n":"oclcoreresult"}}],[5,"create_from_gl_texture","","Return a texture2D pointer from a `OpenGL` texture2D object.",null,{"i":[{"n":"c"},{"n":"cl_glenum"},{"n":"cl_glint"},{"n":"cl_gluint"},{"n":"memflags"},{"n":"option"}],"o":{"g":["mem"],"n":"oclcoreresult"}}],[5,"create_from_gl_texture_2d","","Return a texture2D pointer from a `OpenGL` texture2D object.",null,{"i":[{"n":"c"},{"n":"cl_glenum"},{"n":"cl_glint"},{"n":"cl_gluint"},{"n":"memflags"}],"o":{"g":["mem"],"n":"oclcoreresult"}}],[5,"create_from_gl_texture_3d","","Return a texture3D pointer from a `OpenGL` texture3D object.",null,{"i":[{"n":"c"},{"n":"cl_glenum"},{"n":"cl_glint"},{"n":"cl_gluint"},{"n":"memflags"}],"o":{"g":["mem"],"n":"oclcoreresult"}}],[5,"enqueue_fill_buffer","","Enqueues a command to fill a buffer object with a pattern of a given pattern size.",null,{"i":[{"n":"commandqueue"},{"n":"m"},{"n":"t"},{"n":"usize"},{"n":"usize"},{"n":"option"},{"n":"option"},{"g":["openclversion"],"n":"option"}],"o":{"n":"oclcoreresult"}}],[5,"enqueue_acquire_gl_objects","","Acquire OpenCL memory objects (buffers and images) that have been created from OpenGL objects.",null,null],[5,"enqueue_release_gl_objects","","Release OpenCL memory objects (buffers and images) that have been created from OpenGL objects.",null,null],[5,"create_program_with_il","","Returns a new `Program` loaded with the provided IL bytes.",null,null],[0,"types","","",null,null],[0,"abs","ocl_core::types","Abstract data type wrappers.",null,null],[3,"EventRefWrapper","ocl_core::types::abs","Wrapper used by `EventList` to send event pointers to core functions cheaply.",null,null],[3,"PlatformId","","cl_platform_id",null,null],[3,"DeviceId","","cl_device_id",null,null],[3,"Context","","cl_context",null,null],[3,"CommandQueue","","cl_command_queue",null,null],[3,"Mem","","cl_mem",null,null],[3,"MemMap","","A pointer to a region of mapped (pinned) memory.",null,null],[3,"Program","","cl_program",null,null],[3,"Kernel","","cl_kernel",null,null],[3,"Event","","cl_event",null,null],[3,"Sampler","","cl_sampler",null,null],[8,"AsMem","","`AsRef` with a type being carried along for convenience.",null,null],[10,"as_mem","","",37,{"i":[{"n":"self"}],"o":{"n":"mem"}}],[8,"MemCmdRw","","Types which can be passed as the primary (`ptr`) argument value to `::enqueue_read_buffer`, `::enqueue_write_buffer`, `::enqueue_read_buffer_rect`, `::enqueue_write_buffer_rect`, `::enqueue_read_image`, or `::enqueue_write_image`.",null,null],[8,"MemCmdAll","","Types which can be passed to any and all `::enqueue_...` functions as the primary (`ptr`) argument and can also be passed as kernel `cl_mem` arguments.",null,null],[8,"ClVersions","","Types with a fixed set of associated devices and an associated platform.",null,null],[10,"device_versions","","",38,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[10,"platform_version","","",38,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"verify_device_versions","","",38,null],[11,"verify_platform_version","","",38,null],[8,"ClEventPtrRef","","Types with a reference to a raw event pointer.",null,null],[10,"as_ptr_ref","","",39,{"i":[{"n":"self"}],"o":{"n":"cl_event"}}],[8,"ClNullEventPtr","","Types with a mutable pointer to a new, null raw event pointer.",null,null],[10,"alloc_new","","",40,null],[10,"clone_from","","",40,{"i":[{"n":"self"},{"n":"e"}]}],[8,"ClWaitListPtr","","Types with a reference to a raw event array and an associated element count.",null,null],[10,"as_ptr_ptr","","Returns a pointer to the first pointer in this list.",41,null],[10,"count","","Returns the number of items in this wait list.",41,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[8,"ClPlatformIdPtr","","Types with a reference to a raw platform_id pointer.",null,null],[10,"as_ptr","","",42,{"i":[{"n":"self"}],"o":{"n":"cl_platform_id"}}],[8,"ClDeviceIdPtr","","Types with a reference to a raw device_id pointer.",null,null],[10,"as_ptr","","",43,{"i":[{"n":"self"}],"o":{"n":"cl_device_id"}}],[8,"ClContextPtr","","Types with a copy of a context pointer.",null,null],[10,"as_ptr","","",44,{"i":[{"n":"self"}],"o":{"n":"cl_context"}}],[11,"new","","",45,{"i":[{"n":"cl_event"}],"o":{"n":"eventrefwrapper"}}],[11,"as_ptr_ref","","",45,{"i":[{"n":"self"}],"o":{"n":"cl_event"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"platformid"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",46,null],[11,"from_raw","","Creates a new `PlatformId` wrapper from a raw pointer.",46,{"i":[{"n":"cl_platform_id"}],"o":{"n":"platformid"}}],[11,"null","","Returns an invalid `PlatformId` used for initializing data structures meant to be filled with valid ones.",46,{"o":{"n":"platformid"}}],[11,"as_ptr","","Returns a pointer.",46,{"i":[{"n":"self"}],"o":{"n":"cl_platform_id"}}],[11,"version","","Returns the queried and parsed OpenCL version for this platform.",46,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"as_ptr","","",46,{"i":[{"n":"self"}],"o":{"n":"cl_platform_id"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"platformid"}],"o":{"n":"bool"}}],[11,"device_versions","","",46,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[11,"platform_version","","",46,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"deviceid"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",47,null],[11,"from_raw","","Creates a new `DeviceId` wrapper from a raw pointer.",47,{"i":[{"n":"cl_device_id"}],"o":{"n":"deviceid"}}],[11,"null","","Returns an invalid `DeviceId` used for initializing data structures meant to be filled with valid ones.",47,{"o":{"n":"deviceid"}}],[11,"as_raw","","Returns a pointer.",47,{"i":[{"n":"self"}],"o":{"n":"cl_device_id"}}],[11,"version","","Returns the queried and parsed OpenCL version for this device.",47,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"as_ptr","","",47,{"i":[{"n":"self"}],"o":{"n":"cl_device_id"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"device_versions","","",47,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[11,"platform_version","","",47,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_raw_create_ptr","","Only call this when passing the original newly created pointer directly from `clCreate...`. Do not use this to clone or copy.",48,{"i":[{"n":"cl_context"}],"o":{"n":"context"}}],[11,"from_raw_copied_ptr","","Only call this when passing a copied pointer such as from an `clGet*****Info` function.",48,{"i":[{"n":"cl_context"}],"o":{"n":"context"}}],[11,"as_ptr","","Returns a pointer, do not store it.",48,{"i":[{"n":"self"}],"o":{"n":"cl_context"}}],[11,"devices","","Returns the devices associated with this context.",48,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[11,"platform","","Returns the platform associated with this context, if any.",48,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"oclcoreresult"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"drop","","Panics in the event of an error of type `Error::Status` except when the status code is `CL_INVALID_CONTEXT` (which is ignored).",48,{"i":[{"n":"self"}]}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"bool"}}],[11,"device_versions","","",48,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[11,"platform_version","","",48,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_raw_create_ptr","","Only call this when passing the original newly created pointer directly from `clCreate...`. Do not use this to clone or copy.",49,{"i":[{"n":"cl_command_queue"}],"o":{"n":"commandqueue"}}],[11,"from_raw_copied_ptr","","Only call this when passing a copied pointer such as from an `clGet*****Info` function.",49,{"i":[{"n":"cl_command_queue"}],"o":{"n":"commandqueue"}}],[11,"as_ptr","","Returns a pointer, do not store it.",49,{"i":[{"n":"self"}],"o":{"n":"cl_command_queue"}}],[11,"device","","Returns the `DeviceId` associated with this command queue.",49,{"i":[{"n":"self"}],"o":{"g":["deviceid"],"n":"oclcoreresult"}}],[11,"context","","Returns the `Context` associated with this command queue.",49,{"i":[{"n":"self"}],"o":{"g":["context"],"n":"oclcoreresult"}}],[11,"context_ptr","","Returns the `cl_context` associated with this command queue.",49,{"i":[{"n":"self"}],"o":{"g":["cl_context"],"n":"oclcoreresult"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"commandqueue"}}],[11,"drop","","",49,{"i":[{"n":"self"}]}],[11,"as_ref","","",49,{"i":[{"n":"self"}],"o":{"n":"commandqueue"}}],[11,"device_versions","","",49,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[11,"platform_version","","",49,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_raw_create_ptr","","Only call this when passing the original newly created pointer directly from `clCreate...`. Do not use this to clone or copy.",50,{"i":[{"n":"cl_mem"}],"o":{"n":"mem"}}],[11,"from_raw_copied_ptr","","Only call this when passing a copied pointer such as from an `clGet*****Info` function.",50,{"i":[{"n":"cl_mem"}],"o":{"n":"mem"}}],[11,"as_ptr","","Returns a pointer, do not store it.",50,{"i":[{"n":"self"}],"o":{"n":"cl_mem"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"mem"}}],[11,"drop","","",50,{"i":[{"n":"self"}]}],[11,"as_mem","","",50,{"i":[{"n":"self"}],"o":{"n":"mem"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_raw","","Only call this when passing the original newly created pointer directly from `clCreate...`. Do not use this to clone or copy.",51,null],[11,"as_ptr","","",51,null],[11,"as_mut_ptr","","",51,null],[11,"as_void_ptr","","",51,null],[11,"as_slice","","",51,null],[11,"as_slice_mut","","",51,null],[11,"as_mem","","",51,{"i":[{"n":"self"}],"o":{"n":"mem"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_raw_create_ptr","","Only call this when passing the original newly created pointer directly from `clCreate...`. Do not use this to clone or copy.",52,{"i":[{"n":"cl_program"}],"o":{"n":"program"}}],[11,"from_raw_copied_ptr","","Only call this when passing a copied pointer such as from an `clGet*****Info` function.",52,{"i":[{"n":"cl_program"}],"o":{"n":"program"}}],[11,"as_ptr","","Returns a pointer, do not store it.",52,{"i":[{"n":"self"}],"o":{"n":"cl_program"}}],[11,"devices","","Returns the devices associated with this program.",52,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"program"}}],[11,"drop","","",52,{"i":[{"n":"self"}]}],[11,"device_versions","","",52,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[11,"platform_version","","",52,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_raw_create_ptr","","Only call this when passing the original newly created pointer directly from `clCreate...`. Do not use this to clone or copy.",53,{"i":[{"n":"cl_kernel"}],"o":{"n":"kernel"}}],[11,"from_raw_copied_ptr","","Only call this when passing a copied pointer such as from an `clGet*****Info` function.",53,{"i":[{"n":"cl_kernel"}],"o":{"n":"kernel"}}],[11,"as_ptr","","Returns a pointer, do not store it.",53,{"i":[{"n":"self"}],"o":{"n":"cl_kernel"}}],[11,"program","","Returns the program associated with this kernel.",53,{"i":[{"n":"self"}],"o":{"g":["program"],"n":"oclcoreresult"}}],[11,"devices","","",53,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"kernel"}}],[11,"drop","","",53,{"i":[{"n":"self"}]}],[11,"device_versions","","",53,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"oclcoreresult"}}],[11,"platform_version","","",53,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",54,null],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"null","","For passage directly to an 'event creation' function (such as enqueue...).",54,{"o":{"n":"event"}}],[11,"user","","Creates and returns a new 'user' event.",54,{"i":[{"n":"c"}],"o":{"g":["event"],"n":"oclcoreresult"}}],[11,"from_raw_create_ptr","","Only call this when passing the original newly created pointer directly from `clCreate...`. Do not use this to clone or copy.",54,{"i":[{"n":"cl_event"}],"o":{"n":"event"}}],[11,"from_raw_copied_ptr","","Only use when cloning or copying from a pre-existing and valid `cl_event`.",54,{"i":[{"n":"cl_event"}],"o":{"g":["event"],"n":"oclcoreresult"}}],[11,"set_complete","","Sets this user created event to `CommandExecutionStatus::Complete`.",54,{"i":[{"n":"self"}],"o":{"n":"oclcoreresult"}}],[11,"is_complete","","Queries the command status associated with this event and returns true if it is complete, false if incomplete or upon error.",54,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"oclcoreresult"}}],[11,"wait_for","","Causes the command queue to wait until this event is complete before returning.",54,{"i":[{"n":"self"}],"o":{"n":"oclcoreresult"}}],[11,"is_null","","Returns whether or not this event is associated with a command or is a user event.",54,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_valid","","[FIXME]: ADD VALIDITY CHECK BY CALLING '_INFO' OR SOMETHING: NULL CHECK IS NOT ENOUGH",54,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_callback","","Sets a callback function, `callback_receiver`, to trigger upon completion of this event with an optional pointer to user data.",54,null],[11,"context","","Returns the `Context` associated with this event.",54,{"i":[{"n":"self"}],"o":{"g":["context"],"n":"oclcoreresult"}}],[11,"as_ptr_ref","","Returns an immutable reference to a pointer, do not deref and store it unless you will manage its associated reference count carefully.",54,{"i":[{"n":"self"}],"o":{"n":"cl_event"}}],[11,"as_ptr_mut","","Returns a mutable reference to a pointer, do not deref then modify or store it unless you will manage its associated reference count carefully.",54,{"i":[{"n":"self"}],"o":{"n":"cl_event"}}],[11,"into_raw","","Consumes the `Event`, returning the wrapped `cl_event` pointer.",54,{"i":[{"n":"self"}],"o":{"n":"cl_event"}}],[11,"from_raw","","Constructs an `Event` from a raw `cl_event` pointer.",54,{"i":[{"n":"cl_event"}],"o":{"n":"event"}}],[11,"as_ptr_ptr","","",54,null],[11,"count","","",54,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"as_ptr_ref","","",54,{"i":[{"n":"self"}],"o":{"n":"cl_event"}}],[11,"as_ref","","",54,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"drop","","",54,{"i":[{"n":"self"}]}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_raw_create_ptr","","Only call this when passing a newly created pointer directly from `clCreate...`. Do not use this to clone or copy.",55,{"i":[{"n":"cl_sampler"}],"o":{"n":"sampler"}}],[11,"as_ptr","","Returns a pointer, do not store it.",55,{"i":[{"n":"self"}],"o":{"n":"cl_sampler"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"drop","","",55,{"i":[{"n":"self"}]}],[0,"enums","ocl_core::types","Custom enumerators not specifically based on OpenCL C-style enums.",null,null],[4,"EmptyInfoResultError","ocl_core::types::enums","",null,null],[13,"Platform","","",56,null],[13,"Device","","",56,null],[13,"Context","","",56,null],[13,"GlContext","","",56,null],[13,"CommandQueue","","",56,null],[13,"Mem","","",56,null],[13,"Image","","",56,null],[13,"Sampler","","",56,null],[13,"Program","","",56,null],[13,"ProgramBuild","","",56,null],[13,"Kernel","","",56,null],[13,"KernelArg","","",56,null],[13,"KernelWorkGroup","","",56,null],[13,"Event","","",56,null],[13,"Profiling","","",56,null],[4,"PlatformInfoResult","","Platform info result.",null,null],[13,"Profile","","",57,null],[13,"Version","","",57,null],[13,"Name","","",57,null],[13,"Vendor","","",57,null],[13,"Extensions","","",57,null],[4,"DeviceInfoResult","","A device info result.",null,null],[13,"Type","","",58,null],[13,"VendorId","","",58,null],[13,"MaxComputeUnits","","",58,null],[13,"MaxWorkItemDimensions","","",58,null],[13,"MaxWorkGroupSize","","",58,null],[13,"MaxWorkItemSizes","","",58,null],[13,"PreferredVectorWidthChar","","",58,null],[13,"PreferredVectorWidthShort","","",58,null],[13,"PreferredVectorWidthInt","","",58,null],[13,"PreferredVectorWidthLong","","",58,null],[13,"PreferredVectorWidthFloat","","",58,null],[13,"PreferredVectorWidthDouble","","",58,null],[13,"MaxClockFrequency","","",58,null],[13,"AddressBits","","",58,null],[13,"MaxReadImageArgs","","",58,null],[13,"MaxWriteImageArgs","","",58,null],[13,"MaxMemAllocSize","","",58,null],[13,"Image2dMaxWidth","","",58,null],[13,"Image2dMaxHeight","","",58,null],[13,"Image3dMaxWidth","","",58,null],[13,"Image3dMaxHeight","","",58,null],[13,"Image3dMaxDepth","","",58,null],[13,"ImageSupport","","",58,null],[13,"MaxParameterSize","","",58,null],[13,"MaxSamplers","","",58,null],[13,"MemBaseAddrAlign","","",58,null],[13,"MinDataTypeAlignSize","","",58,null],[13,"SingleFpConfig","","",58,null],[13,"GlobalMemCacheType","","",58,null],[13,"GlobalMemCachelineSize","","",58,null],[13,"GlobalMemCacheSize","","",58,null],[13,"GlobalMemSize","","",58,null],[13,"MaxConstantBufferSize","","",58,null],[13,"MaxConstantArgs","","",58,null],[13,"LocalMemType","","",58,null],[13,"LocalMemSize","","",58,null],[13,"ErrorCorrectionSupport","","",58,null],[13,"ProfilingTimerResolution","","",58,null],[13,"EndianLittle","","",58,null],[13,"Available","","",58,null],[13,"CompilerAvailable","","",58,null],[13,"ExecutionCapabilities","","",58,null],[13,"QueueProperties","","",58,null],[13,"Name","","",58,null],[13,"Vendor","","",58,null],[13,"DriverVersion","","",58,null],[13,"Profile","","",58,null],[13,"Version","","",58,null],[13,"Extensions","","",58,null],[13,"Platform","","",58,null],[13,"DoubleFpConfig","","",58,null],[13,"HalfFpConfig","","",58,null],[13,"PreferredVectorWidthHalf","","",58,null],[13,"HostUnifiedMemory","","",58,null],[13,"NativeVectorWidthChar","","",58,null],[13,"NativeVectorWidthShort","","",58,null],[13,"NativeVectorWidthInt","","",58,null],[13,"NativeVectorWidthLong","","",58,null],[13,"NativeVectorWidthFloat","","",58,null],[13,"NativeVectorWidthDouble","","",58,null],[13,"NativeVectorWidthHalf","","",58,null],[13,"OpenclCVersion","","",58,null],[13,"LinkerAvailable","","",58,null],[13,"BuiltInKernels","","",58,null],[13,"ImageMaxBufferSize","","",58,null],[13,"ImageMaxArraySize","","",58,null],[13,"ParentDevice","","",58,null],[13,"PartitionMaxSubDevices","","",58,null],[13,"PartitionProperties","","",58,null],[13,"PartitionAffinityDomain","","",58,null],[13,"PartitionType","","",58,null],[13,"ReferenceCount","","",58,null],[13,"PreferredInteropUserSync","","",58,null],[13,"PrintfBufferSize","","",58,null],[13,"ImagePitchAlignment","","",58,null],[13,"ImageBaseAddressAlignment","","",58,null],[4,"ContextInfoResult","","A context info result.",null,null],[13,"ReferenceCount","","",59,null],[13,"Devices","","",59,null],[13,"Properties","","",59,null],[13,"NumDevices","","",59,null],[4,"GlContextInfoResult","","An OpenGL context info result.",null,null],[13,"CurrentDevice","","",60,null],[13,"Devices","","",60,null],[4,"CommandQueueInfoResult","","A command queue info result.",null,null],[13,"Context","","",61,null],[13,"Device","","",61,null],[13,"ReferenceCount","","",61,null],[13,"Properties","","",61,null],[4,"MemInfoResult","","A mem info result.",null,null],[13,"Type","","",62,null],[13,"Flags","","",62,null],[13,"Size","","",62,null],[13,"HostPtr","","",62,null],[13,"MapCount","","",62,null],[13,"ReferenceCount","","",62,null],[13,"Context","","",62,null],[13,"AssociatedMemobject","","",62,null],[13,"Offset","","",62,null],[4,"ImageInfoResult","","An image info result.",null,null],[13,"Format","","",63,null],[13,"ElementSize","","",63,null],[13,"RowPitch","","",63,null],[13,"SlicePitch","","",63,null],[13,"Width","","",63,null],[13,"Height","","",63,null],[13,"Depth","","",63,null],[13,"ArraySize","","",63,null],[13,"Buffer","","",63,null],[13,"NumMipLevels","","",63,null],[13,"NumSamples","","",63,null],[4,"SamplerInfoResult","","A sampler info result.",null,null],[13,"ReferenceCount","","",64,null],[13,"Context","","",64,null],[13,"NormalizedCoords","","",64,null],[13,"AddressingMode","","",64,null],[13,"FilterMode","","",64,null],[4,"ProgramInfoResult","","A program info result.",null,null],[13,"ReferenceCount","","",65,null],[13,"Context","","",65,null],[13,"NumDevices","","",65,null],[13,"Devices","","Contains a `Vec` containing the `DeviceId` associated with each device.",65,null],[13,"Source","","",65,null],[13,"BinarySizes","","Contains a `Vec` containing the size of the binary associated with each device.",65,null],[13,"Binaries","","Contains a `Vec` containing the bytes of the binary associated with each device.",65,null],[13,"NumKernels","","",65,null],[13,"KernelNames","","",65,null],[4,"ProgramBuildInfoResult","","A program build info result.",null,null],[13,"BuildStatus","","",66,null],[13,"BuildOptions","","",66,null],[13,"BuildLog","","",66,null],[13,"BinaryType","","",66,null],[4,"KernelInfoResult","","A kernel info result.",null,null],[13,"FunctionName","","",67,null],[13,"NumArgs","","",67,null],[13,"ReferenceCount","","",67,null],[13,"Context","","",67,null],[13,"Program","","",67,null],[13,"Attributes","","",67,null],[4,"KernelArgInfoResult","","A kernel arg info result.",null,null],[13,"AddressQualifier","","",68,null],[13,"AccessQualifier","","",68,null],[13,"TypeName","","",68,null],[13,"TypeQualifier","","",68,null],[13,"Name","","",68,null],[4,"KernelWorkGroupInfoResult","","A kernel work group info result.",null,null],[13,"WorkGroupSize","","",69,null],[13,"CompileWorkGroupSize","","",69,null],[13,"LocalMemSize","","",69,null],[13,"PreferredWorkGroupSizeMultiple","","",69,null],[13,"PrivateMemSize","","",69,null],[13,"GlobalWorkSize","","",69,null],[13,"Empty","","",69,null],[13,"Unavailable","","",69,null],[13,"CustomBuiltinOnly","","",69,null],[4,"EventInfoResult","","An event info result.",null,null],[13,"CommandQueue","","",70,null],[13,"CommandType","","",70,null],[13,"ReferenceCount","","",70,null],[13,"CommandExecutionStatus","","",70,null],[13,"Context","","",70,null],[4,"ProfilingInfoResult","","A profiling info result.",null,null],[13,"Queued","","",71,null],[13,"Submit","","",71,null],[13,"Start","","",71,null],[13,"End","","",71,null],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",57,{"i":[{"n":"platforminfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["platforminforesult"],"n":"oclcoreresult"}}],[11,"as_opencl_version","","Parse the `Version` string and get a numeric result as `OpenclVersion`.",57,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes_max_work_item_sizes","","Returns a new `DeviceInfoResult::MaxWorkItemSizes` variant.",58,{"i":[{"n":"deviceinfo"},{"g":["u8"],"n":"vec"},{"n":"u32"}],"o":{"g":["deviceinforesult"],"n":"oclcoreresult"}}],[11,"from_bytes","","Returns a new `DeviceInfoResult` for all variants except `MaxWorkItemSizes`.",58,{"i":[{"n":"deviceinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["deviceinforesult"],"n":"oclcoreresult"}}],[11,"as_opencl_version","","Parse the `Version` string and get a numeric result as `OpenclVersion`.",58,{"i":[{"n":"self"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",59,{"i":[{"n":"contextinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["contextinforesult"],"n":"oclcoreresult"}}],[11,"platform","","",59,{"i":[{"n":"self"}],"o":{"g":["platformid"],"n":"option"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",60,{"i":[{"n":"glcontextinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["glcontextinforesult"],"n":"oclcoreresult"}}],[11,"device","","Returns the device contained within.",60,{"i":[{"n":"self"}],"o":{"g":["deviceid"],"n":"oclcoreresult"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",61,{"i":[{"n":"commandqueueinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["commandqueueinforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",62,{"i":[{"n":"meminfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["meminforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",63,{"i":[{"n":"imageinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["imageinforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",64,{"i":[{"n":"samplerinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["samplerinforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",65,{"i":[{"n":"programinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["programinforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",66,{"i":[{"n":"programbuildinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["programbuildinforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",67,{"i":[{"n":"kernelinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["kernelinforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",68,{"i":[{"n":"kernelarginfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["kernelarginforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",69,{"i":[{"n":"kernelworkgroupinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["kernelworkgroupinforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",70,{"i":[{"n":"eventinfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["eventinforesult"],"n":"oclcoreresult"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","",71,{"i":[{"n":"profilinginfo"},{"g":["u8"],"n":"vec"}],"o":{"g":["profilinginforesult"],"n":"oclcoreresult"}}],[11,"time","","",71,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"oclcoreresult"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"structs","ocl_core::types","Rust implementations of various structs used by the OpenCL API.",null,null],[3,"ArgVal","ocl_core::types::structs","A reference to a kernel argument value.",null,null],[3,"OpenclVersion","","Parsed OpenCL version in the layout `({major}, {minor})`.",null,null],[3,"ContextProperties","","Context properties list.",null,null],[3,"BufferRegion","","Defines a buffer region for creating a sub-buffer.",null,null],[3,"ImageFormat","","Image format properties used by `Image`.",null,null],[12,"channel_order","","",72,null],[12,"channel_data_type","","",72,null],[3,"ImageDescriptor","","An image descriptor use in the creation of `Image`.",null,null],[12,"image_type","","",73,null],[12,"image_width","","",73,null],[12,"image_height","","",73,null],[12,"image_depth","","",73,null],[12,"image_array_size","","",73,null],[12,"image_row_pitch","","",73,null],[12,"image_slice_pitch","","",73,null],[12,"buffer","","",73,null],[4,"ContextPropertyValue","","",null,null],[13,"Platform","","",74,null],[13,"InteropUserSync","","",74,null],[13,"D3d10DeviceKhr","","",74,null],[13,"GlContextKhr","","",74,null],[13,"EglDisplayKhr","","",74,null],[13,"GlxDisplayKhr","","",74,null],[13,"CglSharegroupKhr","","",74,null],[13,"WglHdcKhr","","",74,null],[13,"AdapterD3d9Khr","","",74,null],[13,"AdapterD3d9exKhr","","",74,null],[13,"AdapterDxvaKhr","","",74,null],[13,"D3d11DeviceKhr","","",74,null],[4,"ImageFormatParseError","","",null,null],[13,"UnknownImageChannelOrder","","",75,null],[13,"UnknownImageChannelDataType","","",75,null],[6,"TemporaryPlaceholderType","","",null,null],[6,"ImageFormatParseResult","","",null,null],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"argval"}}],[11,"mem","","Returns a new `ArgVal` referring to a `Mem` object.",76,{"i":[{"n":"mem"}],"o":{"n":"argval"}}],[11,"mem_null","","Returns a new `ArgVal` corresponding to a null `Mem` object.",76,{"o":{"n":"argval"}}],[11,"sampler","","Returns a new `ArgVal` referring to a `Sampler` object.",76,{"i":[{"n":"sampler"}],"o":{"n":"argval"}}],[11,"sampler_null","","Returns a new `ArgVal` referring to a null `Sampler` object.",76,{"o":{"n":"argval"}}],[11,"primitive","","Returns a new `ArgVal` referring to a scalar or vector primitive.",76,{"i":[{"n":"t"}],"o":{"n":"argval"}}],[11,"scalar","","Returns a new `ArgVal` referring to a scalar primitive.",76,{"i":[{"n":"t"}],"o":{"n":"argval"}}],[11,"vector","","Returns a new `ArgVal` referring to a vector primitive.",76,{"i":[{"n":"t"}],"o":{"n":"argval"}}],[11,"local","","Returns a new `ArgVal` corresponding to a `__local` argument.",76,{"i":[{"n":"usize"}],"o":{"n":"argval"}}],[11,"from_raw","","Returns a new `ArgVal` containing the size in bytes and a raw pointer to the argument value.",76,null],[11,"as_raw","","Returns the size (in bytes) and raw pointer to the contained kernel argument value.",76,null],[11,"is_null","","Returns `true` if this `ArgVal` represents a null `Mem` or `Sampler` object.",76,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"openclversion"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"openclversion"}],"o":{"n":"bool"}}],[11,"ne","","",77,{"i":[{"n":"self"},{"n":"openclversion"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",77,{"i":[{"n":"self"},{"n":"openclversion"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",77,{"i":[{"n":"self"},{"n":"openclversion"}],"o":{"n":"bool"}}],[11,"le","","",77,{"i":[{"n":"self"},{"n":"openclversion"}],"o":{"n":"bool"}}],[11,"gt","","",77,{"i":[{"n":"self"},{"n":"openclversion"}],"o":{"n":"bool"}}],[11,"ge","","",77,{"i":[{"n":"self"},{"n":"openclversion"}],"o":{"n":"bool"}}],[11,"cmp","","",77,{"i":[{"n":"self"},{"n":"openclversion"}],"o":{"n":"ordering"}}],[11,"new","","",77,{"i":[{"n":"u16"},{"n":"u16"}],"o":{"n":"openclversion"}}],[11,"max","","",77,{"i":[{"n":"self"}],"o":{"n":"openclversion"}}],[11,"from_info_str","","Parse the string `ver` and return a dual-integer result as `OpenclVersion`.",77,{"i":[{"n":"str"}],"o":{"g":["openclversion"],"n":"oclcoreresult"}}],[11,"from","","",77,null],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"contextpropertyvalue"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"contextproperties"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns an empty new list of context properties",78,{"o":{"n":"contextproperties"}}],[11,"platform","","Specifies a platform (builder-style).",78,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"contextproperties"}}],[11,"interop_user_sync","","Specifies whether the user is responsible for synchronization between OpenCL and other APIs (builder-style).",78,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"contextproperties"}}],[11,"gl_context","","Specifies an OpenGL context handle (builder-style).",78,null],[11,"glx_display","","Specifies a Display pointer for the GLX context (builder-style).",78,null],[11,"wgl_hdc","","Specifies a Display pointer for the WGL HDC (builder-style).",78,null],[11,"cgl_sharegroup","","Specifies an OpenGL context CGL share group to associate the OpenCL context with (builder-style).",78,null],[11,"egl_display","","Specifies a pointer for the EGL display (builder-style).",78,null],[11,"property_value","","Pushes a `ContextPropertyValue` onto this list of properties (builder-style).",78,{"i":[{"n":"self"},{"n":"contextpropertyvalue"}],"o":{"n":"contextproperties"}}],[11,"set_platform","","Specifies a platform.",78,{"i":[{"n":"self"},{"n":"p"}]}],[11,"set_interop_user_sync","","Specifies whether the user is responsible for synchronization between OpenCL and other APIs.",78,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"set_gl_context","","Specifies an OpenGL context handle.",78,null],[11,"set_glx_display","","Specifies a Display pointer for the GLX context.",78,null],[11,"set_wgl_hdc","","Specifies a Display pointer for the WGL HDC.",78,null],[11,"set_cgl_sharegroup","","Specifies an OpenGL context CGL share group to associate the OpenCL context with.",78,null],[11,"set_egl_display","","Specifies a pointer for the EGL display.",78,null],[11,"set_property_value","","Pushes a `ContextPropertyValue` onto this list of properties.",78,{"i":[{"n":"self"},{"n":"contextpropertyvalue"}]}],[11,"get_platform","","Returns a platform id or none.",78,{"i":[{"n":"self"}],"o":{"g":["platformid"],"n":"option"}}],[11,"contains_gl_context_or_sharegroup","","Returns true if this set of context properties specifies any OpenGL context or sharegroup to associate with.",78,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_raw","","Converts this list into a packed-word representation as specified here.",78,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"vec"}}],[11,"extract_property_from_raw","","Returns a single context property value.",78,null],[11,"from_raw","","Converts raw stuff into other stuff.",78,null],[11,"new","","",79,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"bufferregion"}}],[11,"to_bytes","","",79,{"i":[{"n":"self"}],"o":{"n":"cl_buffer_region"}}],[11,"from_bytes","","",79,{"i":[{"n":"cl_buffer_region"}],"o":{"n":"bufferregion"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",75,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"imageformat"}}],[11,"new","","",72,{"i":[{"n":"imagechannelorder"},{"n":"imagechanneldatatype"}],"o":{"n":"imageformat"}}],[11,"new_rgba","","",72,{"o":{"n":"imageformat"}}],[11,"from_raw","","",72,{"i":[{"n":"cl_image_format"}],"o":{"n":"imageformatparseresult"}}],[11,"list_from_raw","","",72,{"i":[{"g":["cl_image_format"],"n":"vec"}],"o":{"g":["imageformatparseresult"],"n":"vec"}}],[11,"to_raw","","",72,{"i":[{"n":"self"}],"o":{"n":"cl_image_format"}}],[11,"new_raw","","",72,{"o":{"n":"cl_image_format"}}],[11,"pixel_bytes","","Returns the size in bytes of a pixel using the format specified by this `ImageFormat`.",72,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"imagedescriptor"}}],[11,"new","","",73,{"i":[{"n":"memobjecttype"},{"n":"usize"},{"n":"usize"},{"n":"usize"},{"n":"usize"},{"n":"usize"},{"n":"usize"},{"g":["mem"],"n":"option"}],"o":{"n":"imagedescriptor"}}],[11,"to_raw","","",73,{"i":[{"n":"self"}],"o":{"n":"cl_image_desc"}}],[0,"error","ocl_core","Standard error type for ocl.",null,null],[3,"Error","ocl_core::error","An Error.",null,null],[4,"ErrorKind","","An enum one of several error types.",null,null],[13,"String","","",80,null],[13,"FfiNul","","",80,null],[13,"Io","","",80,null],[13,"FromUtf8","","",80,null],[13,"IntoString","","",80,null],[13,"EmptyInfoResult","","",80,null],[13,"Util","","",80,null],[13,"Api","","",80,null],[13,"VersionLow","","",80,null],[13,"ProgramBuild","","",80,null],[13,"ApiWrapper","","",80,null],[6,"Result","","Ocl error result type.",null,null],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"api_status","","Returns the error status code for `Status` variants.",81,{"i":[{"n":"self"}],"o":{"g":["status"],"n":"option"}}],[11,"kind","","Returns the error variant and contents.",81,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"cause","","Returns the immediate cause of this error (e.g. the next error in the chain).",81,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cause","","",81,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","",81,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"from","","",81,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"from","","",81,{"i":[{"g":["errorkind"],"n":"context"}],"o":{"n":"error"}}],[11,"from","","",81,{"i":[{"n":"emptyinforesulterror"}],"o":{"n":"self"}}],[11,"from","","",81,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",81,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",81,{"i":[{"n":"nulerror"}],"o":{"n":"self"}}],[11,"from","","",81,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",81,{"i":[{"n":"fromutf8error"}],"o":{"n":"self"}}],[11,"from","","",81,{"i":[{"n":"intostringerror"}],"o":{"n":"self"}}],[11,"from","","",81,{"i":[{"n":"utilerror"}],"o":{"n":"self"}}],[0,"util","ocl_core","Utility and debugging functions.",null,null],[4,"UtilError","ocl_core::util","An error caused by a utility function.",null,null],[13,"BytesTo","","",82,null],[12,"src","ocl_core::util::UtilError","",82,null],[12,"dst","","",82,null],[13,"BytesInto","ocl_core::util","",82,null],[12,"src","ocl_core::util::UtilError","",82,null],[12,"dst","","",82,null],[13,"BytesIntoVec","ocl_core::util","",82,null],[12,"src","ocl_core::util::UtilError","",82,null],[12,"dst","","",82,null],[13,"BytesToVec","ocl_core::util","",82,null],[12,"src","ocl_core::util::UtilError","",82,null],[12,"dst","","",82,null],[13,"BytesIntoString","ocl_core::util","",82,null],[4,"VecRemoveRebuildError","","An error caused by `util::vec_remove_rebuild`.",null,null],[13,"TooLong","","",83,null],[13,"OutOfRange","","",83,null],[12,"idx","ocl_core::util::VecRemoveRebuildError","",83,null],[12,"orig_len","","",83,null],[5,"bytes_to_u32","ocl_core::util","Copies a byte slice to a new `u32`.",null,null],[5,"bytes_to","","Copies a slice of bytes to a new value of arbitrary type.",null,null],[5,"bytes_into","","Converts a vector of bytes into a value of arbitrary type.",null,{"i":[{"g":["u8"],"n":"vec"}],"o":{"g":["utilerror"],"n":"result"}}],[5,"bytes_into_vec","","Converts a vector of bytes into a vector of arbitrary type.",null,{"i":[{"g":["u8"],"n":"vec"}],"o":{"g":["vec","utilerror"],"n":"result"}}],[5,"bytes_to_vec","","Copies a slice of bytes into a vector of arbitrary type.",null,null],[5,"bytes_into_string","","Converts a byte Vec into a string, removing the trailing null byte if it exists.",null,{"i":[{"g":["u8"],"n":"vec"}],"o":{"g":["string","utilerror"],"n":"result"}}],[5,"into_bytes","","[UNTESTED] Copies an arbitrary primitive or struct into core bytes.",null,{"i":[{"n":"t"}],"o":{"g":["u8"],"n":"vec"}}],[5,"padded_len","","Pads `len` to make it evenly divisible by `incr`.",null,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"usize"}}],[5,"vec_remove_rebuild","","Batch removes elements from a vector using a list of indices to remove.",null,null],[5,"wrap_vals","","Wraps (`%`) each value in the list `vals` if it equals or exceeds `val_n`.",null,null],[5,"print_bytes_as_hex","","Prints bytes as hex.",null,null],[5,"print_slice","","[UNSTABLE]: MAY BE REMOVED AT ANY TIME Prints a vector to stdout. Used for debugging.",null,null],[5,"print_simple","","",null,null],[5,"print_val_range","","",null,null],[0,"colors","","ASCII Color Palette",null,null],[7,"TAB","ocl_core::util::colors","",null,null],[7,"C_DEFAULT","","",null,null],[7,"C_UNDER","","",null,null],[7,"C_RED","","",null,null],[7,"C_BRED","","",null,null],[7,"C_GRN","","",null,null],[7,"C_BGRN","","",null,null],[7,"C_ORA","","",null,null],[7,"C_DBL","","",null,null],[7,"C_PUR","","",null,null],[7,"C_CYA","","",null,null],[7,"C_LGR","","",null,null],[7,"C_DFLT","","",null,null],[7,"C_DGR","","",null,null],[7,"C_LRD","","",null,null],[7,"C_YEL","","",null,null],[7,"C_BLU","","",null,null],[7,"C_LBL","","",null,null],[7,"C_MAG","","",null,null],[7,"BGC_DEFAULT","","",null,null],[7,"BGC_GRN","","",null,null],[7,"BGC_PUR","","",null,null],[7,"BGC_LGR","","",null,null],[7,"BGC_DGR","","",null,null],[11,"fmt","ocl_core::util","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"EventCallbackFn","ocl_core","",null,null],[6,"CreateContextCallbackFn","","",null,null],[6,"BuildProgramCallbackFn","","",null,null],[6,"UserDataPtr","","",null,null],[17,"DEVICES_MAX","","",null,null],[17,"DEVICE_TYPE_DEFAULT","","",null,null],[17,"DEVICE_TYPE_CPU","","",null,null],[17,"DEVICE_TYPE_GPU","","",null,null],[17,"DEVICE_TYPE_ACCELERATOR","","",null,null],[17,"DEVICE_TYPE_CUSTOM","","",null,null],[17,"DEVICE_TYPE_ALL","","",null,null],[17,"FP_DENORM","","",null,null],[17,"FP_INF_NAN","","",null,null],[17,"FP_ROUND_TO_NEAREST","","",null,null],[17,"FP_ROUND_TO_ZERO","","",null,null],[17,"FP_ROUND_TO_INF","","",null,null],[17,"FP_FMA","","",null,null],[17,"FP_SOFT_FLOAT","","",null,null],[17,"FP_CORRECTLY_ROUNDED_DIVIDE_SQRT","","",null,null],[17,"EXEC_KERNEL","","",null,null],[17,"EXEC_NATIVE_KERNEL","","",null,null],[17,"QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE","","",null,null],[17,"QUEUE_PROFILING_ENABLE","","",null,null],[17,"QUEUE_ON_DEVICE","","",null,null],[17,"QUEUE_ON_DEVICE_DEFAULT","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_NUMA","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L4_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L3_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L2_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_L1_CACHE","","",null,null],[17,"DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE","","",null,null],[17,"MEM_READ_WRITE","","",null,null],[17,"MEM_WRITE_ONLY","","",null,null],[17,"MEM_READ_ONLY","","",null,null],[17,"MEM_USE_HOST_PTR","","",null,null],[17,"MEM_ALLOC_HOST_PTR","","",null,null],[17,"MEM_COPY_HOST_PTR","","",null,null],[17,"MEM_HOST_WRITE_ONLY","","",null,null],[17,"MEM_HOST_READ_ONLY","","",null,null],[17,"MEM_HOST_NO_ACCESS","","",null,null],[17,"MIGRATE_MEM_OBJECT_HOST","","",null,null],[17,"MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED","","",null,null],[17,"MAP_READ","","",null,null],[17,"MAP_WRITE","","",null,null],[17,"MAP_WRITE_INVALIDATE_REGION","","",null,null],[17,"PROGRAM_BINARY_TYPE_NONE","","",null,null],[17,"PROGRAM_BINARY_TYPE_COMPILED_OBJECT","","",null,null],[17,"PROGRAM_BINARY_TYPE_LIBRARY","","",null,null],[17,"PROGRAM_BINARY_TYPE_EXECUTABLE","","",null,null],[17,"KERNEL_ARG_TYPE_NONE","","",null,null],[17,"KERNEL_ARG_TYPE_CONST","","",null,null],[17,"KERNEL_ARG_TYPE_RESTRICT","","",null,null],[17,"KERNEL_ARG_TYPE_VOLATILE","","",null,null],[17,"CL_CGL_SHAREGROUP_KHR_OS_SPECIFIC","","",null,null],[8,"OclPrm","","A primitive type usable within `OpenCL` kernels.",null,null],[8,"OclNum","","A set of traits common to numeric built-in OpenCL scalar and vector primitives.",null,null],[8,"OclScl","","A scalar type usable within OpenCL kernels.",null,null],[8,"OclVec","","A vector type usable within `OpenCL` kernels.",null,null],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"partial_cmp","","",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"le","","",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"gt","","",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"ge","","",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"cmp","","",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"ordering"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"DEFAULT","","",84,null],[18,"CPU","","",84,null],[18,"GPU","","",84,null],[18,"ACCELERATOR","","",84,null],[18,"CUSTOM","","",84,null],[18,"ALL","","",84,null],[11,"empty","","Returns an empty set of flags.",84,{"o":{"n":"devicetype"}}],[11,"all","","Returns the set containing all flags.",84,{"o":{"n":"devicetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",84,{"i":[{"n":"u64"}],"o":{"g":["devicetype"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",84,{"i":[{"n":"u64"}],"o":{"n":"devicetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",84,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",84,{"i":[{"n":"self"},{"n":"devicetype"}]}],[11,"remove","","Removes the specified flags in-place.",84,{"i":[{"n":"self"},{"n":"devicetype"}]}],[11,"toggle","","Toggles the specified flags in-place.",84,{"i":[{"n":"self"},{"n":"devicetype"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",84,{"i":[{"n":"self"},{"n":"devicetype"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"devicetype"}}],[11,"bitor_assign","","Adds the set of flags.",84,{"i":[{"n":"self"},{"n":"devicetype"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"devicetype"}}],[11,"bitxor_assign","","Toggles the set of flags.",84,{"i":[{"n":"self"},{"n":"devicetype"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"devicetype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",84,{"i":[{"n":"self"},{"n":"devicetype"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",84,{"i":[{"n":"self"},{"n":"devicetype"}],"o":{"n":"devicetype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",84,{"i":[{"n":"self"},{"n":"devicetype"}]}],[11,"not","","Returns the complement of this set of flags.",84,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"extend","","",84,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",84,{"i":[{"n":"t"}],"o":{"n":"devicetype"}}],[11,"new","","",84,{"o":{"n":"devicetype"}}],[11,"system_default","","",84,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"cpu","","",84,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"gpu","","",84,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"accelerator","","",84,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"custom","","",84,{"i":[{"n":"self"}],"o":{"n":"devicetype"}}],[11,"default","","",84,{"o":{"n":"devicetype"}}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"ne","","",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"devicefpconfig"}}],[11,"partial_cmp","","",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"le","","",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"gt","","",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"ge","","",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"cmp","","",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"ordering"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"DENORM","","",85,null],[18,"INF_NAN","","",85,null],[18,"ROUND_TO_NEAREST","","",85,null],[18,"ROUND_TO_ZERO","","",85,null],[18,"ROUND_TO_INF","","",85,null],[18,"FMA","","",85,null],[18,"SOFT_FLOAT","","",85,null],[18,"CORRECTLY_ROUNDED_DIVIDE_SQRT","","",85,null],[11,"empty","","Returns an empty set of flags.",85,{"o":{"n":"devicefpconfig"}}],[11,"all","","Returns the set containing all flags.",85,{"o":{"n":"devicefpconfig"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",85,{"i":[{"n":"u64"}],"o":{"g":["devicefpconfig"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",85,{"i":[{"n":"u64"}],"o":{"n":"devicefpconfig"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",85,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}]}],[11,"remove","","Removes the specified flags in-place.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}]}],[11,"toggle","","Toggles the specified flags in-place.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"devicefpconfig"}}],[11,"bitor_assign","","Adds the set of flags.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"devicefpconfig"}}],[11,"bitxor_assign","","Toggles the set of flags.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"devicefpconfig"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}],"o":{"n":"devicefpconfig"}}],[11,"sub_assign","","Disables all flags enabled in the set.",85,{"i":[{"n":"self"},{"n":"devicefpconfig"}]}],[11,"not","","Returns the complement of this set of flags.",85,{"i":[{"n":"self"}],"o":{"n":"devicefpconfig"}}],[11,"extend","","",85,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",85,{"i":[{"n":"t"}],"o":{"n":"devicefpconfig"}}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"deviceexeccapabilities"}}],[11,"partial_cmp","","",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"le","","",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"gt","","",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"ge","","",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"cmp","","",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"ordering"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"KERNEL","","",86,null],[18,"NATIVE_KERNEL","","",86,null],[11,"empty","","Returns an empty set of flags.",86,{"o":{"n":"deviceexeccapabilities"}}],[11,"all","","Returns the set containing all flags.",86,{"o":{"n":"deviceexeccapabilities"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",86,{"i":[{"n":"u64"}],"o":{"g":["deviceexeccapabilities"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",86,{"i":[{"n":"u64"}],"o":{"n":"deviceexeccapabilities"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",86,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}]}],[11,"remove","","Removes the specified flags in-place.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}]}],[11,"toggle","","Toggles the specified flags in-place.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"deviceexeccapabilities"}}],[11,"bitor_assign","","Adds the set of flags.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"deviceexeccapabilities"}}],[11,"bitxor_assign","","Toggles the set of flags.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"deviceexeccapabilities"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}],"o":{"n":"deviceexeccapabilities"}}],[11,"sub_assign","","Disables all flags enabled in the set.",86,{"i":[{"n":"self"},{"n":"deviceexeccapabilities"}]}],[11,"not","","Returns the complement of this set of flags.",86,{"i":[{"n":"self"}],"o":{"n":"deviceexeccapabilities"}}],[11,"extend","","",86,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",86,{"i":[{"n":"t"}],"o":{"n":"deviceexeccapabilities"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"ne","","",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"commandqueueproperties"}}],[11,"partial_cmp","","",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"le","","",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"gt","","",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"ge","","",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"cmp","","",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"ordering"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"OUT_OF_ORDER_EXEC_MODE_ENABLE","","",87,null],[18,"PROFILING_ENABLE","","",87,null],[18,"ON_DEVICE","","",87,null],[18,"ON_DEVICE_DEFAULT","","",87,null],[11,"empty","","Returns an empty set of flags.",87,{"o":{"n":"commandqueueproperties"}}],[11,"all","","Returns the set containing all flags.",87,{"o":{"n":"commandqueueproperties"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",87,{"i":[{"n":"u64"}],"o":{"g":["commandqueueproperties"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",87,{"i":[{"n":"u64"}],"o":{"n":"commandqueueproperties"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",87,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}]}],[11,"remove","","Removes the specified flags in-place.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}]}],[11,"toggle","","Toggles the specified flags in-place.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"commandqueueproperties"}}],[11,"bitor_assign","","Adds the set of flags.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"commandqueueproperties"}}],[11,"bitxor_assign","","Toggles the set of flags.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"commandqueueproperties"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}],"o":{"n":"commandqueueproperties"}}],[11,"sub_assign","","Disables all flags enabled in the set.",87,{"i":[{"n":"self"},{"n":"commandqueueproperties"}]}],[11,"not","","Returns the complement of this set of flags.",87,{"i":[{"n":"self"}],"o":{"n":"commandqueueproperties"}}],[11,"extend","","",87,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",87,{"i":[{"n":"t"}],"o":{"n":"commandqueueproperties"}}],[11,"new","","",87,{"o":{"n":"commandqueueproperties"}}],[11,"out_of_order","","",87,{"i":[{"n":"self"}],"o":{"n":"commandqueueproperties"}}],[11,"profiling","","",87,{"i":[{"n":"self"}],"o":{"n":"commandqueueproperties"}}],[11,"default","","",87,{"o":{"n":"commandqueueproperties"}}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"ne","","",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"deviceaffinitydomain"}}],[11,"partial_cmp","","",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"le","","",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"gt","","",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"ge","","",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"cmp","","",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"ordering"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"NUMA","","",88,null],[18,"L4_CACHE","","",88,null],[18,"L3_CACHE","","",88,null],[18,"L2_CACHE","","",88,null],[18,"L1_CACHE","","",88,null],[18,"NEXT_PARTITIONABLE","","",88,null],[11,"empty","","Returns an empty set of flags.",88,{"o":{"n":"deviceaffinitydomain"}}],[11,"all","","Returns the set containing all flags.",88,{"o":{"n":"deviceaffinitydomain"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",88,{"i":[{"n":"u64"}],"o":{"g":["deviceaffinitydomain"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",88,{"i":[{"n":"u64"}],"o":{"n":"deviceaffinitydomain"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",88,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}]}],[11,"remove","","Removes the specified flags in-place.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}]}],[11,"toggle","","Toggles the specified flags in-place.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"deviceaffinitydomain"}}],[11,"bitor_assign","","Adds the set of flags.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"deviceaffinitydomain"}}],[11,"bitxor_assign","","Toggles the set of flags.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"deviceaffinitydomain"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}],"o":{"n":"deviceaffinitydomain"}}],[11,"sub_assign","","Disables all flags enabled in the set.",88,{"i":[{"n":"self"},{"n":"deviceaffinitydomain"}]}],[11,"not","","Returns the complement of this set of flags.",88,{"i":[{"n":"self"}],"o":{"n":"deviceaffinitydomain"}}],[11,"extend","","",88,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",88,{"i":[{"n":"t"}],"o":{"n":"deviceaffinitydomain"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"partial_cmp","","",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"le","","",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"gt","","",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"ge","","",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"cmp","","",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"ordering"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"READ_WRITE","","",89,null],[18,"WRITE_ONLY","","",89,null],[18,"READ_ONLY","","",89,null],[18,"USE_HOST_PTR","","",89,null],[18,"ALLOC_HOST_PTR","","",89,null],[18,"COPY_HOST_PTR","","",89,null],[18,"HOST_WRITE_ONLY","","",89,null],[18,"HOST_READ_ONLY","","",89,null],[18,"HOST_NO_ACCESS","","",89,null],[11,"empty","","Returns an empty set of flags.",89,{"o":{"n":"memflags"}}],[11,"all","","Returns the set containing all flags.",89,{"o":{"n":"memflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",89,{"i":[{"n":"u64"}],"o":{"g":["memflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",89,{"i":[{"n":"u64"}],"o":{"n":"memflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",89,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",89,{"i":[{"n":"self"},{"n":"memflags"}]}],[11,"remove","","Removes the specified flags in-place.",89,{"i":[{"n":"self"},{"n":"memflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",89,{"i":[{"n":"self"},{"n":"memflags"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",89,{"i":[{"n":"self"},{"n":"memflags"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"memflags"}}],[11,"bitor_assign","","Adds the set of flags.",89,{"i":[{"n":"self"},{"n":"memflags"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"memflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",89,{"i":[{"n":"self"},{"n":"memflags"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"memflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",89,{"i":[{"n":"self"},{"n":"memflags"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",89,{"i":[{"n":"self"},{"n":"memflags"}],"o":{"n":"memflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",89,{"i":[{"n":"self"},{"n":"memflags"}]}],[11,"not","","Returns the complement of this set of flags.",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"extend","","",89,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",89,{"i":[{"n":"t"}],"o":{"n":"memflags"}}],[11,"new","","",89,{"o":{"n":"memflags"}}],[11,"read_write","","",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"write_only","","",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"read_only","","",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"use_host_ptr","","",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"alloc_host_ptr","","",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"copy_host_ptr","","",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"host_write_only","","",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"host_read_only","","",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"host_no_access","","",89,{"i":[{"n":"self"}],"o":{"n":"memflags"}}],[11,"default","","",89,{"o":{"n":"memflags"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"ne","","",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"memmigrationflags"}}],[11,"partial_cmp","","",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"le","","",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"gt","","",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"ge","","",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"cmp","","",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"ordering"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"OBJECT_HOST","","",90,null],[18,"OBJECT_CONTENT_UNDEFINED","","",90,null],[11,"empty","","Returns an empty set of flags.",90,{"o":{"n":"memmigrationflags"}}],[11,"all","","Returns the set containing all flags.",90,{"o":{"n":"memmigrationflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",90,{"i":[{"n":"u64"}],"o":{"g":["memmigrationflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",90,{"i":[{"n":"u64"}],"o":{"n":"memmigrationflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}]}],[11,"remove","","Removes the specified flags in-place.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"memmigrationflags"}}],[11,"bitor_assign","","Adds the set of flags.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"memmigrationflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"memmigrationflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}],"o":{"n":"memmigrationflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",90,{"i":[{"n":"self"},{"n":"memmigrationflags"}]}],[11,"not","","Returns the complement of this set of flags.",90,{"i":[{"n":"self"}],"o":{"n":"memmigrationflags"}}],[11,"extend","","",90,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",90,{"i":[{"n":"t"}],"o":{"n":"memmigrationflags"}}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"partial_cmp","","",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"le","","",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"gt","","",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"ge","","",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"cmp","","",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"ordering"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"READ","","",91,null],[18,"WRITE","","",91,null],[18,"WRITE_INVALIDATE_REGION","","",91,null],[11,"empty","","Returns an empty set of flags.",91,{"o":{"n":"mapflags"}}],[11,"all","","Returns the set containing all flags.",91,{"o":{"n":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",91,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",91,{"i":[{"n":"u64"}],"o":{"g":["mapflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",91,{"i":[{"n":"u64"}],"o":{"n":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",91,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",91,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"remove","","Removes the specified flags in-place.",91,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",91,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",91,{"i":[{"n":"self"},{"n":"mapflags"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"bitor_assign","","Adds the set of flags.",91,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",91,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",91,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",91,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",91,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"not","","Returns the complement of this set of flags.",91,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"extend","","",91,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",91,{"i":[{"n":"t"}],"o":{"n":"mapflags"}}],[11,"new","","",91,{"o":{"n":"mapflags"}}],[11,"read","","",91,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"write","","",91,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"write_invalidate_region","","",91,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"default","","",91,{"o":{"n":"mapflags"}}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"ne","","",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"programbinarytype"}}],[11,"partial_cmp","","",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"le","","",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"gt","","",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"ge","","",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"cmp","","",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"ordering"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"NONE","","",92,null],[18,"COMPILED_OBJECT","","",92,null],[18,"LIBRARY","","",92,null],[18,"EXECUTABLE","","",92,null],[11,"empty","","Returns an empty set of flags.",92,{"o":{"n":"programbinarytype"}}],[11,"all","","Returns the set containing all flags.",92,{"o":{"n":"programbinarytype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",92,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",92,{"i":[{"n":"u32"}],"o":{"g":["programbinarytype"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",92,{"i":[{"n":"u32"}],"o":{"n":"programbinarytype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",92,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}]}],[11,"remove","","Removes the specified flags in-place.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}]}],[11,"toggle","","Toggles the specified flags in-place.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",92,{"i":[{"n":"self"},{"n":"programbinarytype"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"programbinarytype"}}],[11,"bitor_assign","","Adds the set of flags.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"programbinarytype"}}],[11,"bitxor_assign","","Toggles the set of flags.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"programbinarytype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}],"o":{"n":"programbinarytype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",92,{"i":[{"n":"self"},{"n":"programbinarytype"}]}],[11,"not","","Returns the complement of this set of flags.",92,{"i":[{"n":"self"}],"o":{"n":"programbinarytype"}}],[11,"extend","","",92,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",92,{"i":[{"n":"t"}],"o":{"n":"programbinarytype"}}],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"ne","","",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"kernelargtypequalifier"}}],[11,"partial_cmp","","",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"le","","",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"gt","","",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"ge","","",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"cmp","","",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"ordering"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"NONE","","",93,null],[18,"CONST","","",93,null],[18,"RESTRICT","","",93,null],[18,"VOLATILE","","",93,null],[11,"empty","","Returns an empty set of flags.",93,{"o":{"n":"kernelargtypequalifier"}}],[11,"all","","Returns the set containing all flags.",93,{"o":{"n":"kernelargtypequalifier"}}],[11,"bits","","Returns the raw value of the flags currently stored.",93,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",93,{"i":[{"n":"u64"}],"o":{"g":["kernelargtypequalifier"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",93,{"i":[{"n":"u64"}],"o":{"n":"kernelargtypequalifier"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",93,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",93,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}]}],[11,"remove","","Removes the specified flags in-place.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}]}],[11,"toggle","","Toggles the specified flags in-place.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"kernelargtypequalifier"}}],[11,"bitor_assign","","Adds the set of flags.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"kernelargtypequalifier"}}],[11,"bitxor_assign","","Toggles the set of flags.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"kernelargtypequalifier"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}],"o":{"n":"kernelargtypequalifier"}}],[11,"sub_assign","","Disables all flags enabled in the set.",93,{"i":[{"n":"self"},{"n":"kernelargtypequalifier"}]}],[11,"not","","Returns the complement of this set of flags.",93,{"i":[{"n":"self"}],"o":{"n":"kernelargtypequalifier"}}],[11,"extend","","",93,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",93,{"i":[{"n":"t"}],"o":{"n":"kernelargtypequalifier"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"status"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"status"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"gltexturetarget"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"gltexturetarget"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"from_i64","","",1,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",1,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"clglobjecttype"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"clglobjecttype"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"from_i64","","",2,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",2,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"imagechannelorder"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"imagechannelorder"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"from_i64","","",3,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",3,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"imagechanneldatatype"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"imagechanneldatatype"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"from_i64","","",4,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",4,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"cbool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"cbool"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[11,"from_i64","","",5,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",5,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"polling"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"polling"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"from_i64","","",6,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",6,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"platforminfo"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"platforminfo"}],"o":{"n":"bool"}}],[11,"hash","","",7,null],[11,"from_i64","","",7,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",7,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"deviceinfo"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"deviceinfo"}],"o":{"n":"bool"}}],[11,"hash","","",8,null],[11,"from_i64","","",8,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",8,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"devicememcachetype"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"devicememcachetype"}],"o":{"n":"bool"}}],[11,"hash","","",9,null],[11,"from_i64","","",9,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",9,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"devicelocalmemtype"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"devicelocalmemtype"}],"o":{"n":"bool"}}],[11,"hash","","",10,null],[11,"from_i64","","",10,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",10,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"contextinfo"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"contextinfo"}],"o":{"n":"bool"}}],[11,"hash","","",11,null],[11,"from_i64","","",11,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",11,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"glcontextinfo"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"glcontextinfo"}],"o":{"n":"bool"}}],[11,"hash","","",12,null],[11,"from_i64","","",12,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",12,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"contextproperty"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"contextproperty"}],"o":{"n":"bool"}}],[11,"hash","","",13,null],[11,"from_i64","","",13,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",13,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"contextinfoorpropertiespointertype"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"contextinfoorpropertiespointertype"}],"o":{"n":"bool"}}],[11,"hash","","",14,null],[11,"from_i64","","",14,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",14,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"devicepartitionproperty"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"devicepartitionproperty"}],"o":{"n":"bool"}}],[11,"hash","","",15,null],[11,"from_i64","","",15,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",15,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"commandqueueinfo"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"commandqueueinfo"}],"o":{"n":"bool"}}],[11,"hash","","",16,null],[11,"from_i64","","",16,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",16,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"channeltype"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"n":"bool"}}],[11,"hash","","",17,null],[11,"from_i64","","",17,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",17,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"memobjecttype"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"memobjecttype"}],"o":{"n":"bool"}}],[11,"hash","","",18,null],[11,"from_i64","","",18,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",18,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"meminfo"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"meminfo"}],"o":{"n":"bool"}}],[11,"hash","","",19,null],[11,"from_i64","","",19,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",19,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"imageinfo"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"imageinfo"}],"o":{"n":"bool"}}],[11,"hash","","",20,null],[11,"from_i64","","",20,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",20,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"addressingmode"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"addressingmode"}],"o":{"n":"bool"}}],[11,"hash","","",21,null],[11,"from_i64","","",21,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",21,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"filtermode"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"filtermode"}],"o":{"n":"bool"}}],[11,"hash","","",22,null],[11,"from_i64","","",22,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",22,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"samplerinfo"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"hash","","",23,null],[11,"from_i64","","",23,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",23,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"programinfo"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"n":"bool"}}],[11,"hash","","",24,null],[11,"from_i64","","",24,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",24,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"programbuildinfo"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"programbuildinfo"}],"o":{"n":"bool"}}],[11,"hash","","",25,null],[11,"from_i64","","",25,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",25,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"programbuildstatus"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"programbuildstatus"}],"o":{"n":"bool"}}],[11,"hash","","",26,null],[11,"from_i64","","",26,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",26,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"kernelinfo"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"kernelinfo"}],"o":{"n":"bool"}}],[11,"hash","","",27,null],[11,"from_i64","","",27,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",27,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"kernelarginfo"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"kernelarginfo"}],"o":{"n":"bool"}}],[11,"hash","","",28,null],[11,"from_i64","","",28,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",28,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"kernelargaddressqualifier"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"kernelargaddressqualifier"}],"o":{"n":"bool"}}],[11,"hash","","",29,null],[11,"from_i64","","",29,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",29,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"kernelargaccessqualifier"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"kernelargaccessqualifier"}],"o":{"n":"bool"}}],[11,"hash","","",30,null],[11,"from_i64","","",30,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",30,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"kernelworkgroupinfo"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"kernelworkgroupinfo"}],"o":{"n":"bool"}}],[11,"hash","","",31,null],[11,"from_i64","","",31,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",31,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"eventinfo"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"eventinfo"}],"o":{"n":"bool"}}],[11,"hash","","",32,null],[11,"from_i64","","",32,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",32,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"commandtype"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"commandtype"}],"o":{"n":"bool"}}],[11,"hash","","",33,null],[11,"from_i64","","",33,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",33,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"commandexecutionstatus"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"commandexecutionstatus"}],"o":{"n":"bool"}}],[11,"hash","","",34,null],[11,"from_i64","","",34,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",34,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"buffercreatetype"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"buffercreatetype"}],"o":{"n":"bool"}}],[11,"hash","","",35,null],[11,"from_i64","","",35,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",35,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"profilinginfo"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"profilinginfo"}],"o":{"n":"bool"}}],[11,"hash","","",36,null],[11,"from_i64","","",36,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",36,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"new","","",94,{"i":[{"n":"i8"}],"o":{"n":"char"}}],[11,"splat","","",94,{"i":[{"n":"i8"}],"o":{"n":"char"}}],[11,"zero","","",94,{"o":{"n":"char"}}],[11,"is_zero","","",94,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",94,{"o":{"n":"char"}}],[11,"bitor_assign","","",95,null],[11,"bitor_assign","","",96,null],[11,"bitor_assign","","",97,null],[11,"bitor_assign","","",98,null],[11,"bitor_assign","","",99,null],[11,"bitor_assign","","",100,null],[11,"bitor_assign","","",101,null],[11,"bitor_assign","","",102,null],[11,"bitor_assign","","",103,null],[11,"bitor_assign","","",104,null],[11,"bitor_assign","","",105,null],[11,"bitor_assign","","",106,null],[11,"bitor_assign","","",107,null],[11,"bitor_assign","","",108,null],[11,"bitor_assign","","",109,null],[11,"bitor_assign","","",110,null],[11,"bitor_assign","","",111,null],[11,"bitor_assign","","",112,null],[11,"bitor_assign","","",113,null],[11,"bitor_assign","","",114,null],[11,"bitor_assign","","",115,null],[11,"bitor_assign","","",116,null],[11,"bitor_assign","","",117,null],[11,"bitor_assign","","",118,null],[11,"bitor_assign","","",119,null],[11,"bitor_assign","","",120,null],[11,"bitor_assign","","",121,null],[11,"bitor_assign","","",122,null],[11,"bitor_assign","","",123,null],[11,"bitor_assign","","",94,null],[11,"bitor_assign","","",124,null],[11,"bitor_assign","","",125,null],[11,"bitor_assign","","",126,null],[11,"bitor_assign","","",127,null],[11,"bitor_assign","","",128,null],[11,"bitor_assign","","",129,null],[11,"bitor_assign","","",130,null],[11,"bitor_assign","","",131,null],[11,"bitor_assign","","",132,null],[11,"bitor_assign","","",133,null],[11,"bitor_assign","","",134,null],[11,"bitor_assign","","",135,null],[11,"bitor_assign","","",136,null],[11,"bitor_assign","","",137,null],[11,"bitor_assign","","",138,null],[11,"bitor_assign","","",139,null],[11,"bitor_assign","","",140,null],[11,"bitor_assign","","",141,null],[11,"neg","","",126,{"i":[{"n":"self"}],"o":{"n":"ulong2"}}],[11,"neg","","",115,{"i":[{"n":"self"}],"o":{"n":"uint16"}}],[11,"neg","","",113,{"i":[{"n":"self"}],"o":{"n":"long2"}}],[11,"neg","","",142,{"i":[{"n":"self"}],"o":{"n":"double2"}}],[11,"neg","","",99,{"i":[{"n":"self"}],"o":{"n":"ulong3"}}],[11,"neg","","",105,{"i":[{"n":"self"}],"o":{"n":"char4"}}],[11,"neg","","",103,{"i":[{"n":"self"}],"o":{"n":"ushort2"}}],[11,"neg","","",97,{"i":[{"n":"self"}],"o":{"n":"ushort"}}],[11,"neg","","",110,{"i":[{"n":"self"}],"o":{"n":"int4"}}],[11,"neg","","",106,{"i":[{"n":"self"}],"o":{"n":"int2"}}],[11,"neg","","",108,{"i":[{"n":"self"}],"o":{"n":"long"}}],[11,"neg","","",138,{"i":[{"n":"self"}],"o":{"n":"int3"}}],[11,"neg","","",119,{"i":[{"n":"self"}],"o":{"n":"uint8"}}],[11,"neg","","",104,{"i":[{"n":"self"}],"o":{"n":"long16"}}],[11,"neg","","",117,{"i":[{"n":"self"}],"o":{"n":"char2"}}],[11,"neg","","",131,{"i":[{"n":"self"}],"o":{"n":"ulong8"}}],[11,"neg","","",143,{"i":[{"n":"self"}],"o":{"n":"float3"}}],[11,"neg","","",144,{"i":[{"n":"self"}],"o":{"n":"float"}}],[11,"neg","","",133,{"i":[{"n":"self"}],"o":{"n":"long4"}}],[11,"neg","","",137,{"i":[{"n":"self"}],"o":{"n":"short4"}}],[11,"neg","","",128,{"i":[{"n":"self"}],"o":{"n":"short8"}}],[11,"neg","","",124,{"i":[{"n":"self"}],"o":{"n":"uchar8"}}],[11,"neg","","",141,{"i":[{"n":"self"}],"o":{"n":"short3"}}],[11,"neg","","",130,{"i":[{"n":"self"}],"o":{"n":"uchar4"}}],[11,"neg","","",118,{"i":[{"n":"self"}],"o":{"n":"ulong"}}],[11,"neg","","",94,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"neg","","",136,{"i":[{"n":"self"}],"o":{"n":"ushort3"}}],[11,"neg","","",98,{"i":[{"n":"self"}],"o":{"n":"uint2"}}],[11,"neg","","",109,{"i":[{"n":"self"}],"o":{"n":"int8"}}],[11,"neg","","",145,{"i":[{"n":"self"}],"o":{"n":"float2"}}],[11,"neg","","",125,{"i":[{"n":"self"}],"o":{"n":"ulong16"}}],[11,"neg","","",129,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"neg","","",146,{"i":[{"n":"self"}],"o":{"n":"double"}}],[11,"neg","","",135,{"i":[{"n":"self"}],"o":{"n":"ushort4"}}],[11,"neg","","",102,{"i":[{"n":"self"}],"o":{"n":"uchar3"}}],[11,"neg","","",100,{"i":[{"n":"self"}],"o":{"n":"uchar2"}}],[11,"neg","","",111,{"i":[{"n":"self"}],"o":{"n":"long3"}}],[11,"neg","","",112,{"i":[{"n":"self"}],"o":{"n":"ulong4"}}],[11,"neg","","",114,{"i":[{"n":"self"}],"o":{"n":"uint4"}}],[11,"neg","","",140,{"i":[{"n":"self"}],"o":{"n":"int16"}}],[11,"neg","","",147,{"i":[{"n":"self"}],"o":{"n":"float4"}}],[11,"neg","","",148,{"i":[{"n":"self"}],"o":{"n":"double16"}}],[11,"neg","","",139,{"i":[{"n":"self"}],"o":{"n":"char16"}}],[11,"neg","","",116,{"i":[{"n":"self"}],"o":{"n":"uchar16"}}],[11,"neg","","",127,{"i":[{"n":"self"}],"o":{"n":"long8"}}],[11,"neg","","",121,{"i":[{"n":"self"}],"o":{"n":"short16"}}],[11,"neg","","",149,{"i":[{"n":"self"}],"o":{"n":"double3"}}],[11,"neg","","",134,{"i":[{"n":"self"}],"o":{"n":"char8"}}],[11,"neg","","",150,{"i":[{"n":"self"}],"o":{"n":"float16"}}],[11,"neg","","",151,{"i":[{"n":"self"}],"o":{"n":"double4"}}],[11,"neg","","",123,{"i":[{"n":"self"}],"o":{"n":"ushort8"}}],[11,"neg","","",107,{"i":[{"n":"self"}],"o":{"n":"char3"}}],[11,"neg","","",152,{"i":[{"n":"self"}],"o":{"n":"double8"}}],[11,"neg","","",96,{"i":[{"n":"self"}],"o":{"n":"ushort16"}}],[11,"neg","","",101,{"i":[{"n":"self"}],"o":{"n":"uchar"}}],[11,"neg","","",132,{"i":[{"n":"self"}],"o":{"n":"short"}}],[11,"neg","","",95,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"neg","","",153,{"i":[{"n":"self"}],"o":{"n":"float8"}}],[11,"neg","","",120,{"i":[{"n":"self"}],"o":{"n":"uint3"}}],[11,"neg","","",122,{"i":[{"n":"self"}],"o":{"n":"short2"}}],[11,"shl_assign","","",101,null],[11,"shl_assign","","",129,null],[11,"shl_assign","","",139,null],[11,"shl_assign","","",135,null],[11,"shl_assign","","",113,null],[11,"shl_assign","","",102,null],[11,"shl_assign","","",103,null],[11,"shl_assign","","",136,null],[11,"shl_assign","","",122,null],[11,"shl_assign","","",98,null],[11,"shl_assign","","",99,null],[11,"shl_assign","","",94,null],[11,"shl_assign","","",137,null],[11,"shl_assign","","",118,null],[11,"shl_assign","","",117,null],[11,"shl_assign","","",109,null],[11,"shl_assign","","",111,null],[11,"shl_assign","","",97,null],[11,"shl_assign","","",119,null],[11,"shl_assign","","",105,null],[11,"shl_assign","","",124,null],[11,"shl_assign","","",112,null],[11,"shl_assign","","",116,null],[11,"shl_assign","","",110,null],[11,"shl_assign","","",107,null],[11,"shl_assign","","",138,null],[11,"shl_assign","","",131,null],[11,"shl_assign","","",96,null],[11,"shl_assign","","",114,null],[11,"shl_assign","","",130,null],[11,"shl_assign","","",133,null],[11,"shl_assign","","",132,null],[11,"shl_assign","","",120,null],[11,"shl_assign","","",95,null],[11,"shl_assign","","",125,null],[11,"shl_assign","","",100,null],[11,"shl_assign","","",123,null],[11,"shl_assign","","",121,null],[11,"shl_assign","","",106,null],[11,"shl_assign","","",108,null],[11,"shl_assign","","",140,null],[11,"shl_assign","","",104,null],[11,"shl_assign","","",134,null],[11,"shl_assign","","",128,null],[11,"shl_assign","","",126,null],[11,"shl_assign","","",141,null],[11,"shl_assign","","",115,null],[11,"shl_assign","","",127,null],[11,"add_assign","","",124,null],[11,"add_assign","","",99,null],[11,"add_assign","","",102,null],[11,"add_assign","","",145,null],[11,"add_assign","","",122,null],[11,"add_assign","","",137,null],[11,"add_assign","","",151,null],[11,"add_assign","","",146,null],[11,"add_assign","","",135,null],[11,"add_assign","","",126,null],[11,"add_assign","","",106,null],[11,"add_assign","","",136,null],[11,"add_assign","","",152,null],[11,"add_assign","","",132,null],[11,"add_assign","","",133,null],[11,"add_assign","","",149,null],[11,"add_assign","","",111,null],[11,"add_assign","","",141,null],[11,"add_assign","","",105,null],[11,"add_assign","","",121,null],[11,"add_assign","","",120,null],[11,"add_assign","","",96,null],[11,"add_assign","","",129,null],[11,"add_assign","","",107,null],[11,"add_assign","","",100,null],[11,"add_assign","","",108,null],[11,"add_assign","","",123,null],[11,"add_assign","","",109,null],[11,"add_assign","","",143,null],[11,"add_assign","","",114,null],[11,"add_assign","","",131,null],[11,"add_assign","","",110,null],[11,"add_assign","","",134,null],[11,"add_assign","","",97,null],[11,"add_assign","","",115,null],[11,"add_assign","","",118,null],[11,"add_assign","","",153,null],[11,"add_assign","","",130,null],[11,"add_assign","","",148,null],[11,"add_assign","","",128,null],[11,"add_assign","","",113,null],[11,"add_assign","","",103,null],[11,"add_assign","","",140,null],[11,"add_assign","","",119,null],[11,"add_assign","","",116,null],[11,"add_assign","","",138,null],[11,"add_assign","","",117,null],[11,"add_assign","","",112,null],[11,"add_assign","","",127,null],[11,"add_assign","","",125,null],[11,"add_assign","","",142,null],[11,"add_assign","","",95,null],[11,"add_assign","","",104,null],[11,"add_assign","","",98,null],[11,"add_assign","","",139,null],[11,"add_assign","","",150,null],[11,"add_assign","","",101,null],[11,"add_assign","","",147,null],[11,"add_assign","","",94,null],[11,"add_assign","","",144,null],[11,"shl","","",140,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int16"}}],[11,"shl","","",109,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int8"}}],[11,"shl","","",111,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long3"}}],[11,"shl","","",132,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short"}}],[11,"shl","","",126,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong2"}}],[11,"shl","","",115,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint16"}}],[11,"shl","","",114,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint4"}}],[11,"shl","","",110,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int4"}}],[11,"shl","","",106,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int2"}}],[11,"shl","","",139,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char16"}}],[11,"shl","","",100,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar2"}}],[11,"shl","","",120,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint3"}}],[11,"shl","","",108,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long"}}],[11,"shl","","",137,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short4"}}],[11,"shl","","",125,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong16"}}],[11,"shl","","",98,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint2"}}],[11,"shl","","",112,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong4"}}],[11,"shl","","",104,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long16"}}],[11,"shl","","",99,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong3"}}],[11,"shl","","",122,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short2"}}],[11,"shl","","",96,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort16"}}],[11,"shl","","",123,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort8"}}],[11,"shl","","",97,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort"}}],[11,"shl","","",117,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char2"}}],[11,"shl","","",121,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short16"}}],[11,"shl","","",124,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar8"}}],[11,"shl","","",130,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar4"}}],[11,"shl","","",138,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int3"}}],[11,"shl","","",133,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long4"}}],[11,"shl","","",131,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong8"}}],[11,"shl","","",101,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar"}}],[11,"shl","","",129,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint"}}],[11,"shl","","",136,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort3"}}],[11,"shl","","",141,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short3"}}],[11,"shl","","",116,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar16"}}],[11,"shl","","",118,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong"}}],[11,"shl","","",94,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char"}}],[11,"shl","","",119,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint8"}}],[11,"shl","","",128,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short8"}}],[11,"shl","","",134,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char8"}}],[11,"shl","","",95,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int"}}],[11,"shl","","",105,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char4"}}],[11,"shl","","",127,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long8"}}],[11,"shl","","",135,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort4"}}],[11,"shl","","",107,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char3"}}],[11,"shl","","",113,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long2"}}],[11,"shl","","",102,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar3"}}],[11,"shl","","",103,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort2"}}],[11,"from","","",131,null],[11,"from","","",108,null],[11,"from","","",95,{"i":[{"n":"i32"}],"o":{"n":"int"}}],[11,"from","","",124,null],[11,"from","","",137,null],[11,"from","","",140,null],[11,"from","","",148,null],[11,"from","","",117,null],[11,"from","","",127,null],[11,"from","","",143,null],[11,"from","","",146,{"i":[{"n":"f64"}],"o":{"n":"double"}}],[11,"from","","",139,null],[11,"from","","",134,null],[11,"from","","",147,null],[11,"from","","",136,null],[11,"from","","",102,null],[11,"from","","",145,null],[11,"from","","",118,{"i":[{"n":"u64"}],"o":{"n":"ulong"}}],[11,"from","","",108,{"i":[{"n":"i64"}],"o":{"n":"long"}}],[11,"from","","",118,null],[11,"from","","",126,null],[11,"from","","",122,null],[11,"from","","",146,null],[11,"from","","",101,null],[11,"from","","",94,null],[11,"from","","",151,null],[11,"from","","",129,{"i":[{"n":"u32"}],"o":{"n":"uint"}}],[11,"from","","",153,null],[11,"from","","",144,null],[11,"from","","",135,null],[11,"from","","",114,null],[11,"from","","",132,{"i":[{"n":"i16"}],"o":{"n":"short"}}],[11,"from","","",112,null],[11,"from","","",101,{"i":[{"n":"u8"}],"o":{"n":"uchar"}}],[11,"from","","",116,null],[11,"from","","",121,null],[11,"from","","",123,null],[11,"from","","",109,null],[11,"from","","",105,null],[11,"from","","",132,null],[11,"from","","",100,null],[11,"from","","",133,null],[11,"from","","",106,null],[11,"from","","",96,null],[11,"from","","",142,null],[11,"from","","",129,null],[11,"from","","",119,null],[11,"from","","",107,null],[11,"from","","",149,null],[11,"from","","",104,null],[11,"from","","",120,null],[11,"from","","",99,null],[11,"from","","",103,null],[11,"from","","",97,{"i":[{"n":"u16"}],"o":{"n":"ushort"}}],[11,"from","","",115,null],[11,"from","","",98,null],[11,"from","","",113,null],[11,"from","","",152,null],[11,"from","","",130,null],[11,"from","","",138,null],[11,"from","","",150,null],[11,"from","","",141,null],[11,"from","","",95,null],[11,"from","","",110,null],[11,"from","","",144,{"i":[{"n":"f32"}],"o":{"n":"float"}}],[11,"from","","",97,null],[11,"from","","",94,{"i":[{"n":"i8"}],"o":{"n":"char"}}],[11,"from","","",111,null],[11,"from","","",125,null],[11,"from","","",128,null],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"one","","",143,{"o":{"n":"float3"}}],[11,"one","","",121,{"o":{"n":"short16"}}],[11,"one","","",122,{"o":{"n":"short2"}}],[11,"one","","",153,{"o":{"n":"float8"}}],[11,"one","","",146,{"o":{"n":"double"}}],[11,"one","","",127,{"o":{"n":"long8"}}],[11,"one","","",110,{"o":{"n":"int4"}}],[11,"one","","",123,{"o":{"n":"ushort8"}}],[11,"one","","",120,{"o":{"n":"uint3"}}],[11,"one","","",117,{"o":{"n":"char2"}}],[11,"one","","",101,{"o":{"n":"uchar"}}],[11,"one","","",145,{"o":{"n":"float2"}}],[11,"one","","",136,{"o":{"n":"ushort3"}}],[11,"one","","",138,{"o":{"n":"int3"}}],[11,"one","","",150,{"o":{"n":"float16"}}],[11,"one","","",102,{"o":{"n":"uchar3"}}],[11,"one","","",129,{"o":{"n":"uint"}}],[11,"one","","",135,{"o":{"n":"ushort4"}}],[11,"one","","",108,{"o":{"n":"long"}}],[11,"one","","",139,{"o":{"n":"char16"}}],[11,"one","","",97,{"o":{"n":"ushort"}}],[11,"one","","",152,{"o":{"n":"double8"}}],[11,"one","","",99,{"o":{"n":"ulong3"}}],[11,"one","","",113,{"o":{"n":"long2"}}],[11,"one","","",137,{"o":{"n":"short4"}}],[11,"one","","",124,{"o":{"n":"uchar8"}}],[11,"one","","",116,{"o":{"n":"uchar16"}}],[11,"one","","",131,{"o":{"n":"ulong8"}}],[11,"one","","",149,{"o":{"n":"double3"}}],[11,"one","","",107,{"o":{"n":"char3"}}],[11,"one","","",134,{"o":{"n":"char8"}}],[11,"one","","",94,{"o":{"n":"char"}}],[11,"one","","",111,{"o":{"n":"long3"}}],[11,"one","","",109,{"o":{"n":"int8"}}],[11,"one","","",148,{"o":{"n":"double16"}}],[11,"one","","",132,{"o":{"n":"short"}}],[11,"one","","",147,{"o":{"n":"float4"}}],[11,"one","","",126,{"o":{"n":"ulong2"}}],[11,"one","","",106,{"o":{"n":"int2"}}],[11,"one","","",105,{"o":{"n":"char4"}}],[11,"one","","",151,{"o":{"n":"double4"}}],[11,"one","","",133,{"o":{"n":"long4"}}],[11,"one","","",144,{"o":{"n":"float"}}],[11,"one","","",119,{"o":{"n":"uint8"}}],[11,"one","","",125,{"o":{"n":"ulong16"}}],[11,"one","","",141,{"o":{"n":"short3"}}],[11,"one","","",128,{"o":{"n":"short8"}}],[11,"one","","",112,{"o":{"n":"ulong4"}}],[11,"one","","",104,{"o":{"n":"long16"}}],[11,"one","","",114,{"o":{"n":"uint4"}}],[11,"one","","",118,{"o":{"n":"ulong"}}],[11,"one","","",95,{"o":{"n":"int"}}],[11,"one","","",140,{"o":{"n":"int16"}}],[11,"one","","",96,{"o":{"n":"ushort16"}}],[11,"one","","",142,{"o":{"n":"double2"}}],[11,"one","","",100,{"o":{"n":"uchar2"}}],[11,"one","","",103,{"o":{"n":"ushort2"}}],[11,"one","","",130,{"o":{"n":"uchar4"}}],[11,"one","","",98,{"o":{"n":"uint2"}}],[11,"one","","",115,{"o":{"n":"uint16"}}],[11,"eq","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"eq","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"eq","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"eq","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"eq","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"eq","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"eq","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"eq","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"eq","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"eq","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"eq","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"eq","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"eq","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"eq","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"eq","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"eq","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"eq","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"eq","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"eq","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"eq","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"eq","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"eq","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"eq","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"eq","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"eq","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"eq","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"eq","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"add","","",128,null],[11,"add","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"add","","",132,null],[11,"add","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"add","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"add","","",126,null],[11,"add","","",114,null],[11,"add","","",137,null],[11,"add","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"add","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"add","","",115,null],[11,"add","","",153,null],[11,"add","","",124,null],[11,"add","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"add","","",148,null],[11,"add","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"add","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"add","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"add","","",139,null],[11,"add","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"add","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"add","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"add","","",112,null],[11,"add","","",127,null],[11,"add","","",142,null],[11,"add","","",99,null],[11,"add","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"add","","",109,null],[11,"add","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"add","","",125,null],[11,"add","","",133,null],[11,"add","","",111,null],[11,"add","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"add","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"add","","",149,null],[11,"add","","",146,null],[11,"add","","",101,null],[11,"add","","",104,null],[11,"add","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"add","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"add","","",98,null],[11,"add","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"add","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"add","","",151,null],[11,"add","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"add","","",121,null],[11,"add","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"add","","",138,null],[11,"add","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"add","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"add","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"add","","",108,null],[11,"add","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"add","","",105,null],[11,"add","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"add","","",96,null],[11,"add","","",106,null],[11,"add","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"add","","",129,null],[11,"add","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"add","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"add","","",100,null],[11,"add","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"add","","",120,null],[11,"add","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"add","","",122,null],[11,"add","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"add","","",130,null],[11,"add","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"add","","",103,null],[11,"add","","",143,null],[11,"add","","",134,null],[11,"add","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"add","","",144,null],[11,"add","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"add","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"add","","",150,null],[11,"add","","",140,null],[11,"add","","",141,null],[11,"add","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"add","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"add","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"add","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"add","","",110,null],[11,"add","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"add","","",107,null],[11,"add","","",117,null],[11,"add","","",145,null],[11,"add","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"add","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"add","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"add","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"add","","",102,null],[11,"add","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"add","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"add","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"add","","",123,null],[11,"add","","",94,null],[11,"add","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"add","","",152,null],[11,"add","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"add","","",116,null],[11,"add","","",147,null],[11,"add","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"add","","",136,null],[11,"add","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"add","","",118,null],[11,"add","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"add","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"add","","",131,null],[11,"add","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"add","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"add","","",95,null],[11,"add","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"add","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"add","","",113,null],[11,"add","","",97,null],[11,"add","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"add","","",135,null],[11,"add","","",119,null],[11,"deref_mut","","",140,null],[11,"deref_mut","","",132,null],[11,"deref_mut","","",100,null],[11,"deref_mut","","",99,null],[11,"deref_mut","","",138,null],[11,"deref_mut","","",103,null],[11,"deref_mut","","",129,null],[11,"deref_mut","","",98,null],[11,"deref_mut","","",112,null],[11,"deref_mut","","",145,null],[11,"deref_mut","","",120,null],[11,"deref_mut","","",122,null],[11,"deref_mut","","",149,null],[11,"deref_mut","","",101,null],[11,"deref_mut","","",105,null],[11,"deref_mut","","",137,null],[11,"deref_mut","","",139,null],[11,"deref_mut","","",95,null],[11,"deref_mut","","",97,null],[11,"deref_mut","","",142,null],[11,"deref_mut","","",108,null],[11,"deref_mut","","",150,null],[11,"deref_mut","","",121,null],[11,"deref_mut","","",130,null],[11,"deref_mut","","",96,null],[11,"deref_mut","","",106,null],[11,"deref_mut","","",94,null],[11,"deref_mut","","",141,null],[11,"deref_mut","","",136,null],[11,"deref_mut","","",107,null],[11,"deref_mut","","",134,null],[11,"deref_mut","","",104,null],[11,"deref_mut","","",119,null],[11,"deref_mut","","",152,null],[11,"deref_mut","","",128,null],[11,"deref_mut","","",144,null],[11,"deref_mut","","",113,null],[11,"deref_mut","","",148,null],[11,"deref_mut","","",127,null],[11,"deref_mut","","",111,null],[11,"deref_mut","","",131,null],[11,"deref_mut","","",125,null],[11,"deref_mut","","",123,null],[11,"deref_mut","","",110,null],[11,"deref_mut","","",114,null],[11,"deref_mut","","",118,null],[11,"deref_mut","","",102,null],[11,"deref_mut","","",117,null],[11,"deref_mut","","",135,null],[11,"deref_mut","","",124,null],[11,"deref_mut","","",109,null],[11,"deref_mut","","",143,null],[11,"deref_mut","","",147,null],[11,"deref_mut","","",133,null],[11,"deref_mut","","",126,null],[11,"deref_mut","","",153,null],[11,"deref_mut","","",115,null],[11,"deref_mut","","",151,null],[11,"deref_mut","","",116,null],[11,"deref_mut","","",146,null],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"uint4"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"uchar"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"ulong"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"double2"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"uchar2"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"uint8"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"int8"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"ulong4"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"ushort16"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"short16"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"ulong3"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"short"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"uint3"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"double8"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"ulong2"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"float3"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"short4"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"long8"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"short2"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"ulong16"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"long16"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"uchar3"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"float4"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"char3"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"uchar4"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"ushort"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"char4"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"float8"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"ushort4"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"uint16"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"uchar16"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"double16"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"ushort2"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"short8"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"uchar8"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"long"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"float2"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"int3"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"double4"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"int4"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"int2"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"long3"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"ulong8"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"short3"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"char2"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"ushort8"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"float16"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"long2"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"char16"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"double"}}],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"double3"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"int16"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"float"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"uint2"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"char8"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"ushort3"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"long4"}}],[11,"shr","","",102,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar3"}}],[11,"shr","","",126,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong2"}}],[11,"shr","","",139,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char16"}}],[11,"shr","","",127,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long8"}}],[11,"shr","","",118,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong"}}],[11,"shr","","",128,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short8"}}],[11,"shr","","",135,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort4"}}],[11,"shr","","",124,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar8"}}],[11,"shr","","",110,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int4"}}],[11,"shr","","",133,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long4"}}],[11,"shr","","",138,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int3"}}],[11,"shr","","",123,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort8"}}],[11,"shr","","",119,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint8"}}],[11,"shr","","",105,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char4"}}],[11,"shr","","",132,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short"}}],[11,"shr","","",114,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint4"}}],[11,"shr","","",95,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int"}}],[11,"shr","","",96,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort16"}}],[11,"shr","","",103,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort2"}}],[11,"shr","","",108,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long"}}],[11,"shr","","",98,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint2"}}],[11,"shr","","",117,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char2"}}],[11,"shr","","",120,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint3"}}],[11,"shr","","",111,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long3"}}],[11,"shr","","",104,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long16"}}],[11,"shr","","",115,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint16"}}],[11,"shr","","",97,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort"}}],[11,"shr","","",134,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char8"}}],[11,"shr","","",101,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar"}}],[11,"shr","","",137,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short4"}}],[11,"shr","","",94,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char"}}],[11,"shr","","",107,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char3"}}],[11,"shr","","",112,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong4"}}],[11,"shr","","",130,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar4"}}],[11,"shr","","",122,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short2"}}],[11,"shr","","",113,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long2"}}],[11,"shr","","",100,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar2"}}],[11,"shr","","",129,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint"}}],[11,"shr","","",106,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int2"}}],[11,"shr","","",141,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short3"}}],[11,"shr","","",136,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort3"}}],[11,"shr","","",125,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong16"}}],[11,"shr","","",140,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int16"}}],[11,"shr","","",99,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong3"}}],[11,"shr","","",116,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar16"}}],[11,"shr","","",121,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short16"}}],[11,"shr","","",109,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int8"}}],[11,"shr","","",131,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong8"}}],[11,"bitor","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"bitor","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"bitor","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"bitor","","",97,null],[11,"bitor","","",130,null],[11,"bitor","","",112,null],[11,"bitor","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"bitor","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"bitor","","",117,null],[11,"bitor","","",104,null],[11,"bitor","","",109,null],[11,"bitor","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"bitor","","",132,null],[11,"bitor","","",101,null],[11,"bitor","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"bitor","","",100,null],[11,"bitor","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"bitor","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"bitor","","",106,null],[11,"bitor","","",127,null],[11,"bitor","","",124,null],[11,"bitor","","",122,null],[11,"bitor","","",121,null],[11,"bitor","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"bitor","","",116,null],[11,"bitor","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"bitor","","",135,null],[11,"bitor","","",136,null],[11,"bitor","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"bitor","","",137,null],[11,"bitor","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"bitor","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"bitor","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"bitor","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"bitor","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"bitor","","",133,null],[11,"bitor","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"bitor","","",108,null],[11,"bitor","","",123,null],[11,"bitor","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"bitor","","",118,null],[11,"bitor","","",113,null],[11,"bitor","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"bitor","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"bitor","","",102,null],[11,"bitor","","",95,null],[11,"bitor","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"bitor","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"bitor","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"bitor","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"bitor","","",94,null],[11,"bitor","","",119,null],[11,"bitor","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"bitor","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"bitor","","",99,null],[11,"bitor","","",115,null],[11,"bitor","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"bitor","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"bitor","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"bitor","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"bitor","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"bitor","","",141,null],[11,"bitor","","",140,null],[11,"bitor","","",120,null],[11,"bitor","","",107,null],[11,"bitor","","",126,null],[11,"bitor","","",125,null],[11,"bitor","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"bitor","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"bitor","","",131,null],[11,"bitor","","",128,null],[11,"bitor","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"bitor","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"bitor","","",129,null],[11,"bitor","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"bitor","","",139,null],[11,"bitor","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"bitor","","",134,null],[11,"bitor","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"bitor","","",138,null],[11,"bitor","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"bitor","","",114,null],[11,"bitor","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"bitor","","",110,null],[11,"bitor","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"bitor","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"bitor","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"bitor","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"bitor","","",96,null],[11,"bitor","","",105,null],[11,"bitor","","",98,null],[11,"bitor","","",111,null],[11,"bitor","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"bitor","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"bitor","","",103,null],[11,"bitor","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"cmp","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"ordering"}}],[11,"cmp","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"ordering"}}],[11,"cmp","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"ordering"}}],[11,"cmp","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ordering"}}],[11,"cmp","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"ordering"}}],[11,"cmp","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"ordering"}}],[11,"cmp","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"ordering"}}],[11,"cmp","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"ordering"}}],[11,"cmp","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"ordering"}}],[11,"cmp","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"ordering"}}],[11,"cmp","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"ordering"}}],[11,"cmp","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"ordering"}}],[11,"cmp","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"ordering"}}],[11,"cmp","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"ordering"}}],[11,"cmp","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ordering"}}],[11,"cmp","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ordering"}}],[11,"cmp","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ordering"}}],[11,"cmp","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"ordering"}}],[11,"cmp","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"ordering"}}],[11,"cmp","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ordering"}}],[11,"cmp","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"ordering"}}],[11,"cmp","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"ordering"}}],[11,"cmp","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"ordering"}}],[11,"cmp","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"ordering"}}],[11,"cmp","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ordering"}}],[11,"cmp","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"ordering"}}],[11,"cmp","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"ordering"}}],[11,"cmp","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"ordering"}}],[11,"cmp","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ordering"}}],[11,"cmp","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ordering"}}],[11,"cmp","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"ordering"}}],[11,"cmp","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"ordering"}}],[11,"cmp","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"ordering"}}],[11,"cmp","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"ordering"}}],[11,"cmp","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"ordering"}}],[11,"cmp","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ordering"}}],[11,"cmp","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ordering"}}],[11,"cmp","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"ordering"}}],[11,"cmp","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"ordering"}}],[11,"cmp","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"ordering"}}],[11,"cmp","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"ordering"}}],[11,"cmp","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"ordering"}}],[11,"cmp","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"ordering"}}],[11,"cmp","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"ordering"}}],[11,"cmp","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"ordering"}}],[11,"cmp","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ordering"}}],[11,"cmp","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"ordering"}}],[11,"cmp","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ordering"}}],[11,"default","","",110,{"o":{"n":"int4"}}],[11,"default","","",136,{"o":{"n":"ushort3"}}],[11,"default","","",122,{"o":{"n":"short2"}}],[11,"default","","",133,{"o":{"n":"long4"}}],[11,"default","","",102,{"o":{"n":"uchar3"}}],[11,"default","","",94,{"o":{"n":"char"}}],[11,"default","","",126,{"o":{"n":"ulong2"}}],[11,"default","","",99,{"o":{"n":"ulong3"}}],[11,"default","","",151,{"o":{"n":"double4"}}],[11,"default","","",127,{"o":{"n":"long8"}}],[11,"default","","",144,{"o":{"n":"float"}}],[11,"default","","",123,{"o":{"n":"ushort8"}}],[11,"default","","",143,{"o":{"n":"float3"}}],[11,"default","","",134,{"o":{"n":"char8"}}],[11,"default","","",100,{"o":{"n":"uchar2"}}],[11,"default","","",106,{"o":{"n":"int2"}}],[11,"default","","",140,{"o":{"n":"int16"}}],[11,"default","","",108,{"o":{"n":"long"}}],[11,"default","","",135,{"o":{"n":"ushort4"}}],[11,"default","","",104,{"o":{"n":"long16"}}],[11,"default","","",125,{"o":{"n":"ulong16"}}],[11,"default","","",105,{"o":{"n":"char4"}}],[11,"default","","",145,{"o":{"n":"float2"}}],[11,"default","","",152,{"o":{"n":"double8"}}],[11,"default","","",97,{"o":{"n":"ushort"}}],[11,"default","","",153,{"o":{"n":"float8"}}],[11,"default","","",112,{"o":{"n":"ulong4"}}],[11,"default","","",114,{"o":{"n":"uint4"}}],[11,"default","","",107,{"o":{"n":"char3"}}],[11,"default","","",129,{"o":{"n":"uint"}}],[11,"default","","",138,{"o":{"n":"int3"}}],[11,"default","","",147,{"o":{"n":"float4"}}],[11,"default","","",119,{"o":{"n":"uint8"}}],[11,"default","","",137,{"o":{"n":"short4"}}],[11,"default","","",96,{"o":{"n":"ushort16"}}],[11,"default","","",118,{"o":{"n":"ulong"}}],[11,"default","","",103,{"o":{"n":"ushort2"}}],[11,"default","","",113,{"o":{"n":"long2"}}],[11,"default","","",128,{"o":{"n":"short8"}}],[11,"default","","",116,{"o":{"n":"uchar16"}}],[11,"default","","",120,{"o":{"n":"uint3"}}],[11,"default","","",149,{"o":{"n":"double3"}}],[11,"default","","",141,{"o":{"n":"short3"}}],[11,"default","","",142,{"o":{"n":"double2"}}],[11,"default","","",131,{"o":{"n":"ulong8"}}],[11,"default","","",98,{"o":{"n":"uint2"}}],[11,"default","","",124,{"o":{"n":"uchar8"}}],[11,"default","","",101,{"o":{"n":"uchar"}}],[11,"default","","",115,{"o":{"n":"uint16"}}],[11,"default","","",109,{"o":{"n":"int8"}}],[11,"default","","",146,{"o":{"n":"double"}}],[11,"default","","",117,{"o":{"n":"char2"}}],[11,"default","","",150,{"o":{"n":"float16"}}],[11,"default","","",132,{"o":{"n":"short"}}],[11,"default","","",148,{"o":{"n":"double16"}}],[11,"default","","",121,{"o":{"n":"short16"}}],[11,"default","","",139,{"o":{"n":"char16"}}],[11,"default","","",130,{"o":{"n":"uchar4"}}],[11,"default","","",111,{"o":{"n":"long3"}}],[11,"default","","",95,{"o":{"n":"int"}}],[11,"product","","",124,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"product","","",141,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"product","","",115,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"product","","",129,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"product","","",109,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"product","","",131,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"product","","",135,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"product","","",147,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"product","","",145,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"product","","",119,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"product","","",149,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"product","","",97,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"product","","",124,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"product","","",125,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"product","","",106,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"product","","",119,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"product","","",110,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"product","","",145,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"product","","",97,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"product","","",130,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"product","","",142,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"product","","",134,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"product","","",116,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"product","","",136,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"product","","",110,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"product","","",112,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"product","","",111,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"product","","",126,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"product","","",146,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"product","","",95,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"product","","",112,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"product","","",127,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"product","","",138,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"product","","",102,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"product","","",117,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"product","","",108,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"product","","",113,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"product","","",106,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"product","","",116,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"product","","",98,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"product","","",143,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"product","","",94,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"product","","",96,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"product","","",105,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"product","","",150,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"product","","",99,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"product","","",100,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"product","","",144,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"product","","",132,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"product","","",118,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"product","","",140,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"product","","",115,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"product","","",101,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"product","","",126,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"product","","",122,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"product","","",118,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"product","","",132,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"product","","",130,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"product","","",107,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"product","","",103,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"product","","",128,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"product","","",109,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"product","","",148,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"product","","",95,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"product","","",135,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"product","","",120,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"product","","",98,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"product","","",140,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"product","","",114,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"product","","",148,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"product","","",103,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"product","","",149,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"product","","",123,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"product","","",113,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"product","","",108,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"product","","",127,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"product","","",117,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"product","","",96,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"product","","",107,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"product","","",153,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"product","","",111,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"product","","",121,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"product","","",137,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"product","","",100,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"product","","",152,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"product","","",120,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"product","","",105,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"product","","",123,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"product","","",152,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"product","","",131,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"product","","",142,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"product","","",133,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"product","","",151,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"product","","",139,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"product","","",147,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"product","","",139,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"product","","",125,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"product","","",138,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"product","","",128,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"product","","",94,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"product","","",134,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"product","","",150,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"product","","",99,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"product","","",143,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"product","","",114,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"product","","",122,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"product","","",101,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"product","","",151,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"product","","",102,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"product","","",146,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"product","","",104,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"product","","",133,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"product","","",104,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"product","","",137,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"product","","",141,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"product","","",121,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"product","","",144,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"product","","",153,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"product","","",129,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"product","","",136,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"deref","","",116,null],[11,"deref","","",101,null],[11,"deref","","",145,null],[11,"deref","","",131,null],[11,"deref","","",112,null],[11,"deref","","",128,null],[11,"deref","","",103,null],[11,"deref","","",153,null],[11,"deref","","",144,null],[11,"deref","","",122,null],[11,"deref","","",139,null],[11,"deref","","",94,null],[11,"deref","","",148,null],[11,"deref","","",107,null],[11,"deref","","",135,null],[11,"deref","","",133,null],[11,"deref","","",136,null],[11,"deref","","",95,null],[11,"deref","","",111,null],[11,"deref","","",106,null],[11,"deref","","",113,null],[11,"deref","","",121,null],[11,"deref","","",149,null],[11,"deref","","",125,null],[11,"deref","","",147,null],[11,"deref","","",151,null],[11,"deref","","",137,null],[11,"deref","","",119,null],[11,"deref","","",104,null],[11,"deref","","",132,null],[11,"deref","","",102,null],[11,"deref","","",141,null],[11,"deref","","",126,null],[11,"deref","","",108,null],[11,"deref","","",130,null],[11,"deref","","",105,null],[11,"deref","","",115,null],[11,"deref","","",150,null],[11,"deref","","",123,null],[11,"deref","","",146,null],[11,"deref","","",129,null],[11,"deref","","",110,null],[11,"deref","","",100,null],[11,"deref","","",140,null],[11,"deref","","",120,null],[11,"deref","","",143,null],[11,"deref","","",114,null],[11,"deref","","",109,null],[11,"deref","","",142,null],[11,"deref","","",124,null],[11,"deref","","",118,null],[11,"deref","","",117,null],[11,"deref","","",152,null],[11,"deref","","",127,null],[11,"deref","","",99,null],[11,"deref","","",97,null],[11,"deref","","",98,null],[11,"deref","","",138,null],[11,"deref","","",96,null],[11,"deref","","",134,null],[11,"bitxor","","",95,null],[11,"bitxor","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"bitxor","","",133,null],[11,"bitxor","","",101,null],[11,"bitxor","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"bitxor","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"bitxor","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"bitxor","","",125,null],[11,"bitxor","","",124,null],[11,"bitxor","","",134,null],[11,"bitxor","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"bitxor","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"bitxor","","",108,null],[11,"bitxor","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"bitxor","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"bitxor","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"bitxor","","",107,null],[11,"bitxor","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"bitxor","","",140,null],[11,"bitxor","","",139,null],[11,"bitxor","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"bitxor","","",111,null],[11,"bitxor","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"bitxor","","",105,null],[11,"bitxor","","",103,null],[11,"bitxor","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"bitxor","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"bitxor","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"bitxor","","",109,null],[11,"bitxor","","",97,null],[11,"bitxor","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"bitxor","","",119,null],[11,"bitxor","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"bitxor","","",102,null],[11,"bitxor","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"bitxor","","",100,null],[11,"bitxor","","",141,null],[11,"bitxor","","",117,null],[11,"bitxor","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"bitxor","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"bitxor","","",120,null],[11,"bitxor","","",130,null],[11,"bitxor","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"bitxor","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"bitxor","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"bitxor","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"bitxor","","",123,null],[11,"bitxor","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"bitxor","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"bitxor","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"bitxor","","",132,null],[11,"bitxor","","",137,null],[11,"bitxor","","",99,null],[11,"bitxor","","",94,null],[11,"bitxor","","",113,null],[11,"bitxor","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"bitxor","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"bitxor","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"bitxor","","",121,null],[11,"bitxor","","",116,null],[11,"bitxor","","",126,null],[11,"bitxor","","",135,null],[11,"bitxor","","",129,null],[11,"bitxor","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"bitxor","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"bitxor","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"bitxor","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"bitxor","","",131,null],[11,"bitxor","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"bitxor","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"bitxor","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"bitxor","","",128,null],[11,"bitxor","","",122,null],[11,"bitxor","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"bitxor","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"bitxor","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"bitxor","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"bitxor","","",118,null],[11,"bitxor","","",138,null],[11,"bitxor","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"bitxor","","",104,null],[11,"bitxor","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"bitxor","","",114,null],[11,"bitxor","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"bitxor","","",127,null],[11,"bitxor","","",98,null],[11,"bitxor","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"bitxor","","",112,null],[11,"bitxor","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"bitxor","","",96,null],[11,"bitxor","","",115,null],[11,"bitxor","","",110,null],[11,"bitxor","","",106,null],[11,"bitxor","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"bitxor","","",136,null],[11,"bitxor","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitand_assign","","",124,null],[11,"bitand_assign","","",136,null],[11,"bitand_assign","","",108,null],[11,"bitand_assign","","",113,null],[11,"bitand_assign","","",94,null],[11,"bitand_assign","","",105,null],[11,"bitand_assign","","",128,null],[11,"bitand_assign","","",122,null],[11,"bitand_assign","","",130,null],[11,"bitand_assign","","",138,null],[11,"bitand_assign","","",98,null],[11,"bitand_assign","","",133,null],[11,"bitand_assign","","",100,null],[11,"bitand_assign","","",111,null],[11,"bitand_assign","","",135,null],[11,"bitand_assign","","",99,null],[11,"bitand_assign","","",107,null],[11,"bitand_assign","","",118,null],[11,"bitand_assign","","",119,null],[11,"bitand_assign","","",141,null],[11,"bitand_assign","","",129,null],[11,"bitand_assign","","",104,null],[11,"bitand_assign","","",134,null],[11,"bitand_assign","","",96,null],[11,"bitand_assign","","",123,null],[11,"bitand_assign","","",109,null],[11,"bitand_assign","","",115,null],[11,"bitand_assign","","",112,null],[11,"bitand_assign","","",97,null],[11,"bitand_assign","","",131,null],[11,"bitand_assign","","",106,null],[11,"bitand_assign","","",121,null],[11,"bitand_assign","","",137,null],[11,"bitand_assign","","",127,null],[11,"bitand_assign","","",132,null],[11,"bitand_assign","","",102,null],[11,"bitand_assign","","",125,null],[11,"bitand_assign","","",140,null],[11,"bitand_assign","","",114,null],[11,"bitand_assign","","",116,null],[11,"bitand_assign","","",95,null],[11,"bitand_assign","","",110,null],[11,"bitand_assign","","",103,null],[11,"bitand_assign","","",126,null],[11,"bitand_assign","","",139,null],[11,"bitand_assign","","",101,null],[11,"bitand_assign","","",120,null],[11,"bitand_assign","","",117,null],[11,"sub_assign","","",130,null],[11,"sub_assign","","",131,null],[11,"sub_assign","","",109,null],[11,"sub_assign","","",96,null],[11,"sub_assign","","",97,null],[11,"sub_assign","","",108,null],[11,"sub_assign","","",104,null],[11,"sub_assign","","",134,null],[11,"sub_assign","","",145,null],[11,"sub_assign","","",151,null],[11,"sub_assign","","",150,null],[11,"sub_assign","","",153,null],[11,"sub_assign","","",101,null],[11,"sub_assign","","",105,null],[11,"sub_assign","","",115,null],[11,"sub_assign","","",124,null],[11,"sub_assign","","",132,null],[11,"sub_assign","","",137,null],[11,"sub_assign","","",126,null],[11,"sub_assign","","",129,null],[11,"sub_assign","","",118,null],[11,"sub_assign","","",119,null],[11,"sub_assign","","",114,null],[11,"sub_assign","","",135,null],[11,"sub_assign","","",146,null],[11,"sub_assign","","",106,null],[11,"sub_assign","","",148,null],[11,"sub_assign","","",149,null],[11,"sub_assign","","",127,null],[11,"sub_assign","","",121,null],[11,"sub_assign","","",133,null],[11,"sub_assign","","",100,null],[11,"sub_assign","","",140,null],[11,"sub_assign","","",122,null],[11,"sub_assign","","",110,null],[11,"sub_assign","","",120,null],[11,"sub_assign","","",99,null],[11,"sub_assign","","",142,null],[11,"sub_assign","","",112,null],[11,"sub_assign","","",125,null],[11,"sub_assign","","",95,null],[11,"sub_assign","","",123,null],[11,"sub_assign","","",139,null],[11,"sub_assign","","",113,null],[11,"sub_assign","","",144,null],[11,"sub_assign","","",98,null],[11,"sub_assign","","",143,null],[11,"sub_assign","","",116,null],[11,"sub_assign","","",94,null],[11,"sub_assign","","",111,null],[11,"sub_assign","","",136,null],[11,"sub_assign","","",107,null],[11,"sub_assign","","",147,null],[11,"sub_assign","","",117,null],[11,"sub_assign","","",141,null],[11,"sub_assign","","",103,null],[11,"sub_assign","","",152,null],[11,"sub_assign","","",138,null],[11,"sub_assign","","",128,null],[11,"sub_assign","","",102,null],[11,"bitxor_assign","","",105,null],[11,"bitxor_assign","","",95,null],[11,"bitxor_assign","","",131,null],[11,"bitxor_assign","","",104,null],[11,"bitxor_assign","","",110,null],[11,"bitxor_assign","","",108,null],[11,"bitxor_assign","","",129,null],[11,"bitxor_assign","","",128,null],[11,"bitxor_assign","","",94,null],[11,"bitxor_assign","","",132,null],[11,"bitxor_assign","","",127,null],[11,"bitxor_assign","","",118,null],[11,"bitxor_assign","","",109,null],[11,"bitxor_assign","","",97,null],[11,"bitxor_assign","","",114,null],[11,"bitxor_assign","","",116,null],[11,"bitxor_assign","","",113,null],[11,"bitxor_assign","","",106,null],[11,"bitxor_assign","","",136,null],[11,"bitxor_assign","","",125,null],[11,"bitxor_assign","","",117,null],[11,"bitxor_assign","","",111,null],[11,"bitxor_assign","","",122,null],[11,"bitxor_assign","","",137,null],[11,"bitxor_assign","","",139,null],[11,"bitxor_assign","","",107,null],[11,"bitxor_assign","","",112,null],[11,"bitxor_assign","","",101,null],[11,"bitxor_assign","","",103,null],[11,"bitxor_assign","","",141,null],[11,"bitxor_assign","","",134,null],[11,"bitxor_assign","","",123,null],[11,"bitxor_assign","","",121,null],[11,"bitxor_assign","","",120,null],[11,"bitxor_assign","","",102,null],[11,"bitxor_assign","","",126,null],[11,"bitxor_assign","","",133,null],[11,"bitxor_assign","","",135,null],[11,"bitxor_assign","","",100,null],[11,"bitxor_assign","","",140,null],[11,"bitxor_assign","","",98,null],[11,"bitxor_assign","","",96,null],[11,"bitxor_assign","","",99,null],[11,"bitxor_assign","","",124,null],[11,"bitxor_assign","","",130,null],[11,"bitxor_assign","","",138,null],[11,"bitxor_assign","","",119,null],[11,"bitxor_assign","","",115,null],[11,"not","","",115,{"i":[{"n":"self"}],"o":{"n":"uint16"}}],[11,"not","","",137,{"i":[{"n":"self"}],"o":{"n":"short4"}}],[11,"not","","",126,{"i":[{"n":"self"}],"o":{"n":"ulong2"}}],[11,"not","","",111,{"i":[{"n":"self"}],"o":{"n":"long3"}}],[11,"not","","",107,{"i":[{"n":"self"}],"o":{"n":"char3"}}],[11,"not","","",120,{"i":[{"n":"self"}],"o":{"n":"uint3"}}],[11,"not","","",98,{"i":[{"n":"self"}],"o":{"n":"uint2"}}],[11,"not","","",132,{"i":[{"n":"self"}],"o":{"n":"short"}}],[11,"not","","",94,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"not","","",122,{"i":[{"n":"self"}],"o":{"n":"short2"}}],[11,"not","","",138,{"i":[{"n":"self"}],"o":{"n":"int3"}}],[11,"not","","",124,{"i":[{"n":"self"}],"o":{"n":"uchar8"}}],[11,"not","","",101,{"i":[{"n":"self"}],"o":{"n":"uchar"}}],[11,"not","","",129,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"not","","",139,{"i":[{"n":"self"}],"o":{"n":"char16"}}],[11,"not","","",109,{"i":[{"n":"self"}],"o":{"n":"int8"}}],[11,"not","","",102,{"i":[{"n":"self"}],"o":{"n":"uchar3"}}],[11,"not","","",136,{"i":[{"n":"self"}],"o":{"n":"ushort3"}}],[11,"not","","",135,{"i":[{"n":"self"}],"o":{"n":"ushort4"}}],[11,"not","","",116,{"i":[{"n":"self"}],"o":{"n":"uchar16"}}],[11,"not","","",117,{"i":[{"n":"self"}],"o":{"n":"char2"}}],[11,"not","","",95,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"not","","",96,{"i":[{"n":"self"}],"o":{"n":"ushort16"}}],[11,"not","","",134,{"i":[{"n":"self"}],"o":{"n":"char8"}}],[11,"not","","",118,{"i":[{"n":"self"}],"o":{"n":"ulong"}}],[11,"not","","",97,{"i":[{"n":"self"}],"o":{"n":"ushort"}}],[11,"not","","",100,{"i":[{"n":"self"}],"o":{"n":"uchar2"}}],[11,"not","","",131,{"i":[{"n":"self"}],"o":{"n":"ulong8"}}],[11,"not","","",104,{"i":[{"n":"self"}],"o":{"n":"long16"}}],[11,"not","","",99,{"i":[{"n":"self"}],"o":{"n":"ulong3"}}],[11,"not","","",103,{"i":[{"n":"self"}],"o":{"n":"ushort2"}}],[11,"not","","",106,{"i":[{"n":"self"}],"o":{"n":"int2"}}],[11,"not","","",114,{"i":[{"n":"self"}],"o":{"n":"uint4"}}],[11,"not","","",110,{"i":[{"n":"self"}],"o":{"n":"int4"}}],[11,"not","","",130,{"i":[{"n":"self"}],"o":{"n":"uchar4"}}],[11,"not","","",123,{"i":[{"n":"self"}],"o":{"n":"ushort8"}}],[11,"not","","",133,{"i":[{"n":"self"}],"o":{"n":"long4"}}],[11,"not","","",105,{"i":[{"n":"self"}],"o":{"n":"char4"}}],[11,"not","","",127,{"i":[{"n":"self"}],"o":{"n":"long8"}}],[11,"not","","",121,{"i":[{"n":"self"}],"o":{"n":"short16"}}],[11,"not","","",141,{"i":[{"n":"self"}],"o":{"n":"short3"}}],[11,"not","","",112,{"i":[{"n":"self"}],"o":{"n":"ulong4"}}],[11,"not","","",125,{"i":[{"n":"self"}],"o":{"n":"ulong16"}}],[11,"not","","",140,{"i":[{"n":"self"}],"o":{"n":"int16"}}],[11,"not","","",108,{"i":[{"n":"self"}],"o":{"n":"long"}}],[11,"not","","",113,{"i":[{"n":"self"}],"o":{"n":"long2"}}],[11,"not","","",128,{"i":[{"n":"self"}],"o":{"n":"short8"}}],[11,"not","","",119,{"i":[{"n":"self"}],"o":{"n":"uint8"}}],[11,"div","","",111,null],[11,"div","","",147,null],[11,"div","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"div","","",128,null],[11,"div","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"div","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"div","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"div","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"div","","",143,null],[11,"div","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"div","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"div","","",137,null],[11,"div","","",141,null],[11,"div","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"div","","",130,null],[11,"div","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"div","","",107,null],[11,"div","","",95,null],[11,"div","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"div","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"div","","",97,null],[11,"div","","",105,null],[11,"div","","",146,null],[11,"div","","",94,null],[11,"div","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"div","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"div","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"div","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"div","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"div","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"div","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"div","","",139,null],[11,"div","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"div","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"div","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"div","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"div","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"div","","",136,null],[11,"div","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"div","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"div","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"div","","",148,null],[11,"div","","",145,null],[11,"div","","",108,null],[11,"div","","",100,null],[11,"div","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"div","","",104,null],[11,"div","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"div","","",114,null],[11,"div","","",113,null],[11,"div","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"div","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"div","","",133,null],[11,"div","","",140,null],[11,"div","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"div","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"div","","",135,null],[11,"div","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"div","","",103,null],[11,"div","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"div","","",122,null],[11,"div","","",152,null],[11,"div","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"div","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"div","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"div","","",123,null],[11,"div","","",151,null],[11,"div","","",149,null],[11,"div","","",144,null],[11,"div","","",126,null],[11,"div","","",134,null],[11,"div","","",121,null],[11,"div","","",142,null],[11,"div","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"div","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"div","","",98,null],[11,"div","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"div","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"div","","",132,null],[11,"div","","",129,null],[11,"div","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"div","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"div","","",101,null],[11,"div","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"div","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"div","","",109,null],[11,"div","","",120,null],[11,"div","","",117,null],[11,"div","","",110,null],[11,"div","","",119,null],[11,"div","","",153,null],[11,"div","","",106,null],[11,"div","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"div","","",125,null],[11,"div","","",99,null],[11,"div","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"div","","",127,null],[11,"div","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"div","","",124,null],[11,"div","","",112,null],[11,"div","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"div","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"div","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"div","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"div","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"div","","",102,null],[11,"div","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"div","","",116,null],[11,"div","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"div","","",131,null],[11,"div","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"div","","",96,null],[11,"div","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"div","","",118,null],[11,"div","","",150,null],[11,"div","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"div","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"div","","",115,null],[11,"div","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"div","","",138,null],[11,"shr_assign","","",139,null],[11,"shr_assign","","",128,null],[11,"shr_assign","","",103,null],[11,"shr_assign","","",124,null],[11,"shr_assign","","",102,null],[11,"shr_assign","","",99,null],[11,"shr_assign","","",127,null],[11,"shr_assign","","",98,null],[11,"shr_assign","","",110,null],[11,"shr_assign","","",137,null],[11,"shr_assign","","",138,null],[11,"shr_assign","","",104,null],[11,"shr_assign","","",111,null],[11,"shr_assign","","",95,null],[11,"shr_assign","","",118,null],[11,"shr_assign","","",109,null],[11,"shr_assign","","",141,null],[11,"shr_assign","","",133,null],[11,"shr_assign","","",134,null],[11,"shr_assign","","",122,null],[11,"shr_assign","","",117,null],[11,"shr_assign","","",126,null],[11,"shr_assign","","",97,null],[11,"shr_assign","","",116,null],[11,"shr_assign","","",131,null],[11,"shr_assign","","",121,null],[11,"shr_assign","","",135,null],[11,"shr_assign","","",96,null],[11,"shr_assign","","",113,null],[11,"shr_assign","","",112,null],[11,"shr_assign","","",140,null],[11,"shr_assign","","",108,null],[11,"shr_assign","","",115,null],[11,"shr_assign","","",125,null],[11,"shr_assign","","",132,null],[11,"shr_assign","","",120,null],[11,"shr_assign","","",106,null],[11,"shr_assign","","",130,null],[11,"shr_assign","","",107,null],[11,"shr_assign","","",129,null],[11,"shr_assign","","",114,null],[11,"shr_assign","","",105,null],[11,"shr_assign","","",123,null],[11,"shr_assign","","",136,null],[11,"shr_assign","","",119,null],[11,"shr_assign","","",100,null],[11,"shr_assign","","",94,null],[11,"shr_assign","","",101,null],[11,"sum","","",120,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"sum","","",116,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"sum","","",114,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"sum","","",117,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"sum","","",118,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"sum","","",107,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"sum","","",152,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"sum","","",138,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"sum","","",105,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"sum","","",136,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"sum","","",126,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"sum","","",128,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"sum","","",138,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"sum","","",133,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"sum","","",129,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"sum","","",115,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"sum","","",130,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"sum","","",141,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"sum","","",102,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"sum","","",102,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"sum","","",140,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"sum","","",140,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"sum","","",101,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"sum","","",139,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"sum","","",108,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"sum","","",98,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"sum","","",98,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"sum","","",101,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"sum","","",117,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"sum","","",126,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"sum","","",151,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"sum","","",119,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"sum","","",123,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"sum","","",145,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"sum","","",118,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"sum","","",153,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"sum","","",99,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"sum","","",94,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"sum","","",111,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"sum","","",121,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"sum","","",96,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"sum","","",131,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"sum","","",100,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"sum","","",148,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"sum","","",110,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"sum","","",104,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"sum","","",112,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"sum","","",105,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"sum","","",143,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"sum","","",106,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"sum","","",141,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"sum","","",146,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"sum","","",149,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"sum","","",134,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"sum","","",108,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"sum","","",148,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"sum","","",146,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"sum","","",128,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"sum","","",137,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"sum","","",150,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"sum","","",104,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"sum","","",142,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"sum","","",127,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"sum","","",106,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"sum","","",120,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"sum","","",129,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"sum","","",142,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"sum","","",111,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"sum","","",109,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"sum","","",95,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"sum","","",144,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"sum","","",153,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"sum","","",151,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"sum","","",97,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"sum","","",116,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"sum","","",122,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"sum","","",134,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"sum","","",97,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"sum","","",122,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"sum","","",131,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"sum","","",130,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"sum","","",147,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"sum","","",113,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"sum","","",135,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"sum","","",150,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"sum","","",145,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"sum","","",96,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"sum","","",107,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"sum","","",127,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"sum","","",123,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"sum","","",115,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"sum","","",132,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"sum","","",125,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"sum","","",144,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"sum","","",119,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"sum","","",139,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"sum","","",114,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"sum","","",103,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"sum","","",109,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"sum","","",132,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"sum","","",137,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"sum","","",94,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"sum","","",152,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"sum","","",125,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"sum","","",136,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"sum","","",124,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"sum","","",121,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"sum","","",99,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"sum","","",110,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"sum","","",149,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"sum","","",143,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"sum","","",133,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"sum","","",95,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"sum","","",135,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"sum","","",147,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"sum","","",112,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"sum","","",103,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"sum","","",113,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"sum","","",100,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"sum","","",124,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"bitand","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"bitand","","",99,null],[11,"bitand","","",118,null],[11,"bitand","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"bitand","","",133,null],[11,"bitand","","",131,null],[11,"bitand","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"bitand","","",120,null],[11,"bitand","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"bitand","","",112,null],[11,"bitand","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"bitand","","",115,null],[11,"bitand","","",128,null],[11,"bitand","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"bitand","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"bitand","","",105,null],[11,"bitand","","",117,null],[11,"bitand","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"bitand","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"bitand","","",110,null],[11,"bitand","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"bitand","","",111,null],[11,"bitand","","",119,null],[11,"bitand","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"bitand","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"bitand","","",141,null],[11,"bitand","","",130,null],[11,"bitand","","",121,null],[11,"bitand","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"bitand","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"bitand","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"bitand","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"bitand","","",116,null],[11,"bitand","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"bitand","","",97,null],[11,"bitand","","",100,null],[11,"bitand","","",123,null],[11,"bitand","","",134,null],[11,"bitand","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"bitand","","",98,null],[11,"bitand","","",103,null],[11,"bitand","","",132,null],[11,"bitand","","",107,null],[11,"bitand","","",135,null],[11,"bitand","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"bitand","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"bitand","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"bitand","","",94,null],[11,"bitand","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"bitand","","",101,null],[11,"bitand","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"bitand","","",109,null],[11,"bitand","","",124,null],[11,"bitand","","",122,null],[11,"bitand","","",127,null],[11,"bitand","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"bitand","","",140,null],[11,"bitand","","",129,null],[11,"bitand","","",102,null],[11,"bitand","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"bitand","","",136,null],[11,"bitand","","",126,null],[11,"bitand","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"bitand","","",108,null],[11,"bitand","","",138,null],[11,"bitand","","",96,null],[11,"bitand","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"bitand","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"bitand","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"bitand","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"bitand","","",106,null],[11,"bitand","","",137,null],[11,"bitand","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"bitand","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"bitand","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"bitand","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"bitand","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"bitand","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"bitand","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"bitand","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"bitand","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"bitand","","",104,null],[11,"bitand","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"bitand","","",114,null],[11,"bitand","","",125,null],[11,"bitand","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"bitand","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"bitand","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"bitand","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"bitand","","",113,null],[11,"bitand","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"bitand","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"bitand","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"bitand","","",139,null],[11,"bitand","","",95,null],[11,"bitand","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"rem","","",117,null],[11,"rem","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"rem","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"rem","","",143,null],[11,"rem","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"rem","","",151,null],[11,"rem","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"rem","","",146,null],[11,"rem","","",138,null],[11,"rem","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"rem","","",132,null],[11,"rem","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"rem","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"rem","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"rem","","",103,null],[11,"rem","","",112,null],[11,"rem","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"rem","","",113,null],[11,"rem","","",127,null],[11,"rem","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"rem","","",137,null],[11,"rem","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"rem","","",134,null],[11,"rem","","",126,null],[11,"rem","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"rem","","",121,null],[11,"rem","","",110,null],[11,"rem","","",115,null],[11,"rem","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"rem","","",94,null],[11,"rem","","",120,null],[11,"rem","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"rem","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"rem","","",95,null],[11,"rem","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"rem","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"rem","","",145,null],[11,"rem","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"rem","","",135,null],[11,"rem","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"rem","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"rem","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"rem","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"rem","","",123,null],[11,"rem","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"rem","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"rem","","",96,null],[11,"rem","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"rem","","",109,null],[11,"rem","","",97,null],[11,"rem","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"rem","","",139,null],[11,"rem","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"rem","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"rem","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"rem","","",122,null],[11,"rem","","",130,null],[11,"rem","","",111,null],[11,"rem","","",128,null],[11,"rem","","",102,null],[11,"rem","","",99,null],[11,"rem","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"rem","","",101,null],[11,"rem","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"rem","","",119,null],[11,"rem","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"rem","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"rem","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"rem","","",148,null],[11,"rem","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"rem","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"rem","","",118,null],[11,"rem","","",144,null],[11,"rem","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"rem","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"rem","","",104,null],[11,"rem","","",98,null],[11,"rem","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"rem","","",152,null],[11,"rem","","",150,null],[11,"rem","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"rem","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"rem","","",105,null],[11,"rem","","",153,null],[11,"rem","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"rem","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"rem","","",116,null],[11,"rem","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"rem","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"rem","","",142,null],[11,"rem","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"rem","","",129,null],[11,"rem","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"rem","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"rem","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"rem","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"rem","","",106,null],[11,"rem","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"rem","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"rem","","",131,null],[11,"rem","","",141,null],[11,"rem","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"rem","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"rem","","",133,null],[11,"rem","","",147,null],[11,"rem","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"rem","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"rem","","",140,null],[11,"rem","","",107,null],[11,"rem","","",124,null],[11,"rem","","",149,null],[11,"rem","","",125,null],[11,"rem","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"rem","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"rem","","",108,null],[11,"rem","","",114,null],[11,"rem","","",136,null],[11,"rem","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"rem","","",100,null],[11,"rem","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"partial_cmp","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"le","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"gt","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"ge","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"le","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"gt","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"ge","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"le","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"gt","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"ge","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"le","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"gt","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"ge","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"le","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"gt","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"ge","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"le","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"gt","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"ge","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"le","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"gt","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"ge","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"le","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"gt","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"ge","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"le","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"gt","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"ge","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"le","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"gt","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"ge","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"le","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"gt","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"ge","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"le","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"gt","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"ge","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"le","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"gt","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"ge","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"le","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"gt","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"ge","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"le","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"gt","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"ge","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"le","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"gt","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"ge","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"le","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"gt","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"ge","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"le","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"gt","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"ge","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"le","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"gt","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"ge","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"le","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"gt","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"ge","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"le","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"gt","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"ge","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"le","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"gt","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"ge","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"le","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"gt","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"ge","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"le","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"gt","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"ge","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"le","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"gt","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"ge","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"le","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"gt","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"ge","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"le","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"gt","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"ge","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"le","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"gt","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"ge","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"le","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"gt","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"ge","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"le","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"gt","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"ge","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"le","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"gt","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"ge","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"le","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"gt","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"ge","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"le","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"gt","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"ge","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"le","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"gt","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"ge","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"le","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"gt","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"ge","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"le","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"gt","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"ge","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"le","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"gt","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"ge","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"le","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"gt","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"ge","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"le","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"gt","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"ge","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"le","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"gt","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"ge","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"le","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"gt","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"ge","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"le","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"gt","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"ge","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"le","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"gt","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"ge","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"le","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"gt","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"ge","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"le","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"gt","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"ge","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"le","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"gt","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"ge","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"le","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"gt","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"ge","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"le","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"gt","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"ge","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"le","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"gt","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"ge","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"le","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"gt","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"ge","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"le","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"gt","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"ge","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"le","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"gt","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"ge","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"le","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"gt","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"ge","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"le","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"gt","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"ge","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"le","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"gt","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"ge","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"le","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"gt","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"ge","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"le","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"gt","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"ge","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"le","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"gt","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"ge","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"le","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"gt","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"ge","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"le","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"gt","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"ge","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"sub","","",152,null],[11,"sub","","",144,null],[11,"sub","","",130,null],[11,"sub","","",106,null],[11,"sub","","",148,null],[11,"sub","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"sub","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"sub","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"sub","","",119,null],[11,"sub","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"sub","","",104,null],[11,"sub","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"sub","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"sub","","",102,null],[11,"sub","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"sub","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"sub","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"sub","","",138,null],[11,"sub","","",140,null],[11,"sub","","",118,null],[11,"sub","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"sub","","",143,null],[11,"sub","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"sub","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"sub","","",115,null],[11,"sub","","",149,null],[11,"sub","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"sub","","",131,null],[11,"sub","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"sub","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"sub","","",139,null],[11,"sub","","",97,null],[11,"sub","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"sub","","",121,null],[11,"sub","","",110,null],[11,"sub","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"sub","","",146,null],[11,"sub","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"sub","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"sub","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"sub","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"sub","","",107,null],[11,"sub","","",120,null],[11,"sub","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"sub","","",129,null],[11,"sub","","",109,null],[11,"sub","","",105,null],[11,"sub","","",113,null],[11,"sub","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"sub","","",117,null],[11,"sub","","",123,null],[11,"sub","","",151,null],[11,"sub","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"sub","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"sub","","",100,null],[11,"sub","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"sub","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"sub","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"sub","","",132,null],[11,"sub","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"sub","","",147,null],[11,"sub","","",108,null],[11,"sub","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"sub","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"sub","","",136,null],[11,"sub","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"sub","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"sub","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"sub","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"sub","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"sub","","",116,null],[11,"sub","","",128,null],[11,"sub","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"sub","","",137,null],[11,"sub","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"sub","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"sub","","",127,null],[11,"sub","","",153,null],[11,"sub","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"sub","","",134,null],[11,"sub","","",150,null],[11,"sub","","",98,null],[11,"sub","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"sub","","",94,null],[11,"sub","","",114,null],[11,"sub","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"sub","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"sub","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"sub","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"sub","","",99,null],[11,"sub","","",111,null],[11,"sub","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"sub","","",95,null],[11,"sub","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"sub","","",133,null],[11,"sub","","",125,null],[11,"sub","","",135,null],[11,"sub","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"sub","","",126,null],[11,"sub","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"sub","","",96,null],[11,"sub","","",112,null],[11,"sub","","",103,null],[11,"sub","","",142,null],[11,"sub","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"sub","","",141,null],[11,"sub","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"sub","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"sub","","",122,null],[11,"sub","","",124,null],[11,"sub","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"sub","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"sub","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"sub","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"sub","","",145,null],[11,"sub","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"sub","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"sub","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"sub","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"sub","","",101,null],[11,"div_assign","","",146,null],[11,"div_assign","","",98,null],[11,"div_assign","","",135,null],[11,"div_assign","","",127,null],[11,"div_assign","","",153,null],[11,"div_assign","","",116,null],[11,"div_assign","","",95,null],[11,"div_assign","","",143,null],[11,"div_assign","","",145,null],[11,"div_assign","","",102,null],[11,"div_assign","","",152,null],[11,"div_assign","","",129,null],[11,"div_assign","","",96,null],[11,"div_assign","","",124,null],[11,"div_assign","","",94,null],[11,"div_assign","","",118,null],[11,"div_assign","","",140,null],[11,"div_assign","","",137,null],[11,"div_assign","","",101,null],[11,"div_assign","","",108,null],[11,"div_assign","","",113,null],[11,"div_assign","","",97,null],[11,"div_assign","","",142,null],[11,"div_assign","","",138,null],[11,"div_assign","","",112,null],[11,"div_assign","","",134,null],[11,"div_assign","","",121,null],[11,"div_assign","","",106,null],[11,"div_assign","","",104,null],[11,"div_assign","","",99,null],[11,"div_assign","","",123,null],[11,"div_assign","","",147,null],[11,"div_assign","","",133,null],[11,"div_assign","","",117,null],[11,"div_assign","","",130,null],[11,"div_assign","","",125,null],[11,"div_assign","","",126,null],[11,"div_assign","","",111,null],[11,"div_assign","","",107,null],[11,"div_assign","","",114,null],[11,"div_assign","","",103,null],[11,"div_assign","","",120,null],[11,"div_assign","","",148,null],[11,"div_assign","","",131,null],[11,"div_assign","","",136,null],[11,"div_assign","","",132,null],[11,"div_assign","","",100,null],[11,"div_assign","","",122,null],[11,"div_assign","","",115,null],[11,"div_assign","","",119,null],[11,"div_assign","","",149,null],[11,"div_assign","","",139,null],[11,"div_assign","","",151,null],[11,"div_assign","","",109,null],[11,"div_assign","","",110,null],[11,"div_assign","","",150,null],[11,"div_assign","","",141,null],[11,"div_assign","","",105,null],[11,"div_assign","","",128,null],[11,"div_assign","","",144,null],[11,"mul_assign","","",115,null],[11,"mul_assign","","",147,null],[11,"mul_assign","","",152,null],[11,"mul_assign","","",128,null],[11,"mul_assign","","",125,null],[11,"mul_assign","","",113,null],[11,"mul_assign","","",119,null],[11,"mul_assign","","",143,null],[11,"mul_assign","","",136,null],[11,"mul_assign","","",146,null],[11,"mul_assign","","",145,null],[11,"mul_assign","","",118,null],[11,"mul_assign","","",110,null],[11,"mul_assign","","",94,null],[11,"mul_assign","","",142,null],[11,"mul_assign","","",121,null],[11,"mul_assign","","",126,null],[11,"mul_assign","","",144,null],[11,"mul_assign","","",131,null],[11,"mul_assign","","",104,null],[11,"mul_assign","","",139,null],[11,"mul_assign","","",124,null],[11,"mul_assign","","",106,null],[11,"mul_assign","","",127,null],[11,"mul_assign","","",137,null],[11,"mul_assign","","",99,null],[11,"mul_assign","","",107,null],[11,"mul_assign","","",141,null],[11,"mul_assign","","",132,null],[11,"mul_assign","","",103,null],[11,"mul_assign","","",111,null],[11,"mul_assign","","",129,null],[11,"mul_assign","","",148,null],[11,"mul_assign","","",151,null],[11,"mul_assign","","",149,null],[11,"mul_assign","","",95,null],[11,"mul_assign","","",98,null],[11,"mul_assign","","",105,null],[11,"mul_assign","","",150,null],[11,"mul_assign","","",123,null],[11,"mul_assign","","",109,null],[11,"mul_assign","","",134,null],[11,"mul_assign","","",140,null],[11,"mul_assign","","",112,null],[11,"mul_assign","","",108,null],[11,"mul_assign","","",130,null],[11,"mul_assign","","",101,null],[11,"mul_assign","","",153,null],[11,"mul_assign","","",102,null],[11,"mul_assign","","",122,null],[11,"mul_assign","","",120,null],[11,"mul_assign","","",116,null],[11,"mul_assign","","",135,null],[11,"mul_assign","","",100,null],[11,"mul_assign","","",138,null],[11,"mul_assign","","",96,null],[11,"mul_assign","","",114,null],[11,"mul_assign","","",97,null],[11,"mul_assign","","",117,null],[11,"mul_assign","","",133,null],[11,"hash","","",109,null],[11,"hash","","",115,null],[11,"hash","","",110,null],[11,"hash","","",119,null],[11,"hash","","",106,null],[11,"hash","","",97,null],[11,"hash","","",118,null],[11,"hash","","",133,null],[11,"hash","","",117,null],[11,"hash","","",126,null],[11,"hash","","",134,null],[11,"hash","","",122,null],[11,"hash","","",141,null],[11,"hash","","",105,null],[11,"hash","","",123,null],[11,"hash","","",135,null],[11,"hash","","",137,null],[11,"hash","","",100,null],[11,"hash","","",128,null],[11,"hash","","",96,null],[11,"hash","","",113,null],[11,"hash","","",136,null],[11,"hash","","",99,null],[11,"hash","","",124,null],[11,"hash","","",114,null],[11,"hash","","",103,null],[11,"hash","","",127,null],[11,"hash","","",120,null],[11,"hash","","",131,null],[11,"hash","","",104,null],[11,"hash","","",140,null],[11,"hash","","",102,null],[11,"hash","","",95,null],[11,"hash","","",108,null],[11,"hash","","",138,null],[11,"hash","","",107,null],[11,"hash","","",116,null],[11,"hash","","",111,null],[11,"hash","","",94,null],[11,"hash","","",98,null],[11,"hash","","",130,null],[11,"hash","","",129,null],[11,"hash","","",132,null],[11,"hash","","",101,null],[11,"hash","","",125,null],[11,"hash","","",112,null],[11,"hash","","",139,null],[11,"hash","","",121,null],[11,"zero","","",132,{"o":{"n":"short"}}],[11,"is_zero","","",132,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",109,{"o":{"n":"int8"}}],[11,"is_zero","","",109,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",135,{"o":{"n":"ushort4"}}],[11,"is_zero","","",135,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",120,{"o":{"n":"uint3"}}],[11,"is_zero","","",120,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",107,{"o":{"n":"char3"}}],[11,"is_zero","","",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",144,{"o":{"n":"float"}}],[11,"is_zero","","",144,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",140,{"o":{"n":"int16"}}],[11,"is_zero","","",140,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",102,{"o":{"n":"uchar3"}}],[11,"is_zero","","",102,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",134,{"o":{"n":"char8"}}],[11,"is_zero","","",134,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",116,{"o":{"n":"uchar16"}}],[11,"is_zero","","",116,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",101,{"o":{"n":"uchar"}}],[11,"is_zero","","",101,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",98,{"o":{"n":"uint2"}}],[11,"is_zero","","",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",103,{"o":{"n":"ushort2"}}],[11,"is_zero","","",103,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",131,{"o":{"n":"ulong8"}}],[11,"is_zero","","",131,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",100,{"o":{"n":"uchar2"}}],[11,"is_zero","","",100,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",146,{"o":{"n":"double"}}],[11,"is_zero","","",146,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",114,{"o":{"n":"uint4"}}],[11,"is_zero","","",114,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",125,{"o":{"n":"ulong16"}}],[11,"is_zero","","",125,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",119,{"o":{"n":"uint8"}}],[11,"is_zero","","",119,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",127,{"o":{"n":"long8"}}],[11,"is_zero","","",127,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",143,{"o":{"n":"float3"}}],[11,"is_zero","","",143,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",110,{"o":{"n":"int4"}}],[11,"is_zero","","",110,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",111,{"o":{"n":"long3"}}],[11,"is_zero","","",111,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",124,{"o":{"n":"uchar8"}}],[11,"is_zero","","",124,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",121,{"o":{"n":"short16"}}],[11,"is_zero","","",121,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",129,{"o":{"n":"uint"}}],[11,"is_zero","","",129,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",142,{"o":{"n":"double2"}}],[11,"is_zero","","",142,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",106,{"o":{"n":"int2"}}],[11,"is_zero","","",106,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",117,{"o":{"n":"char2"}}],[11,"is_zero","","",117,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",151,{"o":{"n":"double4"}}],[11,"is_zero","","",151,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",138,{"o":{"n":"int3"}}],[11,"is_zero","","",138,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",99,{"o":{"n":"ulong3"}}],[11,"is_zero","","",99,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",104,{"o":{"n":"long16"}}],[11,"is_zero","","",104,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",123,{"o":{"n":"ushort8"}}],[11,"is_zero","","",123,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",118,{"o":{"n":"ulong"}}],[11,"is_zero","","",118,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",126,{"o":{"n":"ulong2"}}],[11,"is_zero","","",126,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",105,{"o":{"n":"char4"}}],[11,"is_zero","","",105,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",122,{"o":{"n":"short2"}}],[11,"is_zero","","",122,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",147,{"o":{"n":"float4"}}],[11,"is_zero","","",147,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",108,{"o":{"n":"long"}}],[11,"is_zero","","",108,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",149,{"o":{"n":"double3"}}],[11,"is_zero","","",149,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",115,{"o":{"n":"uint16"}}],[11,"is_zero","","",115,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",141,{"o":{"n":"short3"}}],[11,"is_zero","","",141,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",97,{"o":{"n":"ushort"}}],[11,"is_zero","","",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",137,{"o":{"n":"short4"}}],[11,"is_zero","","",137,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",113,{"o":{"n":"long2"}}],[11,"is_zero","","",113,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",133,{"o":{"n":"long4"}}],[11,"is_zero","","",133,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",130,{"o":{"n":"uchar4"}}],[11,"is_zero","","",130,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",153,{"o":{"n":"float8"}}],[11,"is_zero","","",153,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",139,{"o":{"n":"char16"}}],[11,"is_zero","","",139,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",94,{"o":{"n":"char"}}],[11,"is_zero","","",94,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",148,{"o":{"n":"double16"}}],[11,"is_zero","","",148,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",136,{"o":{"n":"ushort3"}}],[11,"is_zero","","",136,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",150,{"o":{"n":"float16"}}],[11,"is_zero","","",150,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",145,{"o":{"n":"float2"}}],[11,"is_zero","","",145,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",96,{"o":{"n":"ushort16"}}],[11,"is_zero","","",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",95,{"o":{"n":"int"}}],[11,"is_zero","","",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",128,{"o":{"n":"short8"}}],[11,"is_zero","","",128,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",112,{"o":{"n":"ulong4"}}],[11,"is_zero","","",112,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",152,{"o":{"n":"double8"}}],[11,"is_zero","","",152,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"rem_assign","","",104,null],[11,"rem_assign","","",133,null],[11,"rem_assign","","",102,null],[11,"rem_assign","","",139,null],[11,"rem_assign","","",109,null],[11,"rem_assign","","",151,null],[11,"rem_assign","","",105,null],[11,"rem_assign","","",120,null],[11,"rem_assign","","",99,null],[11,"rem_assign","","",121,null],[11,"rem_assign","","",141,null],[11,"rem_assign","","",136,null],[11,"rem_assign","","",118,null],[11,"rem_assign","","",114,null],[11,"rem_assign","","",94,null],[11,"rem_assign","","",143,null],[11,"rem_assign","","",148,null],[11,"rem_assign","","",106,null],[11,"rem_assign","","",113,null],[11,"rem_assign","","",97,null],[11,"rem_assign","","",100,null],[11,"rem_assign","","",117,null],[11,"rem_assign","","",149,null],[11,"rem_assign","","",110,null],[11,"rem_assign","","",112,null],[11,"rem_assign","","",108,null],[11,"rem_assign","","",142,null],[11,"rem_assign","","",140,null],[11,"rem_assign","","",116,null],[11,"rem_assign","","",126,null],[11,"rem_assign","","",95,null],[11,"rem_assign","","",131,null],[11,"rem_assign","","",96,null],[11,"rem_assign","","",153,null],[11,"rem_assign","","",137,null],[11,"rem_assign","","",129,null],[11,"rem_assign","","",111,null],[11,"rem_assign","","",146,null],[11,"rem_assign","","",147,null],[11,"rem_assign","","",98,null],[11,"rem_assign","","",107,null],[11,"rem_assign","","",134,null],[11,"rem_assign","","",115,null],[11,"rem_assign","","",128,null],[11,"rem_assign","","",122,null],[11,"rem_assign","","",145,null],[11,"rem_assign","","",130,null],[11,"rem_assign","","",127,null],[11,"rem_assign","","",125,null],[11,"rem_assign","","",152,null],[11,"rem_assign","","",103,null],[11,"rem_assign","","",101,null],[11,"rem_assign","","",124,null],[11,"rem_assign","","",135,null],[11,"rem_assign","","",150,null],[11,"rem_assign","","",123,null],[11,"rem_assign","","",132,null],[11,"rem_assign","","",138,null],[11,"rem_assign","","",144,null],[11,"rem_assign","","",119,null],[11,"mul","","",94,null],[11,"mul","","",105,null],[11,"mul","","",143,null],[11,"mul","","",151,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"mul","","",117,null],[11,"mul","","",97,null],[11,"mul","","",126,null],[11,"mul","","",133,null],[11,"mul","","",108,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"mul","","",104,null],[11,"mul","","",137,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"mul","","",147,null],[11,"mul","","",95,null],[11,"mul","","",140,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"mul","","",100,null],[11,"mul","","",142,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"mul","","",147,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"mul","","",108,null],[11,"mul","","",135,null],[11,"mul","","",110,null],[11,"mul","","",107,null],[11,"mul","","",115,null],[11,"mul","","",132,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"mul","","",152,null],[11,"mul","","",149,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"mul","","",100,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"mul","","",124,null],[11,"mul","","",101,null],[11,"mul","","",115,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"mul","","",101,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"mul","","",146,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"mul","","",114,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"mul","","",131,null],[11,"mul","","",142,null],[11,"mul","","",149,null],[11,"mul","","",102,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"mul","","",148,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"mul","","",144,null],[11,"mul","","",126,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"mul","","",141,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"mul","","",127,null],[11,"mul","","",120,null],[11,"mul","","",136,null],[11,"mul","","",121,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"mul","","",128,null],[11,"mul","","",132,null],[11,"mul","","",124,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"mul","","",116,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"mul","","",123,null],[11,"mul","","",151,null],[11,"mul","","",96,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"mul","","",134,null],[11,"mul","","",138,null],[11,"mul","","",123,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"mul","","",99,null],[11,"mul","","",141,null],[11,"mul","","",102,null],[11,"mul","","",122,null],[11,"mul","","",94,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"mul","","",119,null],[11,"mul","","",148,null],[11,"mul","","",125,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"mul","","",145,null],[11,"mul","","",137,null],[11,"mul","","",138,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"mul","","",136,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"mul","","",98,null],[11,"mul","","",104,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"mul","","",114,null],[11,"mul","","",150,null],[11,"mul","","",116,null],[11,"mul","","",128,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"mul","","",127,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"mul","","",152,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"mul","","",103,null],[11,"mul","","",125,null],[11,"mul","","",117,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"mul","","",130,null],[11,"mul","","",121,null],[11,"mul","","",105,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"mul","","",118,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"mul","","",135,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"mul","","",130,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"mul","","",99,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"mul","","",112,null],[11,"mul","","",146,null],[11,"mul","","",145,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"mul","","",139,null],[11,"mul","","",140,null],[11,"mul","","",150,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"mul","","",133,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"mul","","",134,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"mul","","",129,null],[11,"mul","","",106,null],[11,"mul","","",112,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"mul","","",103,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"mul","","",113,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"mul","","",106,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"mul","","",109,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"mul","","",143,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"mul","","",118,null],[11,"mul","","",122,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"mul","","",144,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"mul","","",96,null],[11,"mul","","",113,null],[11,"mul","","",109,null],[11,"mul","","",95,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"mul","","",139,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"mul","","",97,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"mul","","",153,null],[11,"mul","","",98,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"mul","","",120,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"mul","","",111,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"mul","","",119,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"mul","","",129,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"mul","","",111,null],[11,"mul","","",153,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"mul","","",107,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"mul","","",110,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"mul","","",131,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"new","","",117,{"i":[{"n":"i8"},{"n":"i8"}],"o":{"n":"char2"}}],[11,"splat","","",117,{"i":[{"n":"i8"}],"o":{"n":"char2"}}],[11,"zero","","",117,{"o":{"n":"char2"}}],[11,"is_zero","","",117,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",117,{"o":{"n":"char2"}}],[11,"new","","",107,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char3"}}],[11,"splat","","",107,{"i":[{"n":"i8"}],"o":{"n":"char3"}}],[11,"zero","","",107,{"o":{"n":"char3"}}],[11,"is_zero","","",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",107,{"o":{"n":"char3"}}],[11,"new","","",105,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char4"}}],[11,"splat","","",105,{"i":[{"n":"i8"}],"o":{"n":"char4"}}],[11,"zero","","",105,{"o":{"n":"char4"}}],[11,"is_zero","","",105,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",105,{"o":{"n":"char4"}}],[11,"new","","",134,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char8"}}],[11,"splat","","",134,{"i":[{"n":"i8"}],"o":{"n":"char8"}}],[11,"zero","","",134,{"o":{"n":"char8"}}],[11,"is_zero","","",134,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",134,{"o":{"n":"char8"}}],[11,"new","","",139,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char16"}}],[11,"splat","","",139,{"i":[{"n":"i8"}],"o":{"n":"char16"}}],[11,"zero","","",139,{"o":{"n":"char16"}}],[11,"is_zero","","",139,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",139,{"o":{"n":"char16"}}],[11,"new","","",101,{"i":[{"n":"u8"}],"o":{"n":"uchar"}}],[11,"splat","","",101,{"i":[{"n":"u8"}],"o":{"n":"uchar"}}],[11,"zero","","",101,{"o":{"n":"uchar"}}],[11,"is_zero","","",101,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",101,{"o":{"n":"uchar"}}],[11,"new","","",100,{"i":[{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar2"}}],[11,"splat","","",100,{"i":[{"n":"u8"}],"o":{"n":"uchar2"}}],[11,"zero","","",100,{"o":{"n":"uchar2"}}],[11,"is_zero","","",100,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",100,{"o":{"n":"uchar2"}}],[11,"new","","",102,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar3"}}],[11,"splat","","",102,{"i":[{"n":"u8"}],"o":{"n":"uchar3"}}],[11,"zero","","",102,{"o":{"n":"uchar3"}}],[11,"is_zero","","",102,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",102,{"o":{"n":"uchar3"}}],[11,"new","","",130,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar4"}}],[11,"splat","","",130,{"i":[{"n":"u8"}],"o":{"n":"uchar4"}}],[11,"zero","","",130,{"o":{"n":"uchar4"}}],[11,"is_zero","","",130,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",130,{"o":{"n":"uchar4"}}],[11,"new","","",124,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar8"}}],[11,"splat","","",124,{"i":[{"n":"u8"}],"o":{"n":"uchar8"}}],[11,"zero","","",124,{"o":{"n":"uchar8"}}],[11,"is_zero","","",124,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",124,{"o":{"n":"uchar8"}}],[11,"new","","",116,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar16"}}],[11,"splat","","",116,{"i":[{"n":"u8"}],"o":{"n":"uchar16"}}],[11,"zero","","",116,{"o":{"n":"uchar16"}}],[11,"is_zero","","",116,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",116,{"o":{"n":"uchar16"}}],[11,"new","","",132,{"i":[{"n":"i16"}],"o":{"n":"short"}}],[11,"splat","","",132,{"i":[{"n":"i16"}],"o":{"n":"short"}}],[11,"zero","","",132,{"o":{"n":"short"}}],[11,"is_zero","","",132,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",132,{"o":{"n":"short"}}],[11,"new","","",122,{"i":[{"n":"i16"},{"n":"i16"}],"o":{"n":"short2"}}],[11,"splat","","",122,{"i":[{"n":"i16"}],"o":{"n":"short2"}}],[11,"zero","","",122,{"o":{"n":"short2"}}],[11,"is_zero","","",122,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",122,{"o":{"n":"short2"}}],[11,"new","","",141,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short3"}}],[11,"splat","","",141,{"i":[{"n":"i16"}],"o":{"n":"short3"}}],[11,"zero","","",141,{"o":{"n":"short3"}}],[11,"is_zero","","",141,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",141,{"o":{"n":"short3"}}],[11,"new","","",137,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short4"}}],[11,"splat","","",137,{"i":[{"n":"i16"}],"o":{"n":"short4"}}],[11,"zero","","",137,{"o":{"n":"short4"}}],[11,"is_zero","","",137,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",137,{"o":{"n":"short4"}}],[11,"new","","",128,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short8"}}],[11,"splat","","",128,{"i":[{"n":"i16"}],"o":{"n":"short8"}}],[11,"zero","","",128,{"o":{"n":"short8"}}],[11,"is_zero","","",128,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",128,{"o":{"n":"short8"}}],[11,"new","","",121,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short16"}}],[11,"splat","","",121,{"i":[{"n":"i16"}],"o":{"n":"short16"}}],[11,"zero","","",121,{"o":{"n":"short16"}}],[11,"is_zero","","",121,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",121,{"o":{"n":"short16"}}],[11,"new","","",97,{"i":[{"n":"u16"}],"o":{"n":"ushort"}}],[11,"splat","","",97,{"i":[{"n":"u16"}],"o":{"n":"ushort"}}],[11,"zero","","",97,{"o":{"n":"ushort"}}],[11,"is_zero","","",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",97,{"o":{"n":"ushort"}}],[11,"new","","",103,{"i":[{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort2"}}],[11,"splat","","",103,{"i":[{"n":"u16"}],"o":{"n":"ushort2"}}],[11,"zero","","",103,{"o":{"n":"ushort2"}}],[11,"is_zero","","",103,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",103,{"o":{"n":"ushort2"}}],[11,"new","","",136,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort3"}}],[11,"splat","","",136,{"i":[{"n":"u16"}],"o":{"n":"ushort3"}}],[11,"zero","","",136,{"o":{"n":"ushort3"}}],[11,"is_zero","","",136,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",136,{"o":{"n":"ushort3"}}],[11,"new","","",135,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort4"}}],[11,"splat","","",135,{"i":[{"n":"u16"}],"o":{"n":"ushort4"}}],[11,"zero","","",135,{"o":{"n":"ushort4"}}],[11,"is_zero","","",135,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",135,{"o":{"n":"ushort4"}}],[11,"new","","",123,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort8"}}],[11,"splat","","",123,{"i":[{"n":"u16"}],"o":{"n":"ushort8"}}],[11,"zero","","",123,{"o":{"n":"ushort8"}}],[11,"is_zero","","",123,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",123,{"o":{"n":"ushort8"}}],[11,"new","","",96,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort16"}}],[11,"splat","","",96,{"i":[{"n":"u16"}],"o":{"n":"ushort16"}}],[11,"zero","","",96,{"o":{"n":"ushort16"}}],[11,"is_zero","","",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",96,{"o":{"n":"ushort16"}}],[11,"new","","",95,{"i":[{"n":"i32"}],"o":{"n":"int"}}],[11,"splat","","",95,{"i":[{"n":"i32"}],"o":{"n":"int"}}],[11,"zero","","",95,{"o":{"n":"int"}}],[11,"is_zero","","",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",95,{"o":{"n":"int"}}],[11,"new","","",106,{"i":[{"n":"i32"},{"n":"i32"}],"o":{"n":"int2"}}],[11,"splat","","",106,{"i":[{"n":"i32"}],"o":{"n":"int2"}}],[11,"zero","","",106,{"o":{"n":"int2"}}],[11,"is_zero","","",106,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",106,{"o":{"n":"int2"}}],[11,"new","","",138,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int3"}}],[11,"splat","","",138,{"i":[{"n":"i32"}],"o":{"n":"int3"}}],[11,"zero","","",138,{"o":{"n":"int3"}}],[11,"is_zero","","",138,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",138,{"o":{"n":"int3"}}],[11,"new","","",110,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int4"}}],[11,"splat","","",110,{"i":[{"n":"i32"}],"o":{"n":"int4"}}],[11,"zero","","",110,{"o":{"n":"int4"}}],[11,"is_zero","","",110,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",110,{"o":{"n":"int4"}}],[11,"new","","",109,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int8"}}],[11,"splat","","",109,{"i":[{"n":"i32"}],"o":{"n":"int8"}}],[11,"zero","","",109,{"o":{"n":"int8"}}],[11,"is_zero","","",109,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",109,{"o":{"n":"int8"}}],[11,"new","","",140,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int16"}}],[11,"splat","","",140,{"i":[{"n":"i32"}],"o":{"n":"int16"}}],[11,"zero","","",140,{"o":{"n":"int16"}}],[11,"is_zero","","",140,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",140,{"o":{"n":"int16"}}],[11,"new","","",129,{"i":[{"n":"u32"}],"o":{"n":"uint"}}],[11,"splat","","",129,{"i":[{"n":"u32"}],"o":{"n":"uint"}}],[11,"zero","","",129,{"o":{"n":"uint"}}],[11,"is_zero","","",129,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",129,{"o":{"n":"uint"}}],[11,"new","","",98,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"uint2"}}],[11,"splat","","",98,{"i":[{"n":"u32"}],"o":{"n":"uint2"}}],[11,"zero","","",98,{"o":{"n":"uint2"}}],[11,"is_zero","","",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",98,{"o":{"n":"uint2"}}],[11,"new","","",120,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"uint3"}}],[11,"splat","","",120,{"i":[{"n":"u32"}],"o":{"n":"uint3"}}],[11,"zero","","",120,{"o":{"n":"uint3"}}],[11,"is_zero","","",120,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",120,{"o":{"n":"uint3"}}],[11,"new","","",114,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"uint4"}}],[11,"splat","","",114,{"i":[{"n":"u32"}],"o":{"n":"uint4"}}],[11,"zero","","",114,{"o":{"n":"uint4"}}],[11,"is_zero","","",114,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",114,{"o":{"n":"uint4"}}],[11,"new","","",119,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"uint8"}}],[11,"splat","","",119,{"i":[{"n":"i8"}],"o":{"n":"uint8"}}],[11,"zero","","",119,{"o":{"n":"uint8"}}],[11,"is_zero","","",119,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",119,{"o":{"n":"uint8"}}],[11,"new","","",115,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"uint16"}}],[11,"splat","","",115,{"i":[{"n":"u32"}],"o":{"n":"uint16"}}],[11,"zero","","",115,{"o":{"n":"uint16"}}],[11,"is_zero","","",115,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",115,{"o":{"n":"uint16"}}],[11,"new","","",108,{"i":[{"n":"i64"}],"o":{"n":"long"}}],[11,"splat","","",108,{"i":[{"n":"i64"}],"o":{"n":"long"}}],[11,"zero","","",108,{"o":{"n":"long"}}],[11,"is_zero","","",108,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",108,{"o":{"n":"long"}}],[11,"new","","",113,{"i":[{"n":"i64"},{"n":"i64"}],"o":{"n":"long2"}}],[11,"splat","","",113,{"i":[{"n":"i64"}],"o":{"n":"long2"}}],[11,"zero","","",113,{"o":{"n":"long2"}}],[11,"is_zero","","",113,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",113,{"o":{"n":"long2"}}],[11,"new","","",111,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long3"}}],[11,"splat","","",111,{"i":[{"n":"i64"}],"o":{"n":"long3"}}],[11,"zero","","",111,{"o":{"n":"long3"}}],[11,"is_zero","","",111,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",111,{"o":{"n":"long3"}}],[11,"new","","",133,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long4"}}],[11,"splat","","",133,{"i":[{"n":"i64"}],"o":{"n":"long4"}}],[11,"zero","","",133,{"o":{"n":"long4"}}],[11,"is_zero","","",133,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",133,{"o":{"n":"long4"}}],[11,"new","","",127,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long8"}}],[11,"splat","","",127,{"i":[{"n":"i64"}],"o":{"n":"long8"}}],[11,"zero","","",127,{"o":{"n":"long8"}}],[11,"is_zero","","",127,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",127,{"o":{"n":"long8"}}],[11,"new","","",104,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long16"}}],[11,"splat","","",104,{"i":[{"n":"i64"}],"o":{"n":"long16"}}],[11,"zero","","",104,{"o":{"n":"long16"}}],[11,"is_zero","","",104,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",104,{"o":{"n":"long16"}}],[11,"new","","",118,{"i":[{"n":"u64"}],"o":{"n":"ulong"}}],[11,"splat","","",118,{"i":[{"n":"u64"}],"o":{"n":"ulong"}}],[11,"zero","","",118,{"o":{"n":"ulong"}}],[11,"is_zero","","",118,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",118,{"o":{"n":"ulong"}}],[11,"new","","",126,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong2"}}],[11,"splat","","",126,{"i":[{"n":"u64"}],"o":{"n":"ulong2"}}],[11,"zero","","",126,{"o":{"n":"ulong2"}}],[11,"is_zero","","",126,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",126,{"o":{"n":"ulong2"}}],[11,"new","","",99,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong3"}}],[11,"splat","","",99,{"i":[{"n":"u64"}],"o":{"n":"ulong3"}}],[11,"zero","","",99,{"o":{"n":"ulong3"}}],[11,"is_zero","","",99,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",99,{"o":{"n":"ulong3"}}],[11,"new","","",112,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong4"}}],[11,"splat","","",112,{"i":[{"n":"u64"}],"o":{"n":"ulong4"}}],[11,"zero","","",112,{"o":{"n":"ulong4"}}],[11,"is_zero","","",112,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",112,{"o":{"n":"ulong4"}}],[11,"new","","",131,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong8"}}],[11,"splat","","",131,{"i":[{"n":"u64"}],"o":{"n":"ulong8"}}],[11,"zero","","",131,{"o":{"n":"ulong8"}}],[11,"is_zero","","",131,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",131,{"o":{"n":"ulong8"}}],[11,"new","","",125,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong16"}}],[11,"splat","","",125,{"i":[{"n":"u64"}],"o":{"n":"ulong16"}}],[11,"zero","","",125,{"o":{"n":"ulong16"}}],[11,"is_zero","","",125,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",125,{"o":{"n":"ulong16"}}],[11,"new","","",144,{"i":[{"n":"f32"}],"o":{"n":"float"}}],[11,"splat","","",144,{"i":[{"n":"f32"}],"o":{"n":"float"}}],[11,"zero","","",144,{"o":{"n":"float"}}],[11,"is_zero","","",144,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",144,{"o":{"n":"float"}}],[11,"new","","",145,{"i":[{"n":"f32"},{"n":"f32"}],"o":{"n":"float2"}}],[11,"splat","","",145,{"i":[{"n":"f32"}],"o":{"n":"float2"}}],[11,"zero","","",145,{"o":{"n":"float2"}}],[11,"is_zero","","",145,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",145,{"o":{"n":"float2"}}],[11,"new","","",143,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float3"}}],[11,"splat","","",143,{"i":[{"n":"f32"}],"o":{"n":"float3"}}],[11,"zero","","",143,{"o":{"n":"float3"}}],[11,"is_zero","","",143,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",143,{"o":{"n":"float3"}}],[11,"new","","",147,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float4"}}],[11,"splat","","",147,{"i":[{"n":"f32"}],"o":{"n":"float4"}}],[11,"zero","","",147,{"o":{"n":"float4"}}],[11,"is_zero","","",147,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",147,{"o":{"n":"float4"}}],[11,"new","","",153,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float8"}}],[11,"splat","","",153,{"i":[{"n":"f32"}],"o":{"n":"float8"}}],[11,"zero","","",153,{"o":{"n":"float8"}}],[11,"is_zero","","",153,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",153,{"o":{"n":"float8"}}],[11,"new","","",150,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float16"}}],[11,"splat","","",150,{"i":[{"n":"f32"}],"o":{"n":"float16"}}],[11,"zero","","",150,{"o":{"n":"float16"}}],[11,"is_zero","","",150,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",150,{"o":{"n":"float16"}}],[11,"new","","",146,{"i":[{"n":"f64"}],"o":{"n":"double"}}],[11,"splat","","",146,{"i":[{"n":"f64"}],"o":{"n":"double"}}],[11,"zero","","",146,{"o":{"n":"double"}}],[11,"is_zero","","",146,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",146,{"o":{"n":"double"}}],[11,"new","","",142,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"double2"}}],[11,"splat","","",142,{"i":[{"n":"f64"}],"o":{"n":"double2"}}],[11,"zero","","",142,{"o":{"n":"double2"}}],[11,"is_zero","","",142,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",142,{"o":{"n":"double2"}}],[11,"new","","",149,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double3"}}],[11,"splat","","",149,{"i":[{"n":"f64"}],"o":{"n":"double3"}}],[11,"zero","","",149,{"o":{"n":"double3"}}],[11,"is_zero","","",149,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",149,{"o":{"n":"double3"}}],[11,"new","","",151,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double4"}}],[11,"splat","","",151,{"i":[{"n":"f64"}],"o":{"n":"double4"}}],[11,"zero","","",151,{"o":{"n":"double4"}}],[11,"is_zero","","",151,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",151,{"o":{"n":"double4"}}],[11,"new","","",152,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double8"}}],[11,"splat","","",152,{"i":[{"n":"f64"}],"o":{"n":"double8"}}],[11,"zero","","",152,{"o":{"n":"double8"}}],[11,"is_zero","","",152,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",152,{"o":{"n":"double8"}}],[11,"new","","",148,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double16"}}],[11,"splat","","",148,{"i":[{"n":"f64"}],"o":{"n":"double16"}}],[11,"zero","","",148,{"o":{"n":"double16"}}],[11,"is_zero","","",148,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",148,{"o":{"n":"double16"}}]],"paths":[[4,"Status"],[4,"GlTextureTarget"],[4,"ClGlObjectType"],[4,"ImageChannelOrder"],[4,"ImageChannelDataType"],[4,"Cbool"],[4,"Polling"],[4,"PlatformInfo"],[4,"DeviceInfo"],[4,"DeviceMemCacheType"],[4,"DeviceLocalMemType"],[4,"ContextInfo"],[4,"GlContextInfo"],[4,"ContextProperty"],[4,"ContextInfoOrPropertiesPointerType"],[4,"DevicePartitionProperty"],[4,"CommandQueueInfo"],[4,"ChannelType"],[4,"MemObjectType"],[4,"MemInfo"],[4,"ImageInfo"],[4,"AddressingMode"],[4,"FilterMode"],[4,"SamplerInfo"],[4,"ProgramInfo"],[4,"ProgramBuildInfo"],[4,"ProgramBuildStatus"],[4,"KernelInfo"],[4,"KernelArgInfo"],[4,"KernelArgAddressQualifier"],[4,"KernelArgAccessQualifier"],[4,"KernelWorkGroupInfo"],[4,"EventInfo"],[4,"CommandType"],[4,"CommandExecutionStatus"],[4,"BufferCreateType"],[4,"ProfilingInfo"],[8,"AsMem"],[8,"ClVersions"],[8,"ClEventPtrRef"],[8,"ClNullEventPtr"],[8,"ClWaitListPtr"],[8,"ClPlatformIdPtr"],[8,"ClDeviceIdPtr"],[8,"ClContextPtr"],[3,"EventRefWrapper"],[3,"PlatformId"],[3,"DeviceId"],[3,"Context"],[3,"CommandQueue"],[3,"Mem"],[3,"MemMap"],[3,"Program"],[3,"Kernel"],[3,"Event"],[3,"Sampler"],[4,"EmptyInfoResultError"],[4,"PlatformInfoResult"],[4,"DeviceInfoResult"],[4,"ContextInfoResult"],[4,"GlContextInfoResult"],[4,"CommandQueueInfoResult"],[4,"MemInfoResult"],[4,"ImageInfoResult"],[4,"SamplerInfoResult"],[4,"ProgramInfoResult"],[4,"ProgramBuildInfoResult"],[4,"KernelInfoResult"],[4,"KernelArgInfoResult"],[4,"KernelWorkGroupInfoResult"],[4,"EventInfoResult"],[4,"ProfilingInfoResult"],[3,"ImageFormat"],[3,"ImageDescriptor"],[4,"ContextPropertyValue"],[4,"ImageFormatParseError"],[3,"ArgVal"],[3,"OpenclVersion"],[3,"ContextProperties"],[3,"BufferRegion"],[4,"ErrorKind"],[3,"Error"],[4,"UtilError"],[4,"VecRemoveRebuildError"],[3,"DeviceType"],[3,"DeviceFpConfig"],[3,"DeviceExecCapabilities"],[3,"CommandQueueProperties"],[3,"DeviceAffinityDomain"],[3,"MemFlags"],[3,"MemMigrationFlags"],[3,"MapFlags"],[3,"ProgramBinaryType"],[3,"KernelArgTypeQualifier"],[3,"Char"],[3,"Int"],[3,"Ushort16"],[3,"Ushort"],[3,"Uint2"],[3,"Ulong3"],[3,"Uchar2"],[3,"Uchar"],[3,"Uchar3"],[3,"Ushort2"],[3,"Long16"],[3,"Char4"],[3,"Int2"],[3,"Char3"],[3,"Long"],[3,"Int8"],[3,"Int4"],[3,"Long3"],[3,"Ulong4"],[3,"Long2"],[3,"Uint4"],[3,"Uint16"],[3,"Uchar16"],[3,"Char2"],[3,"Ulong"],[3,"Uint8"],[3,"Uint3"],[3,"Short16"],[3,"Short2"],[3,"Ushort8"],[3,"Uchar8"],[3,"Ulong16"],[3,"Ulong2"],[3,"Long8"],[3,"Short8"],[3,"Uint"],[3,"Uchar4"],[3,"Ulong8"],[3,"Short"],[3,"Long4"],[3,"Char8"],[3,"Ushort4"],[3,"Ushort3"],[3,"Short4"],[3,"Int3"],[3,"Char16"],[3,"Int16"],[3,"Short3"],[3,"Double2"],[3,"Float3"],[3,"Float"],[3,"Float2"],[3,"Double"],[3,"Float4"],[3,"Double16"],[3,"Double3"],[3,"Float16"],[3,"Double4"],[3,"Double8"],[3,"Float8"]]};
searchIndex["ocl_core_vector"] = {"doc":"OpenCL scalar and vector primitive types.","items":[[3,"Char","ocl_core_vector","",null,null],[3,"Char2","","",null,null],[3,"Char3","","",null,null],[3,"Char4","","",null,null],[3,"Char8","","",null,null],[3,"Char16","","",null,null],[3,"Uchar","","",null,null],[3,"Uchar2","","",null,null],[3,"Uchar3","","",null,null],[3,"Uchar4","","",null,null],[3,"Uchar8","","",null,null],[3,"Uchar16","","",null,null],[3,"Short","","",null,null],[3,"Short2","","",null,null],[3,"Short3","","",null,null],[3,"Short4","","",null,null],[3,"Short8","","",null,null],[3,"Short16","","",null,null],[3,"Ushort","","",null,null],[3,"Ushort2","","",null,null],[3,"Ushort3","","",null,null],[3,"Ushort4","","",null,null],[3,"Ushort8","","",null,null],[3,"Ushort16","","",null,null],[3,"Int","","",null,null],[3,"Int2","","",null,null],[3,"Int3","","",null,null],[3,"Int4","","",null,null],[3,"Int8","","",null,null],[3,"Int16","","",null,null],[3,"Uint","","",null,null],[3,"Uint2","","",null,null],[3,"Uint3","","",null,null],[3,"Uint4","","",null,null],[3,"Uint8","","",null,null],[3,"Uint16","","",null,null],[3,"Long","","",null,null],[3,"Long2","","",null,null],[3,"Long3","","",null,null],[3,"Long4","","",null,null],[3,"Long8","","",null,null],[3,"Long16","","",null,null],[3,"Ulong","","",null,null],[3,"Ulong2","","",null,null],[3,"Ulong3","","",null,null],[3,"Ulong4","","",null,null],[3,"Ulong8","","",null,null],[3,"Ulong16","","",null,null],[3,"Float","","",null,null],[3,"Float2","","",null,null],[3,"Float3","","",null,null],[3,"Float4","","",null,null],[3,"Float8","","",null,null],[3,"Float16","","",null,null],[3,"Double","","",null,null],[3,"Double2","","",null,null],[3,"Double3","","",null,null],[3,"Double4","","",null,null],[3,"Double8","","",null,null],[3,"Double16","","",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"default","","",0,{"o":{"n":"char"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"new","","",0,{"i":[{"n":"i8"}],"o":{"n":"char"}}],[11,"from","","",0,null],[11,"from","","",0,{"i":[{"n":"i8"}],"o":{"n":"char"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",0,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"zero","","",0,{"o":{"n":"self"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",0,{"o":{"n":"self"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"zero","","",0,{"o":{"n":"self"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",0,{"o":{"n":"self"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"div","","",0,null],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"sum","","",0,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"product","","",0,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"sum","","",0,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"product","","",0,{"i":[{"n":"i"}],"o":{"n":"char"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"ordering"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"not","","",0,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"bitxor","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"bitor","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"bitand","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"char"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"neg","","",0,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"shl","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char"}}],[11,"shl_assign","","",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char"}}],[11,"shr_assign","","",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"char2"}}],[11,"default","","",1,{"o":{"n":"char2"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"bool"}}],[11,"new","","",1,{"i":[{"n":"i8"},{"n":"i8"}],"o":{"n":"char2"}}],[11,"from","","",1,null],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",1,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"zero","","",1,{"o":{"n":"self"}}],[11,"is_zero","","",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",1,{"o":{"n":"self"}}],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"zero","","",1,{"o":{"n":"self"}}],[11,"is_zero","","",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",1,{"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",1,null],[11,"add_assign","","",1,{"i":[{"n":"self"},{"n":"char2"}]}],[11,"sub","","",1,null],[11,"sub_assign","","",1,{"i":[{"n":"self"},{"n":"char2"}]}],[11,"mul","","",1,null],[11,"mul_assign","","",1,{"i":[{"n":"self"},{"n":"char2"}]}],[11,"div","","",1,null],[11,"div_assign","","",1,{"i":[{"n":"self"},{"n":"char2"}]}],[11,"rem","","",1,null],[11,"rem_assign","","",1,{"i":[{"n":"self"},{"n":"char2"}]}],[11,"sum","","",1,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"product","","",1,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"sum","","",1,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"product","","",1,{"i":[{"n":"i"}],"o":{"n":"char2"}}],[11,"hash","","",1,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"ordering"}}],[11,"add","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"sub","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"mul","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"div","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"rem","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"not","","",1,{"i":[{"n":"self"}],"o":{"n":"char2"}}],[11,"bitxor","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,{"i":[{"n":"self"},{"n":"char2"}]}],[11,"bitor","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,{"i":[{"n":"self"},{"n":"char2"}]}],[11,"bitand","","",1,{"i":[{"n":"self"},{"n":"char2"}],"o":{"n":"char2"}}],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,{"i":[{"n":"self"},{"n":"char2"}]}],[11,"neg","","",1,{"i":[{"n":"self"}],"o":{"n":"char2"}}],[11,"shl","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char2"}}],[11,"shl_assign","","",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char2"}}],[11,"shr_assign","","",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"char3"}}],[11,"default","","",2,{"o":{"n":"char3"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"le","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"gt","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"ge","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"bool"}}],[11,"new","","",2,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char3"}}],[11,"from","","",2,null],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",2,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"zero","","",2,{"o":{"n":"self"}}],[11,"is_zero","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",2,{"o":{"n":"self"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"zero","","",2,{"o":{"n":"self"}}],[11,"is_zero","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",2,{"o":{"n":"self"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",2,null],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"char3"}]}],[11,"sub","","",2,null],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"char3"}]}],[11,"mul","","",2,null],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"char3"}]}],[11,"div","","",2,null],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"char3"}]}],[11,"rem","","",2,null],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"char3"}]}],[11,"sum","","",2,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"product","","",2,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"sum","","",2,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"product","","",2,{"i":[{"n":"i"}],"o":{"n":"char3"}}],[11,"hash","","",2,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"ordering"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"not","","",2,{"i":[{"n":"self"}],"o":{"n":"char3"}}],[11,"bitxor","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"bitxor","","",2,null],[11,"bitxor_assign","","",2,{"i":[{"n":"self"},{"n":"char3"}]}],[11,"bitor","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"bitor","","",2,null],[11,"bitor_assign","","",2,{"i":[{"n":"self"},{"n":"char3"}]}],[11,"bitand","","",2,{"i":[{"n":"self"},{"n":"char3"}],"o":{"n":"char3"}}],[11,"bitand","","",2,null],[11,"bitand_assign","","",2,{"i":[{"n":"self"},{"n":"char3"}]}],[11,"neg","","",2,{"i":[{"n":"self"}],"o":{"n":"char3"}}],[11,"shl","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char3"}}],[11,"shl_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char3"}}],[11,"shr_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"char4"}}],[11,"default","","",3,{"o":{"n":"char4"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"bool"}}],[11,"new","","",3,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char4"}}],[11,"from","","",3,null],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",3,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"zero","","",3,{"o":{"n":"self"}}],[11,"is_zero","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",3,{"o":{"n":"self"}}],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"zero","","",3,{"o":{"n":"self"}}],[11,"is_zero","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",3,{"o":{"n":"self"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",3,null],[11,"add_assign","","",3,{"i":[{"n":"self"},{"n":"char4"}]}],[11,"sub","","",3,null],[11,"sub_assign","","",3,{"i":[{"n":"self"},{"n":"char4"}]}],[11,"mul","","",3,null],[11,"mul_assign","","",3,{"i":[{"n":"self"},{"n":"char4"}]}],[11,"div","","",3,null],[11,"div_assign","","",3,{"i":[{"n":"self"},{"n":"char4"}]}],[11,"rem","","",3,null],[11,"rem_assign","","",3,{"i":[{"n":"self"},{"n":"char4"}]}],[11,"sum","","",3,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"product","","",3,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"sum","","",3,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"product","","",3,{"i":[{"n":"i"}],"o":{"n":"char4"}}],[11,"hash","","",3,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"ordering"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"not","","",3,{"i":[{"n":"self"}],"o":{"n":"char4"}}],[11,"bitxor","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"bitxor","","",3,null],[11,"bitxor_assign","","",3,{"i":[{"n":"self"},{"n":"char4"}]}],[11,"bitor","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"bitor","","",3,null],[11,"bitor_assign","","",3,{"i":[{"n":"self"},{"n":"char4"}]}],[11,"bitand","","",3,{"i":[{"n":"self"},{"n":"char4"}],"o":{"n":"char4"}}],[11,"bitand","","",3,null],[11,"bitand_assign","","",3,{"i":[{"n":"self"},{"n":"char4"}]}],[11,"neg","","",3,{"i":[{"n":"self"}],"o":{"n":"char4"}}],[11,"shl","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char4"}}],[11,"shl_assign","","",3,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char4"}}],[11,"shr_assign","","",3,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"char8"}}],[11,"default","","",4,{"o":{"n":"char8"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"bool"}}],[11,"new","","",4,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char8"}}],[11,"from","","",4,null],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",4,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"zero","","",4,{"o":{"n":"self"}}],[11,"is_zero","","",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",4,{"o":{"n":"self"}}],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"zero","","",4,{"o":{"n":"self"}}],[11,"is_zero","","",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",4,{"o":{"n":"self"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",4,null],[11,"add_assign","","",4,{"i":[{"n":"self"},{"n":"char8"}]}],[11,"sub","","",4,null],[11,"sub_assign","","",4,{"i":[{"n":"self"},{"n":"char8"}]}],[11,"mul","","",4,null],[11,"mul_assign","","",4,{"i":[{"n":"self"},{"n":"char8"}]}],[11,"div","","",4,null],[11,"div_assign","","",4,{"i":[{"n":"self"},{"n":"char8"}]}],[11,"rem","","",4,null],[11,"rem_assign","","",4,{"i":[{"n":"self"},{"n":"char8"}]}],[11,"sum","","",4,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"product","","",4,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"sum","","",4,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"product","","",4,{"i":[{"n":"i"}],"o":{"n":"char8"}}],[11,"hash","","",4,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"ordering"}}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"mul","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"div","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"rem","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"not","","",4,{"i":[{"n":"self"}],"o":{"n":"char8"}}],[11,"bitxor","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"bitxor","","",4,null],[11,"bitxor_assign","","",4,{"i":[{"n":"self"},{"n":"char8"}]}],[11,"bitor","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"bitor","","",4,null],[11,"bitor_assign","","",4,{"i":[{"n":"self"},{"n":"char8"}]}],[11,"bitand","","",4,{"i":[{"n":"self"},{"n":"char8"}],"o":{"n":"char8"}}],[11,"bitand","","",4,null],[11,"bitand_assign","","",4,{"i":[{"n":"self"},{"n":"char8"}]}],[11,"neg","","",4,{"i":[{"n":"self"}],"o":{"n":"char8"}}],[11,"shl","","",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char8"}}],[11,"shl_assign","","",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char8"}}],[11,"shr_assign","","",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"char16"}}],[11,"default","","",5,{"o":{"n":"char16"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"bool"}}],[11,"new","","",5,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"char16"}}],[11,"from","","",5,null],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",5,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"zero","","",5,{"o":{"n":"self"}}],[11,"is_zero","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",5,{"o":{"n":"self"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"zero","","",5,{"o":{"n":"self"}}],[11,"is_zero","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",5,{"o":{"n":"self"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",5,null],[11,"add_assign","","",5,{"i":[{"n":"self"},{"n":"char16"}]}],[11,"sub","","",5,null],[11,"sub_assign","","",5,{"i":[{"n":"self"},{"n":"char16"}]}],[11,"mul","","",5,null],[11,"mul_assign","","",5,{"i":[{"n":"self"},{"n":"char16"}]}],[11,"div","","",5,null],[11,"div_assign","","",5,{"i":[{"n":"self"},{"n":"char16"}]}],[11,"rem","","",5,null],[11,"rem_assign","","",5,{"i":[{"n":"self"},{"n":"char16"}]}],[11,"sum","","",5,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"product","","",5,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"sum","","",5,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"product","","",5,{"i":[{"n":"i"}],"o":{"n":"char16"}}],[11,"hash","","",5,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"ordering"}}],[11,"add","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"sub","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"mul","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"div","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"rem","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"not","","",5,{"i":[{"n":"self"}],"o":{"n":"char16"}}],[11,"bitxor","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,{"i":[{"n":"self"},{"n":"char16"}]}],[11,"bitor","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,{"i":[{"n":"self"},{"n":"char16"}]}],[11,"bitand","","",5,{"i":[{"n":"self"},{"n":"char16"}],"o":{"n":"char16"}}],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,{"i":[{"n":"self"},{"n":"char16"}]}],[11,"neg","","",5,{"i":[{"n":"self"}],"o":{"n":"char16"}}],[11,"shl","","",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char16"}}],[11,"shl_assign","","",5,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char16"}}],[11,"shr_assign","","",5,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"uchar"}}],[11,"default","","",6,{"o":{"n":"uchar"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"bool"}}],[11,"new","","",6,{"i":[{"n":"u8"}],"o":{"n":"uchar"}}],[11,"from","","",6,null],[11,"from","","",6,{"i":[{"n":"u8"}],"o":{"n":"uchar"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",6,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"zero","","",6,{"o":{"n":"self"}}],[11,"is_zero","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",6,{"o":{"n":"self"}}],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"zero","","",6,{"o":{"n":"self"}}],[11,"is_zero","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",6,{"o":{"n":"self"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",6,null],[11,"add_assign","","",6,{"i":[{"n":"self"},{"n":"uchar"}]}],[11,"sub","","",6,null],[11,"sub_assign","","",6,{"i":[{"n":"self"},{"n":"uchar"}]}],[11,"mul","","",6,null],[11,"mul_assign","","",6,{"i":[{"n":"self"},{"n":"uchar"}]}],[11,"div","","",6,null],[11,"div_assign","","",6,{"i":[{"n":"self"},{"n":"uchar"}]}],[11,"rem","","",6,null],[11,"rem_assign","","",6,{"i":[{"n":"self"},{"n":"uchar"}]}],[11,"sum","","",6,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"product","","",6,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"sum","","",6,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"product","","",6,{"i":[{"n":"i"}],"o":{"n":"uchar"}}],[11,"hash","","",6,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"ordering"}}],[11,"add","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"sub","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"mul","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"div","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"rem","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"not","","",6,{"i":[{"n":"self"}],"o":{"n":"uchar"}}],[11,"bitxor","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"bitxor","","",6,null],[11,"bitxor_assign","","",6,{"i":[{"n":"self"},{"n":"uchar"}]}],[11,"bitor","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"bitor","","",6,null],[11,"bitor_assign","","",6,{"i":[{"n":"self"},{"n":"uchar"}]}],[11,"bitand","","",6,{"i":[{"n":"self"},{"n":"uchar"}],"o":{"n":"uchar"}}],[11,"bitand","","",6,null],[11,"bitand_assign","","",6,{"i":[{"n":"self"},{"n":"uchar"}]}],[11,"neg","","",6,{"i":[{"n":"self"}],"o":{"n":"uchar"}}],[11,"shl","","",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar"}}],[11,"shl_assign","","",6,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar"}}],[11,"shr_assign","","",6,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"uchar2"}}],[11,"default","","",7,{"o":{"n":"uchar2"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"bool"}}],[11,"new","","",7,{"i":[{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar2"}}],[11,"from","","",7,null],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",7,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"zero","","",7,{"o":{"n":"self"}}],[11,"is_zero","","",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",7,{"o":{"n":"self"}}],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"zero","","",7,{"o":{"n":"self"}}],[11,"is_zero","","",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",7,{"o":{"n":"self"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",7,null],[11,"add_assign","","",7,{"i":[{"n":"self"},{"n":"uchar2"}]}],[11,"sub","","",7,null],[11,"sub_assign","","",7,{"i":[{"n":"self"},{"n":"uchar2"}]}],[11,"mul","","",7,null],[11,"mul_assign","","",7,{"i":[{"n":"self"},{"n":"uchar2"}]}],[11,"div","","",7,null],[11,"div_assign","","",7,{"i":[{"n":"self"},{"n":"uchar2"}]}],[11,"rem","","",7,null],[11,"rem_assign","","",7,{"i":[{"n":"self"},{"n":"uchar2"}]}],[11,"sum","","",7,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"product","","",7,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"sum","","",7,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"product","","",7,{"i":[{"n":"i"}],"o":{"n":"uchar2"}}],[11,"hash","","",7,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"ordering"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"not","","",7,{"i":[{"n":"self"}],"o":{"n":"uchar2"}}],[11,"bitxor","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"bitxor","","",7,null],[11,"bitxor_assign","","",7,{"i":[{"n":"self"},{"n":"uchar2"}]}],[11,"bitor","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"bitor","","",7,null],[11,"bitor_assign","","",7,{"i":[{"n":"self"},{"n":"uchar2"}]}],[11,"bitand","","",7,{"i":[{"n":"self"},{"n":"uchar2"}],"o":{"n":"uchar2"}}],[11,"bitand","","",7,null],[11,"bitand_assign","","",7,{"i":[{"n":"self"},{"n":"uchar2"}]}],[11,"neg","","",7,{"i":[{"n":"self"}],"o":{"n":"uchar2"}}],[11,"shl","","",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar2"}}],[11,"shl_assign","","",7,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar2"}}],[11,"shr_assign","","",7,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"uchar3"}}],[11,"default","","",8,{"o":{"n":"uchar3"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"bool"}}],[11,"new","","",8,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar3"}}],[11,"from","","",8,null],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",8,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"zero","","",8,{"o":{"n":"self"}}],[11,"is_zero","","",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",8,{"o":{"n":"self"}}],[11,"deref","","",8,null],[11,"deref_mut","","",8,null],[11,"zero","","",8,{"o":{"n":"self"}}],[11,"is_zero","","",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",8,{"o":{"n":"self"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",8,null],[11,"add_assign","","",8,{"i":[{"n":"self"},{"n":"uchar3"}]}],[11,"sub","","",8,null],[11,"sub_assign","","",8,{"i":[{"n":"self"},{"n":"uchar3"}]}],[11,"mul","","",8,null],[11,"mul_assign","","",8,{"i":[{"n":"self"},{"n":"uchar3"}]}],[11,"div","","",8,null],[11,"div_assign","","",8,{"i":[{"n":"self"},{"n":"uchar3"}]}],[11,"rem","","",8,null],[11,"rem_assign","","",8,{"i":[{"n":"self"},{"n":"uchar3"}]}],[11,"sum","","",8,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"product","","",8,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"sum","","",8,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"product","","",8,{"i":[{"n":"i"}],"o":{"n":"uchar3"}}],[11,"hash","","",8,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"ordering"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"not","","",8,{"i":[{"n":"self"}],"o":{"n":"uchar3"}}],[11,"bitxor","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"bitxor","","",8,null],[11,"bitxor_assign","","",8,{"i":[{"n":"self"},{"n":"uchar3"}]}],[11,"bitor","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"bitor","","",8,null],[11,"bitor_assign","","",8,{"i":[{"n":"self"},{"n":"uchar3"}]}],[11,"bitand","","",8,{"i":[{"n":"self"},{"n":"uchar3"}],"o":{"n":"uchar3"}}],[11,"bitand","","",8,null],[11,"bitand_assign","","",8,{"i":[{"n":"self"},{"n":"uchar3"}]}],[11,"neg","","",8,{"i":[{"n":"self"}],"o":{"n":"uchar3"}}],[11,"shl","","",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar3"}}],[11,"shl_assign","","",8,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar3"}}],[11,"shr_assign","","",8,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"uchar4"}}],[11,"default","","",9,{"o":{"n":"uchar4"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"bool"}}],[11,"new","","",9,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar4"}}],[11,"from","","",9,null],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",9,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"zero","","",9,{"o":{"n":"self"}}],[11,"is_zero","","",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",9,{"o":{"n":"self"}}],[11,"deref","","",9,null],[11,"deref_mut","","",9,null],[11,"zero","","",9,{"o":{"n":"self"}}],[11,"is_zero","","",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",9,{"o":{"n":"self"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",9,null],[11,"add_assign","","",9,{"i":[{"n":"self"},{"n":"uchar4"}]}],[11,"sub","","",9,null],[11,"sub_assign","","",9,{"i":[{"n":"self"},{"n":"uchar4"}]}],[11,"mul","","",9,null],[11,"mul_assign","","",9,{"i":[{"n":"self"},{"n":"uchar4"}]}],[11,"div","","",9,null],[11,"div_assign","","",9,{"i":[{"n":"self"},{"n":"uchar4"}]}],[11,"rem","","",9,null],[11,"rem_assign","","",9,{"i":[{"n":"self"},{"n":"uchar4"}]}],[11,"sum","","",9,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"product","","",9,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"sum","","",9,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"product","","",9,{"i":[{"n":"i"}],"o":{"n":"uchar4"}}],[11,"hash","","",9,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"ordering"}}],[11,"add","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"sub","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"mul","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"div","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"rem","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"not","","",9,{"i":[{"n":"self"}],"o":{"n":"uchar4"}}],[11,"bitxor","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"bitxor","","",9,null],[11,"bitxor_assign","","",9,{"i":[{"n":"self"},{"n":"uchar4"}]}],[11,"bitor","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"bitor","","",9,null],[11,"bitor_assign","","",9,{"i":[{"n":"self"},{"n":"uchar4"}]}],[11,"bitand","","",9,{"i":[{"n":"self"},{"n":"uchar4"}],"o":{"n":"uchar4"}}],[11,"bitand","","",9,null],[11,"bitand_assign","","",9,{"i":[{"n":"self"},{"n":"uchar4"}]}],[11,"neg","","",9,{"i":[{"n":"self"}],"o":{"n":"uchar4"}}],[11,"shl","","",9,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar4"}}],[11,"shl_assign","","",9,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",9,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar4"}}],[11,"shr_assign","","",9,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"uchar8"}}],[11,"default","","",10,{"o":{"n":"uchar8"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"le","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"gt","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"ge","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"bool"}}],[11,"new","","",10,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar8"}}],[11,"from","","",10,null],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",10,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"zero","","",10,{"o":{"n":"self"}}],[11,"is_zero","","",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",10,{"o":{"n":"self"}}],[11,"deref","","",10,null],[11,"deref_mut","","",10,null],[11,"zero","","",10,{"o":{"n":"self"}}],[11,"is_zero","","",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",10,{"o":{"n":"self"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",10,null],[11,"add_assign","","",10,{"i":[{"n":"self"},{"n":"uchar8"}]}],[11,"sub","","",10,null],[11,"sub_assign","","",10,{"i":[{"n":"self"},{"n":"uchar8"}]}],[11,"mul","","",10,null],[11,"mul_assign","","",10,{"i":[{"n":"self"},{"n":"uchar8"}]}],[11,"div","","",10,null],[11,"div_assign","","",10,{"i":[{"n":"self"},{"n":"uchar8"}]}],[11,"rem","","",10,null],[11,"rem_assign","","",10,{"i":[{"n":"self"},{"n":"uchar8"}]}],[11,"sum","","",10,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"product","","",10,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"sum","","",10,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"product","","",10,{"i":[{"n":"i"}],"o":{"n":"uchar8"}}],[11,"hash","","",10,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"ordering"}}],[11,"add","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"sub","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"mul","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"div","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"rem","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"not","","",10,{"i":[{"n":"self"}],"o":{"n":"uchar8"}}],[11,"bitxor","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"bitxor","","",10,null],[11,"bitxor_assign","","",10,{"i":[{"n":"self"},{"n":"uchar8"}]}],[11,"bitor","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"bitor","","",10,null],[11,"bitor_assign","","",10,{"i":[{"n":"self"},{"n":"uchar8"}]}],[11,"bitand","","",10,{"i":[{"n":"self"},{"n":"uchar8"}],"o":{"n":"uchar8"}}],[11,"bitand","","",10,null],[11,"bitand_assign","","",10,{"i":[{"n":"self"},{"n":"uchar8"}]}],[11,"neg","","",10,{"i":[{"n":"self"}],"o":{"n":"uchar8"}}],[11,"shl","","",10,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar8"}}],[11,"shl_assign","","",10,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",10,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar8"}}],[11,"shr_assign","","",10,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"uchar16"}}],[11,"default","","",11,{"o":{"n":"uchar16"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"le","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"gt","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"ge","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"bool"}}],[11,"new","","",11,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"uchar16"}}],[11,"from","","",11,null],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",11,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"zero","","",11,{"o":{"n":"self"}}],[11,"is_zero","","",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",11,{"o":{"n":"self"}}],[11,"deref","","",11,null],[11,"deref_mut","","",11,null],[11,"zero","","",11,{"o":{"n":"self"}}],[11,"is_zero","","",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",11,{"o":{"n":"self"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",11,null],[11,"add_assign","","",11,{"i":[{"n":"self"},{"n":"uchar16"}]}],[11,"sub","","",11,null],[11,"sub_assign","","",11,{"i":[{"n":"self"},{"n":"uchar16"}]}],[11,"mul","","",11,null],[11,"mul_assign","","",11,{"i":[{"n":"self"},{"n":"uchar16"}]}],[11,"div","","",11,null],[11,"div_assign","","",11,{"i":[{"n":"self"},{"n":"uchar16"}]}],[11,"rem","","",11,null],[11,"rem_assign","","",11,{"i":[{"n":"self"},{"n":"uchar16"}]}],[11,"sum","","",11,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"product","","",11,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"sum","","",11,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"product","","",11,{"i":[{"n":"i"}],"o":{"n":"uchar16"}}],[11,"hash","","",11,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"ordering"}}],[11,"add","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"sub","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"mul","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"div","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"rem","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"not","","",11,{"i":[{"n":"self"}],"o":{"n":"uchar16"}}],[11,"bitxor","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"bitxor","","",11,null],[11,"bitxor_assign","","",11,{"i":[{"n":"self"},{"n":"uchar16"}]}],[11,"bitor","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"bitor","","",11,null],[11,"bitor_assign","","",11,{"i":[{"n":"self"},{"n":"uchar16"}]}],[11,"bitand","","",11,{"i":[{"n":"self"},{"n":"uchar16"}],"o":{"n":"uchar16"}}],[11,"bitand","","",11,null],[11,"bitand_assign","","",11,{"i":[{"n":"self"},{"n":"uchar16"}]}],[11,"neg","","",11,{"i":[{"n":"self"}],"o":{"n":"uchar16"}}],[11,"shl","","",11,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar16"}}],[11,"shl_assign","","",11,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",11,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uchar16"}}],[11,"shr_assign","","",11,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"short"}}],[11,"default","","",12,{"o":{"n":"short"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"le","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"gt","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"ge","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"bool"}}],[11,"new","","",12,{"i":[{"n":"i16"}],"o":{"n":"short"}}],[11,"from","","",12,null],[11,"from","","",12,{"i":[{"n":"i16"}],"o":{"n":"short"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",12,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"zero","","",12,{"o":{"n":"self"}}],[11,"is_zero","","",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",12,{"o":{"n":"self"}}],[11,"deref","","",12,null],[11,"deref_mut","","",12,null],[11,"zero","","",12,{"o":{"n":"self"}}],[11,"is_zero","","",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",12,{"o":{"n":"self"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",12,null],[11,"add_assign","","",12,{"i":[{"n":"self"},{"n":"short"}]}],[11,"sub","","",12,null],[11,"sub_assign","","",12,{"i":[{"n":"self"},{"n":"short"}]}],[11,"mul","","",12,null],[11,"mul_assign","","",12,{"i":[{"n":"self"},{"n":"short"}]}],[11,"div","","",12,null],[11,"div_assign","","",12,{"i":[{"n":"self"},{"n":"short"}]}],[11,"rem","","",12,null],[11,"rem_assign","","",12,{"i":[{"n":"self"},{"n":"short"}]}],[11,"sum","","",12,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"product","","",12,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"sum","","",12,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"product","","",12,{"i":[{"n":"i"}],"o":{"n":"short"}}],[11,"hash","","",12,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"ordering"}}],[11,"add","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"sub","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"mul","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"div","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"rem","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"not","","",12,{"i":[{"n":"self"}],"o":{"n":"short"}}],[11,"bitxor","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"bitxor","","",12,null],[11,"bitxor_assign","","",12,{"i":[{"n":"self"},{"n":"short"}]}],[11,"bitor","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"bitor","","",12,null],[11,"bitor_assign","","",12,{"i":[{"n":"self"},{"n":"short"}]}],[11,"bitand","","",12,{"i":[{"n":"self"},{"n":"short"}],"o":{"n":"short"}}],[11,"bitand","","",12,null],[11,"bitand_assign","","",12,{"i":[{"n":"self"},{"n":"short"}]}],[11,"neg","","",12,{"i":[{"n":"self"}],"o":{"n":"short"}}],[11,"shl","","",12,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short"}}],[11,"shl_assign","","",12,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",12,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short"}}],[11,"shr_assign","","",12,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"short2"}}],[11,"default","","",13,{"o":{"n":"short2"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"le","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"gt","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"ge","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"bool"}}],[11,"new","","",13,{"i":[{"n":"i16"},{"n":"i16"}],"o":{"n":"short2"}}],[11,"from","","",13,null],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",13,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"zero","","",13,{"o":{"n":"self"}}],[11,"is_zero","","",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",13,{"o":{"n":"self"}}],[11,"deref","","",13,null],[11,"deref_mut","","",13,null],[11,"zero","","",13,{"o":{"n":"self"}}],[11,"is_zero","","",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",13,{"o":{"n":"self"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",13,null],[11,"add_assign","","",13,{"i":[{"n":"self"},{"n":"short2"}]}],[11,"sub","","",13,null],[11,"sub_assign","","",13,{"i":[{"n":"self"},{"n":"short2"}]}],[11,"mul","","",13,null],[11,"mul_assign","","",13,{"i":[{"n":"self"},{"n":"short2"}]}],[11,"div","","",13,null],[11,"div_assign","","",13,{"i":[{"n":"self"},{"n":"short2"}]}],[11,"rem","","",13,null],[11,"rem_assign","","",13,{"i":[{"n":"self"},{"n":"short2"}]}],[11,"sum","","",13,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"product","","",13,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"sum","","",13,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"product","","",13,{"i":[{"n":"i"}],"o":{"n":"short2"}}],[11,"hash","","",13,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"ordering"}}],[11,"add","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"sub","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"mul","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"div","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"rem","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"not","","",13,{"i":[{"n":"self"}],"o":{"n":"short2"}}],[11,"bitxor","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"bitxor","","",13,null],[11,"bitxor_assign","","",13,{"i":[{"n":"self"},{"n":"short2"}]}],[11,"bitor","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"bitor","","",13,null],[11,"bitor_assign","","",13,{"i":[{"n":"self"},{"n":"short2"}]}],[11,"bitand","","",13,{"i":[{"n":"self"},{"n":"short2"}],"o":{"n":"short2"}}],[11,"bitand","","",13,null],[11,"bitand_assign","","",13,{"i":[{"n":"self"},{"n":"short2"}]}],[11,"neg","","",13,{"i":[{"n":"self"}],"o":{"n":"short2"}}],[11,"shl","","",13,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short2"}}],[11,"shl_assign","","",13,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",13,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short2"}}],[11,"shr_assign","","",13,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"short3"}}],[11,"default","","",14,{"o":{"n":"short3"}}],[11,"partial_cmp","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"le","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"gt","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"ge","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"bool"}}],[11,"new","","",14,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short3"}}],[11,"from","","",14,null],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",14,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"zero","","",14,{"o":{"n":"self"}}],[11,"is_zero","","",14,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",14,{"o":{"n":"self"}}],[11,"deref","","",14,null],[11,"deref_mut","","",14,null],[11,"zero","","",14,{"o":{"n":"self"}}],[11,"is_zero","","",14,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",14,{"o":{"n":"self"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",14,null],[11,"add_assign","","",14,{"i":[{"n":"self"},{"n":"short3"}]}],[11,"sub","","",14,null],[11,"sub_assign","","",14,{"i":[{"n":"self"},{"n":"short3"}]}],[11,"mul","","",14,null],[11,"mul_assign","","",14,{"i":[{"n":"self"},{"n":"short3"}]}],[11,"div","","",14,null],[11,"div_assign","","",14,{"i":[{"n":"self"},{"n":"short3"}]}],[11,"rem","","",14,null],[11,"rem_assign","","",14,{"i":[{"n":"self"},{"n":"short3"}]}],[11,"sum","","",14,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"product","","",14,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"sum","","",14,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"product","","",14,{"i":[{"n":"i"}],"o":{"n":"short3"}}],[11,"hash","","",14,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"ordering"}}],[11,"add","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"sub","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"mul","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"div","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"rem","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"not","","",14,{"i":[{"n":"self"}],"o":{"n":"short3"}}],[11,"bitxor","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,{"i":[{"n":"self"},{"n":"short3"}]}],[11,"bitor","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,{"i":[{"n":"self"},{"n":"short3"}]}],[11,"bitand","","",14,{"i":[{"n":"self"},{"n":"short3"}],"o":{"n":"short3"}}],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,{"i":[{"n":"self"},{"n":"short3"}]}],[11,"neg","","",14,{"i":[{"n":"self"}],"o":{"n":"short3"}}],[11,"shl","","",14,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short3"}}],[11,"shl_assign","","",14,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",14,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short3"}}],[11,"shr_assign","","",14,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"short4"}}],[11,"default","","",15,{"o":{"n":"short4"}}],[11,"partial_cmp","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"le","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"gt","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"ge","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"bool"}}],[11,"new","","",15,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short4"}}],[11,"from","","",15,null],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",15,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"zero","","",15,{"o":{"n":"self"}}],[11,"is_zero","","",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",15,{"o":{"n":"self"}}],[11,"deref","","",15,null],[11,"deref_mut","","",15,null],[11,"zero","","",15,{"o":{"n":"self"}}],[11,"is_zero","","",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",15,{"o":{"n":"self"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",15,null],[11,"add_assign","","",15,{"i":[{"n":"self"},{"n":"short4"}]}],[11,"sub","","",15,null],[11,"sub_assign","","",15,{"i":[{"n":"self"},{"n":"short4"}]}],[11,"mul","","",15,null],[11,"mul_assign","","",15,{"i":[{"n":"self"},{"n":"short4"}]}],[11,"div","","",15,null],[11,"div_assign","","",15,{"i":[{"n":"self"},{"n":"short4"}]}],[11,"rem","","",15,null],[11,"rem_assign","","",15,{"i":[{"n":"self"},{"n":"short4"}]}],[11,"sum","","",15,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"product","","",15,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"sum","","",15,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"product","","",15,{"i":[{"n":"i"}],"o":{"n":"short4"}}],[11,"hash","","",15,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"ordering"}}],[11,"add","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"sub","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"mul","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"div","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"rem","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"not","","",15,{"i":[{"n":"self"}],"o":{"n":"short4"}}],[11,"bitxor","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"bitxor","","",15,null],[11,"bitxor_assign","","",15,{"i":[{"n":"self"},{"n":"short4"}]}],[11,"bitor","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"bitor","","",15,null],[11,"bitor_assign","","",15,{"i":[{"n":"self"},{"n":"short4"}]}],[11,"bitand","","",15,{"i":[{"n":"self"},{"n":"short4"}],"o":{"n":"short4"}}],[11,"bitand","","",15,null],[11,"bitand_assign","","",15,{"i":[{"n":"self"},{"n":"short4"}]}],[11,"neg","","",15,{"i":[{"n":"self"}],"o":{"n":"short4"}}],[11,"shl","","",15,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short4"}}],[11,"shl_assign","","",15,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",15,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short4"}}],[11,"shr_assign","","",15,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"short8"}}],[11,"default","","",16,{"o":{"n":"short8"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"le","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"gt","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"ge","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"bool"}}],[11,"new","","",16,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short8"}}],[11,"from","","",16,null],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",16,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"zero","","",16,{"o":{"n":"self"}}],[11,"is_zero","","",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",16,{"o":{"n":"self"}}],[11,"deref","","",16,null],[11,"deref_mut","","",16,null],[11,"zero","","",16,{"o":{"n":"self"}}],[11,"is_zero","","",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",16,{"o":{"n":"self"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",16,null],[11,"add_assign","","",16,{"i":[{"n":"self"},{"n":"short8"}]}],[11,"sub","","",16,null],[11,"sub_assign","","",16,{"i":[{"n":"self"},{"n":"short8"}]}],[11,"mul","","",16,null],[11,"mul_assign","","",16,{"i":[{"n":"self"},{"n":"short8"}]}],[11,"div","","",16,null],[11,"div_assign","","",16,{"i":[{"n":"self"},{"n":"short8"}]}],[11,"rem","","",16,null],[11,"rem_assign","","",16,{"i":[{"n":"self"},{"n":"short8"}]}],[11,"sum","","",16,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"product","","",16,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"sum","","",16,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"product","","",16,{"i":[{"n":"i"}],"o":{"n":"short8"}}],[11,"hash","","",16,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"ordering"}}],[11,"add","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"sub","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"mul","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"div","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"rem","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"not","","",16,{"i":[{"n":"self"}],"o":{"n":"short8"}}],[11,"bitxor","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"bitxor","","",16,null],[11,"bitxor_assign","","",16,{"i":[{"n":"self"},{"n":"short8"}]}],[11,"bitor","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"bitor","","",16,null],[11,"bitor_assign","","",16,{"i":[{"n":"self"},{"n":"short8"}]}],[11,"bitand","","",16,{"i":[{"n":"self"},{"n":"short8"}],"o":{"n":"short8"}}],[11,"bitand","","",16,null],[11,"bitand_assign","","",16,{"i":[{"n":"self"},{"n":"short8"}]}],[11,"neg","","",16,{"i":[{"n":"self"}],"o":{"n":"short8"}}],[11,"shl","","",16,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short8"}}],[11,"shl_assign","","",16,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",16,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short8"}}],[11,"shr_assign","","",16,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"short16"}}],[11,"default","","",17,{"o":{"n":"short16"}}],[11,"partial_cmp","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"le","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"gt","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"ge","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"bool"}}],[11,"new","","",17,{"i":[{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"},{"n":"i16"}],"o":{"n":"short16"}}],[11,"from","","",17,null],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",17,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"zero","","",17,{"o":{"n":"self"}}],[11,"is_zero","","",17,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",17,{"o":{"n":"self"}}],[11,"deref","","",17,null],[11,"deref_mut","","",17,null],[11,"zero","","",17,{"o":{"n":"self"}}],[11,"is_zero","","",17,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",17,{"o":{"n":"self"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",17,null],[11,"add_assign","","",17,{"i":[{"n":"self"},{"n":"short16"}]}],[11,"sub","","",17,null],[11,"sub_assign","","",17,{"i":[{"n":"self"},{"n":"short16"}]}],[11,"mul","","",17,null],[11,"mul_assign","","",17,{"i":[{"n":"self"},{"n":"short16"}]}],[11,"div","","",17,null],[11,"div_assign","","",17,{"i":[{"n":"self"},{"n":"short16"}]}],[11,"rem","","",17,null],[11,"rem_assign","","",17,{"i":[{"n":"self"},{"n":"short16"}]}],[11,"sum","","",17,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"product","","",17,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"sum","","",17,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"product","","",17,{"i":[{"n":"i"}],"o":{"n":"short16"}}],[11,"hash","","",17,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"ordering"}}],[11,"add","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"sub","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"mul","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"div","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"rem","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"not","","",17,{"i":[{"n":"self"}],"o":{"n":"short16"}}],[11,"bitxor","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"bitxor","","",17,null],[11,"bitxor_assign","","",17,{"i":[{"n":"self"},{"n":"short16"}]}],[11,"bitor","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"bitor","","",17,null],[11,"bitor_assign","","",17,{"i":[{"n":"self"},{"n":"short16"}]}],[11,"bitand","","",17,{"i":[{"n":"self"},{"n":"short16"}],"o":{"n":"short16"}}],[11,"bitand","","",17,null],[11,"bitand_assign","","",17,{"i":[{"n":"self"},{"n":"short16"}]}],[11,"neg","","",17,{"i":[{"n":"self"}],"o":{"n":"short16"}}],[11,"shl","","",17,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short16"}}],[11,"shl_assign","","",17,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",17,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"short16"}}],[11,"shr_assign","","",17,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"ushort"}}],[11,"default","","",18,{"o":{"n":"ushort"}}],[11,"partial_cmp","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"le","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"gt","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"ge","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"bool"}}],[11,"new","","",18,{"i":[{"n":"u16"}],"o":{"n":"ushort"}}],[11,"from","","",18,null],[11,"from","","",18,{"i":[{"n":"u16"}],"o":{"n":"ushort"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",18,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"zero","","",18,{"o":{"n":"self"}}],[11,"is_zero","","",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",18,{"o":{"n":"self"}}],[11,"deref","","",18,null],[11,"deref_mut","","",18,null],[11,"zero","","",18,{"o":{"n":"self"}}],[11,"is_zero","","",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",18,{"o":{"n":"self"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",18,null],[11,"add_assign","","",18,{"i":[{"n":"self"},{"n":"ushort"}]}],[11,"sub","","",18,null],[11,"sub_assign","","",18,{"i":[{"n":"self"},{"n":"ushort"}]}],[11,"mul","","",18,null],[11,"mul_assign","","",18,{"i":[{"n":"self"},{"n":"ushort"}]}],[11,"div","","",18,null],[11,"div_assign","","",18,{"i":[{"n":"self"},{"n":"ushort"}]}],[11,"rem","","",18,null],[11,"rem_assign","","",18,{"i":[{"n":"self"},{"n":"ushort"}]}],[11,"sum","","",18,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"product","","",18,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"sum","","",18,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"product","","",18,{"i":[{"n":"i"}],"o":{"n":"ushort"}}],[11,"hash","","",18,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ordering"}}],[11,"add","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"sub","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"mul","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"div","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"rem","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"not","","",18,{"i":[{"n":"self"}],"o":{"n":"ushort"}}],[11,"bitxor","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"bitxor","","",18,null],[11,"bitxor_assign","","",18,{"i":[{"n":"self"},{"n":"ushort"}]}],[11,"bitor","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"bitor","","",18,null],[11,"bitor_assign","","",18,{"i":[{"n":"self"},{"n":"ushort"}]}],[11,"bitand","","",18,{"i":[{"n":"self"},{"n":"ushort"}],"o":{"n":"ushort"}}],[11,"bitand","","",18,null],[11,"bitand_assign","","",18,{"i":[{"n":"self"},{"n":"ushort"}]}],[11,"neg","","",18,{"i":[{"n":"self"}],"o":{"n":"ushort"}}],[11,"shl","","",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort"}}],[11,"shl_assign","","",18,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort"}}],[11,"shr_assign","","",18,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"ushort2"}}],[11,"default","","",19,{"o":{"n":"ushort2"}}],[11,"partial_cmp","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"le","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"gt","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"ge","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"bool"}}],[11,"new","","",19,{"i":[{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort2"}}],[11,"from","","",19,null],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",19,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"zero","","",19,{"o":{"n":"self"}}],[11,"is_zero","","",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",19,{"o":{"n":"self"}}],[11,"deref","","",19,null],[11,"deref_mut","","",19,null],[11,"zero","","",19,{"o":{"n":"self"}}],[11,"is_zero","","",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",19,{"o":{"n":"self"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",19,null],[11,"add_assign","","",19,{"i":[{"n":"self"},{"n":"ushort2"}]}],[11,"sub","","",19,null],[11,"sub_assign","","",19,{"i":[{"n":"self"},{"n":"ushort2"}]}],[11,"mul","","",19,null],[11,"mul_assign","","",19,{"i":[{"n":"self"},{"n":"ushort2"}]}],[11,"div","","",19,null],[11,"div_assign","","",19,{"i":[{"n":"self"},{"n":"ushort2"}]}],[11,"rem","","",19,null],[11,"rem_assign","","",19,{"i":[{"n":"self"},{"n":"ushort2"}]}],[11,"sum","","",19,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"product","","",19,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"sum","","",19,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"product","","",19,{"i":[{"n":"i"}],"o":{"n":"ushort2"}}],[11,"hash","","",19,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ordering"}}],[11,"add","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"sub","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"mul","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"div","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"rem","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"not","","",19,{"i":[{"n":"self"}],"o":{"n":"ushort2"}}],[11,"bitxor","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"bitxor","","",19,null],[11,"bitxor_assign","","",19,{"i":[{"n":"self"},{"n":"ushort2"}]}],[11,"bitor","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"bitor","","",19,null],[11,"bitor_assign","","",19,{"i":[{"n":"self"},{"n":"ushort2"}]}],[11,"bitand","","",19,{"i":[{"n":"self"},{"n":"ushort2"}],"o":{"n":"ushort2"}}],[11,"bitand","","",19,null],[11,"bitand_assign","","",19,{"i":[{"n":"self"},{"n":"ushort2"}]}],[11,"neg","","",19,{"i":[{"n":"self"}],"o":{"n":"ushort2"}}],[11,"shl","","",19,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort2"}}],[11,"shl_assign","","",19,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",19,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort2"}}],[11,"shr_assign","","",19,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"ushort3"}}],[11,"default","","",20,{"o":{"n":"ushort3"}}],[11,"partial_cmp","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"le","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"gt","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"ge","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"bool"}}],[11,"new","","",20,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort3"}}],[11,"from","","",20,null],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",20,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"zero","","",20,{"o":{"n":"self"}}],[11,"is_zero","","",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",20,{"o":{"n":"self"}}],[11,"deref","","",20,null],[11,"deref_mut","","",20,null],[11,"zero","","",20,{"o":{"n":"self"}}],[11,"is_zero","","",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",20,{"o":{"n":"self"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",20,null],[11,"add_assign","","",20,{"i":[{"n":"self"},{"n":"ushort3"}]}],[11,"sub","","",20,null],[11,"sub_assign","","",20,{"i":[{"n":"self"},{"n":"ushort3"}]}],[11,"mul","","",20,null],[11,"mul_assign","","",20,{"i":[{"n":"self"},{"n":"ushort3"}]}],[11,"div","","",20,null],[11,"div_assign","","",20,{"i":[{"n":"self"},{"n":"ushort3"}]}],[11,"rem","","",20,null],[11,"rem_assign","","",20,{"i":[{"n":"self"},{"n":"ushort3"}]}],[11,"sum","","",20,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"product","","",20,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"sum","","",20,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"product","","",20,{"i":[{"n":"i"}],"o":{"n":"ushort3"}}],[11,"hash","","",20,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ordering"}}],[11,"add","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"sub","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"mul","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"div","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"rem","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"not","","",20,{"i":[{"n":"self"}],"o":{"n":"ushort3"}}],[11,"bitxor","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"bitxor","","",20,null],[11,"bitxor_assign","","",20,{"i":[{"n":"self"},{"n":"ushort3"}]}],[11,"bitor","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"bitor","","",20,null],[11,"bitor_assign","","",20,{"i":[{"n":"self"},{"n":"ushort3"}]}],[11,"bitand","","",20,{"i":[{"n":"self"},{"n":"ushort3"}],"o":{"n":"ushort3"}}],[11,"bitand","","",20,null],[11,"bitand_assign","","",20,{"i":[{"n":"self"},{"n":"ushort3"}]}],[11,"neg","","",20,{"i":[{"n":"self"}],"o":{"n":"ushort3"}}],[11,"shl","","",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort3"}}],[11,"shl_assign","","",20,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort3"}}],[11,"shr_assign","","",20,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"ushort4"}}],[11,"default","","",21,{"o":{"n":"ushort4"}}],[11,"partial_cmp","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"le","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"gt","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"ge","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"bool"}}],[11,"new","","",21,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort4"}}],[11,"from","","",21,null],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",21,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"zero","","",21,{"o":{"n":"self"}}],[11,"is_zero","","",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",21,{"o":{"n":"self"}}],[11,"deref","","",21,null],[11,"deref_mut","","",21,null],[11,"zero","","",21,{"o":{"n":"self"}}],[11,"is_zero","","",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",21,{"o":{"n":"self"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",21,null],[11,"add_assign","","",21,{"i":[{"n":"self"},{"n":"ushort4"}]}],[11,"sub","","",21,null],[11,"sub_assign","","",21,{"i":[{"n":"self"},{"n":"ushort4"}]}],[11,"mul","","",21,null],[11,"mul_assign","","",21,{"i":[{"n":"self"},{"n":"ushort4"}]}],[11,"div","","",21,null],[11,"div_assign","","",21,{"i":[{"n":"self"},{"n":"ushort4"}]}],[11,"rem","","",21,null],[11,"rem_assign","","",21,{"i":[{"n":"self"},{"n":"ushort4"}]}],[11,"sum","","",21,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"product","","",21,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"sum","","",21,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"product","","",21,{"i":[{"n":"i"}],"o":{"n":"ushort4"}}],[11,"hash","","",21,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ordering"}}],[11,"add","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"sub","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"mul","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"div","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"rem","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"not","","",21,{"i":[{"n":"self"}],"o":{"n":"ushort4"}}],[11,"bitxor","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"bitxor","","",21,null],[11,"bitxor_assign","","",21,{"i":[{"n":"self"},{"n":"ushort4"}]}],[11,"bitor","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"bitor","","",21,null],[11,"bitor_assign","","",21,{"i":[{"n":"self"},{"n":"ushort4"}]}],[11,"bitand","","",21,{"i":[{"n":"self"},{"n":"ushort4"}],"o":{"n":"ushort4"}}],[11,"bitand","","",21,null],[11,"bitand_assign","","",21,{"i":[{"n":"self"},{"n":"ushort4"}]}],[11,"neg","","",21,{"i":[{"n":"self"}],"o":{"n":"ushort4"}}],[11,"shl","","",21,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort4"}}],[11,"shl_assign","","",21,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",21,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort4"}}],[11,"shr_assign","","",21,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"ushort8"}}],[11,"default","","",22,{"o":{"n":"ushort8"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"le","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"gt","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"ge","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"bool"}}],[11,"new","","",22,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort8"}}],[11,"from","","",22,null],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",22,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"zero","","",22,{"o":{"n":"self"}}],[11,"is_zero","","",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",22,{"o":{"n":"self"}}],[11,"deref","","",22,null],[11,"deref_mut","","",22,null],[11,"zero","","",22,{"o":{"n":"self"}}],[11,"is_zero","","",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",22,{"o":{"n":"self"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",22,null],[11,"add_assign","","",22,{"i":[{"n":"self"},{"n":"ushort8"}]}],[11,"sub","","",22,null],[11,"sub_assign","","",22,{"i":[{"n":"self"},{"n":"ushort8"}]}],[11,"mul","","",22,null],[11,"mul_assign","","",22,{"i":[{"n":"self"},{"n":"ushort8"}]}],[11,"div","","",22,null],[11,"div_assign","","",22,{"i":[{"n":"self"},{"n":"ushort8"}]}],[11,"rem","","",22,null],[11,"rem_assign","","",22,{"i":[{"n":"self"},{"n":"ushort8"}]}],[11,"sum","","",22,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"product","","",22,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"sum","","",22,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"product","","",22,{"i":[{"n":"i"}],"o":{"n":"ushort8"}}],[11,"hash","","",22,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ordering"}}],[11,"add","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"sub","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"mul","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"div","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"rem","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"not","","",22,{"i":[{"n":"self"}],"o":{"n":"ushort8"}}],[11,"bitxor","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"bitxor","","",22,null],[11,"bitxor_assign","","",22,{"i":[{"n":"self"},{"n":"ushort8"}]}],[11,"bitor","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"bitor","","",22,null],[11,"bitor_assign","","",22,{"i":[{"n":"self"},{"n":"ushort8"}]}],[11,"bitand","","",22,{"i":[{"n":"self"},{"n":"ushort8"}],"o":{"n":"ushort8"}}],[11,"bitand","","",22,null],[11,"bitand_assign","","",22,{"i":[{"n":"self"},{"n":"ushort8"}]}],[11,"neg","","",22,{"i":[{"n":"self"}],"o":{"n":"ushort8"}}],[11,"shl","","",22,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort8"}}],[11,"shl_assign","","",22,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",22,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort8"}}],[11,"shr_assign","","",22,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"ushort16"}}],[11,"default","","",23,{"o":{"n":"ushort16"}}],[11,"partial_cmp","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"le","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"gt","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"ge","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"bool"}}],[11,"new","","",23,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ushort16"}}],[11,"from","","",23,null],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",23,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"zero","","",23,{"o":{"n":"self"}}],[11,"is_zero","","",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",23,{"o":{"n":"self"}}],[11,"deref","","",23,null],[11,"deref_mut","","",23,null],[11,"zero","","",23,{"o":{"n":"self"}}],[11,"is_zero","","",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",23,{"o":{"n":"self"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",23,null],[11,"add_assign","","",23,{"i":[{"n":"self"},{"n":"ushort16"}]}],[11,"sub","","",23,null],[11,"sub_assign","","",23,{"i":[{"n":"self"},{"n":"ushort16"}]}],[11,"mul","","",23,null],[11,"mul_assign","","",23,{"i":[{"n":"self"},{"n":"ushort16"}]}],[11,"div","","",23,null],[11,"div_assign","","",23,{"i":[{"n":"self"},{"n":"ushort16"}]}],[11,"rem","","",23,null],[11,"rem_assign","","",23,{"i":[{"n":"self"},{"n":"ushort16"}]}],[11,"sum","","",23,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"product","","",23,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"sum","","",23,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"product","","",23,{"i":[{"n":"i"}],"o":{"n":"ushort16"}}],[11,"hash","","",23,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ordering"}}],[11,"add","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"sub","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"mul","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"div","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"rem","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"not","","",23,{"i":[{"n":"self"}],"o":{"n":"ushort16"}}],[11,"bitxor","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"bitxor","","",23,null],[11,"bitxor_assign","","",23,{"i":[{"n":"self"},{"n":"ushort16"}]}],[11,"bitor","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"bitor","","",23,null],[11,"bitor_assign","","",23,{"i":[{"n":"self"},{"n":"ushort16"}]}],[11,"bitand","","",23,{"i":[{"n":"self"},{"n":"ushort16"}],"o":{"n":"ushort16"}}],[11,"bitand","","",23,null],[11,"bitand_assign","","",23,{"i":[{"n":"self"},{"n":"ushort16"}]}],[11,"neg","","",23,{"i":[{"n":"self"}],"o":{"n":"ushort16"}}],[11,"shl","","",23,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort16"}}],[11,"shl_assign","","",23,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",23,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ushort16"}}],[11,"shr_assign","","",23,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"default","","",24,{"o":{"n":"int"}}],[11,"partial_cmp","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"le","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"gt","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"ge","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"new","","",24,{"i":[{"n":"i32"}],"o":{"n":"int"}}],[11,"from","","",24,null],[11,"from","","",24,{"i":[{"n":"i32"}],"o":{"n":"int"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",24,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"zero","","",24,{"o":{"n":"self"}}],[11,"is_zero","","",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",24,{"o":{"n":"self"}}],[11,"deref","","",24,null],[11,"deref_mut","","",24,null],[11,"zero","","",24,{"o":{"n":"self"}}],[11,"is_zero","","",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",24,{"o":{"n":"self"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",24,null],[11,"add_assign","","",24,{"i":[{"n":"self"},{"n":"int"}]}],[11,"sub","","",24,null],[11,"sub_assign","","",24,{"i":[{"n":"self"},{"n":"int"}]}],[11,"mul","","",24,null],[11,"mul_assign","","",24,{"i":[{"n":"self"},{"n":"int"}]}],[11,"div","","",24,null],[11,"div_assign","","",24,{"i":[{"n":"self"},{"n":"int"}]}],[11,"rem","","",24,null],[11,"rem_assign","","",24,{"i":[{"n":"self"},{"n":"int"}]}],[11,"sum","","",24,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"product","","",24,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"sum","","",24,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"product","","",24,{"i":[{"n":"i"}],"o":{"n":"int"}}],[11,"hash","","",24,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"ordering"}}],[11,"add","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"sub","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"mul","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"div","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"rem","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"not","","",24,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"bitxor","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"bitxor","","",24,null],[11,"bitxor_assign","","",24,{"i":[{"n":"self"},{"n":"int"}]}],[11,"bitor","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"bitor","","",24,null],[11,"bitor_assign","","",24,{"i":[{"n":"self"},{"n":"int"}]}],[11,"bitand","","",24,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"int"}}],[11,"bitand","","",24,null],[11,"bitand_assign","","",24,{"i":[{"n":"self"},{"n":"int"}]}],[11,"neg","","",24,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"shl","","",24,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int"}}],[11,"shl_assign","","",24,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",24,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int"}}],[11,"shr_assign","","",24,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"int2"}}],[11,"default","","",25,{"o":{"n":"int2"}}],[11,"partial_cmp","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"le","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"gt","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"ge","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"bool"}}],[11,"new","","",25,{"i":[{"n":"i32"},{"n":"i32"}],"o":{"n":"int2"}}],[11,"from","","",25,null],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",25,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"zero","","",25,{"o":{"n":"self"}}],[11,"is_zero","","",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",25,{"o":{"n":"self"}}],[11,"deref","","",25,null],[11,"deref_mut","","",25,null],[11,"zero","","",25,{"o":{"n":"self"}}],[11,"is_zero","","",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",25,{"o":{"n":"self"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",25,null],[11,"add_assign","","",25,{"i":[{"n":"self"},{"n":"int2"}]}],[11,"sub","","",25,null],[11,"sub_assign","","",25,{"i":[{"n":"self"},{"n":"int2"}]}],[11,"mul","","",25,null],[11,"mul_assign","","",25,{"i":[{"n":"self"},{"n":"int2"}]}],[11,"div","","",25,null],[11,"div_assign","","",25,{"i":[{"n":"self"},{"n":"int2"}]}],[11,"rem","","",25,null],[11,"rem_assign","","",25,{"i":[{"n":"self"},{"n":"int2"}]}],[11,"sum","","",25,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"product","","",25,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"sum","","",25,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"product","","",25,{"i":[{"n":"i"}],"o":{"n":"int2"}}],[11,"hash","","",25,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"ordering"}}],[11,"add","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"sub","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"mul","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"div","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"rem","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"not","","",25,{"i":[{"n":"self"}],"o":{"n":"int2"}}],[11,"bitxor","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"bitxor","","",25,null],[11,"bitxor_assign","","",25,{"i":[{"n":"self"},{"n":"int2"}]}],[11,"bitor","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"bitor","","",25,null],[11,"bitor_assign","","",25,{"i":[{"n":"self"},{"n":"int2"}]}],[11,"bitand","","",25,{"i":[{"n":"self"},{"n":"int2"}],"o":{"n":"int2"}}],[11,"bitand","","",25,null],[11,"bitand_assign","","",25,{"i":[{"n":"self"},{"n":"int2"}]}],[11,"neg","","",25,{"i":[{"n":"self"}],"o":{"n":"int2"}}],[11,"shl","","",25,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int2"}}],[11,"shl_assign","","",25,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",25,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int2"}}],[11,"shr_assign","","",25,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"int3"}}],[11,"default","","",26,{"o":{"n":"int3"}}],[11,"partial_cmp","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"le","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"gt","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"ge","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"bool"}}],[11,"new","","",26,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int3"}}],[11,"from","","",26,null],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",26,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"zero","","",26,{"o":{"n":"self"}}],[11,"is_zero","","",26,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",26,{"o":{"n":"self"}}],[11,"deref","","",26,null],[11,"deref_mut","","",26,null],[11,"zero","","",26,{"o":{"n":"self"}}],[11,"is_zero","","",26,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",26,{"o":{"n":"self"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",26,null],[11,"add_assign","","",26,{"i":[{"n":"self"},{"n":"int3"}]}],[11,"sub","","",26,null],[11,"sub_assign","","",26,{"i":[{"n":"self"},{"n":"int3"}]}],[11,"mul","","",26,null],[11,"mul_assign","","",26,{"i":[{"n":"self"},{"n":"int3"}]}],[11,"div","","",26,null],[11,"div_assign","","",26,{"i":[{"n":"self"},{"n":"int3"}]}],[11,"rem","","",26,null],[11,"rem_assign","","",26,{"i":[{"n":"self"},{"n":"int3"}]}],[11,"sum","","",26,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"product","","",26,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"sum","","",26,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"product","","",26,{"i":[{"n":"i"}],"o":{"n":"int3"}}],[11,"hash","","",26,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"ordering"}}],[11,"add","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"sub","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"mul","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"div","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"rem","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"not","","",26,{"i":[{"n":"self"}],"o":{"n":"int3"}}],[11,"bitxor","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"bitxor","","",26,null],[11,"bitxor_assign","","",26,{"i":[{"n":"self"},{"n":"int3"}]}],[11,"bitor","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"bitor","","",26,null],[11,"bitor_assign","","",26,{"i":[{"n":"self"},{"n":"int3"}]}],[11,"bitand","","",26,{"i":[{"n":"self"},{"n":"int3"}],"o":{"n":"int3"}}],[11,"bitand","","",26,null],[11,"bitand_assign","","",26,{"i":[{"n":"self"},{"n":"int3"}]}],[11,"neg","","",26,{"i":[{"n":"self"}],"o":{"n":"int3"}}],[11,"shl","","",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int3"}}],[11,"shl_assign","","",26,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int3"}}],[11,"shr_assign","","",26,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"int4"}}],[11,"default","","",27,{"o":{"n":"int4"}}],[11,"partial_cmp","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"le","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"gt","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"ge","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"bool"}}],[11,"new","","",27,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int4"}}],[11,"from","","",27,null],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",27,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"zero","","",27,{"o":{"n":"self"}}],[11,"is_zero","","",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",27,{"o":{"n":"self"}}],[11,"deref","","",27,null],[11,"deref_mut","","",27,null],[11,"zero","","",27,{"o":{"n":"self"}}],[11,"is_zero","","",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",27,{"o":{"n":"self"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",27,null],[11,"add_assign","","",27,{"i":[{"n":"self"},{"n":"int4"}]}],[11,"sub","","",27,null],[11,"sub_assign","","",27,{"i":[{"n":"self"},{"n":"int4"}]}],[11,"mul","","",27,null],[11,"mul_assign","","",27,{"i":[{"n":"self"},{"n":"int4"}]}],[11,"div","","",27,null],[11,"div_assign","","",27,{"i":[{"n":"self"},{"n":"int4"}]}],[11,"rem","","",27,null],[11,"rem_assign","","",27,{"i":[{"n":"self"},{"n":"int4"}]}],[11,"sum","","",27,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"product","","",27,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"sum","","",27,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"product","","",27,{"i":[{"n":"i"}],"o":{"n":"int4"}}],[11,"hash","","",27,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"ordering"}}],[11,"add","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"sub","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"mul","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"div","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"rem","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"not","","",27,{"i":[{"n":"self"}],"o":{"n":"int4"}}],[11,"bitxor","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"bitxor","","",27,null],[11,"bitxor_assign","","",27,{"i":[{"n":"self"},{"n":"int4"}]}],[11,"bitor","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"bitor","","",27,null],[11,"bitor_assign","","",27,{"i":[{"n":"self"},{"n":"int4"}]}],[11,"bitand","","",27,{"i":[{"n":"self"},{"n":"int4"}],"o":{"n":"int4"}}],[11,"bitand","","",27,null],[11,"bitand_assign","","",27,{"i":[{"n":"self"},{"n":"int4"}]}],[11,"neg","","",27,{"i":[{"n":"self"}],"o":{"n":"int4"}}],[11,"shl","","",27,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int4"}}],[11,"shl_assign","","",27,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",27,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int4"}}],[11,"shr_assign","","",27,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"int8"}}],[11,"default","","",28,{"o":{"n":"int8"}}],[11,"partial_cmp","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"le","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"gt","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"ge","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"bool"}}],[11,"new","","",28,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int8"}}],[11,"from","","",28,null],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",28,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"zero","","",28,{"o":{"n":"self"}}],[11,"is_zero","","",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",28,{"o":{"n":"self"}}],[11,"deref","","",28,null],[11,"deref_mut","","",28,null],[11,"zero","","",28,{"o":{"n":"self"}}],[11,"is_zero","","",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",28,{"o":{"n":"self"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",28,null],[11,"add_assign","","",28,{"i":[{"n":"self"},{"n":"int8"}]}],[11,"sub","","",28,null],[11,"sub_assign","","",28,{"i":[{"n":"self"},{"n":"int8"}]}],[11,"mul","","",28,null],[11,"mul_assign","","",28,{"i":[{"n":"self"},{"n":"int8"}]}],[11,"div","","",28,null],[11,"div_assign","","",28,{"i":[{"n":"self"},{"n":"int8"}]}],[11,"rem","","",28,null],[11,"rem_assign","","",28,{"i":[{"n":"self"},{"n":"int8"}]}],[11,"sum","","",28,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"product","","",28,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"sum","","",28,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"product","","",28,{"i":[{"n":"i"}],"o":{"n":"int8"}}],[11,"hash","","",28,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"ordering"}}],[11,"add","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"sub","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"mul","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"div","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"rem","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"not","","",28,{"i":[{"n":"self"}],"o":{"n":"int8"}}],[11,"bitxor","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"bitxor","","",28,null],[11,"bitxor_assign","","",28,{"i":[{"n":"self"},{"n":"int8"}]}],[11,"bitor","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"bitor","","",28,null],[11,"bitor_assign","","",28,{"i":[{"n":"self"},{"n":"int8"}]}],[11,"bitand","","",28,{"i":[{"n":"self"},{"n":"int8"}],"o":{"n":"int8"}}],[11,"bitand","","",28,null],[11,"bitand_assign","","",28,{"i":[{"n":"self"},{"n":"int8"}]}],[11,"neg","","",28,{"i":[{"n":"self"}],"o":{"n":"int8"}}],[11,"shl","","",28,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int8"}}],[11,"shl_assign","","",28,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",28,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int8"}}],[11,"shr_assign","","",28,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"int16"}}],[11,"default","","",29,{"o":{"n":"int16"}}],[11,"partial_cmp","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"le","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"gt","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"ge","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"bool"}}],[11,"new","","",29,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"int16"}}],[11,"from","","",29,null],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",29,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"zero","","",29,{"o":{"n":"self"}}],[11,"is_zero","","",29,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",29,{"o":{"n":"self"}}],[11,"deref","","",29,null],[11,"deref_mut","","",29,null],[11,"zero","","",29,{"o":{"n":"self"}}],[11,"is_zero","","",29,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",29,{"o":{"n":"self"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",29,null],[11,"add_assign","","",29,{"i":[{"n":"self"},{"n":"int16"}]}],[11,"sub","","",29,null],[11,"sub_assign","","",29,{"i":[{"n":"self"},{"n":"int16"}]}],[11,"mul","","",29,null],[11,"mul_assign","","",29,{"i":[{"n":"self"},{"n":"int16"}]}],[11,"div","","",29,null],[11,"div_assign","","",29,{"i":[{"n":"self"},{"n":"int16"}]}],[11,"rem","","",29,null],[11,"rem_assign","","",29,{"i":[{"n":"self"},{"n":"int16"}]}],[11,"sum","","",29,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"product","","",29,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"sum","","",29,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"product","","",29,{"i":[{"n":"i"}],"o":{"n":"int16"}}],[11,"hash","","",29,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"ordering"}}],[11,"add","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"sub","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"mul","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"div","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"rem","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"not","","",29,{"i":[{"n":"self"}],"o":{"n":"int16"}}],[11,"bitxor","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"bitxor","","",29,null],[11,"bitxor_assign","","",29,{"i":[{"n":"self"},{"n":"int16"}]}],[11,"bitor","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"bitor","","",29,null],[11,"bitor_assign","","",29,{"i":[{"n":"self"},{"n":"int16"}]}],[11,"bitand","","",29,{"i":[{"n":"self"},{"n":"int16"}],"o":{"n":"int16"}}],[11,"bitand","","",29,null],[11,"bitand_assign","","",29,{"i":[{"n":"self"},{"n":"int16"}]}],[11,"neg","","",29,{"i":[{"n":"self"}],"o":{"n":"int16"}}],[11,"shl","","",29,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int16"}}],[11,"shl_assign","","",29,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",29,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"int16"}}],[11,"shr_assign","","",29,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"default","","",30,{"o":{"n":"uint"}}],[11,"partial_cmp","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"le","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"gt","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"ge","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"new","","",30,{"i":[{"n":"u32"}],"o":{"n":"uint"}}],[11,"from","","",30,null],[11,"from","","",30,{"i":[{"n":"u32"}],"o":{"n":"uint"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",30,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"zero","","",30,{"o":{"n":"self"}}],[11,"is_zero","","",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",30,{"o":{"n":"self"}}],[11,"deref","","",30,null],[11,"deref_mut","","",30,null],[11,"zero","","",30,{"o":{"n":"self"}}],[11,"is_zero","","",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",30,{"o":{"n":"self"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",30,null],[11,"add_assign","","",30,{"i":[{"n":"self"},{"n":"uint"}]}],[11,"sub","","",30,null],[11,"sub_assign","","",30,{"i":[{"n":"self"},{"n":"uint"}]}],[11,"mul","","",30,null],[11,"mul_assign","","",30,{"i":[{"n":"self"},{"n":"uint"}]}],[11,"div","","",30,null],[11,"div_assign","","",30,{"i":[{"n":"self"},{"n":"uint"}]}],[11,"rem","","",30,null],[11,"rem_assign","","",30,{"i":[{"n":"self"},{"n":"uint"}]}],[11,"sum","","",30,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"product","","",30,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"sum","","",30,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"product","","",30,{"i":[{"n":"i"}],"o":{"n":"uint"}}],[11,"hash","","",30,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"ordering"}}],[11,"add","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"sub","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"mul","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"div","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"rem","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"not","","",30,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"bitxor","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"bitxor","","",30,null],[11,"bitxor_assign","","",30,{"i":[{"n":"self"},{"n":"uint"}]}],[11,"bitor","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"bitor","","",30,null],[11,"bitor_assign","","",30,{"i":[{"n":"self"},{"n":"uint"}]}],[11,"bitand","","",30,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"uint"}}],[11,"bitand","","",30,null],[11,"bitand_assign","","",30,{"i":[{"n":"self"},{"n":"uint"}]}],[11,"neg","","",30,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"shl","","",30,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint"}}],[11,"shl_assign","","",30,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",30,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint"}}],[11,"shr_assign","","",30,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"uint2"}}],[11,"default","","",31,{"o":{"n":"uint2"}}],[11,"partial_cmp","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"le","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"gt","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"ge","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"bool"}}],[11,"new","","",31,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"uint2"}}],[11,"from","","",31,null],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",31,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"zero","","",31,{"o":{"n":"self"}}],[11,"is_zero","","",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",31,{"o":{"n":"self"}}],[11,"deref","","",31,null],[11,"deref_mut","","",31,null],[11,"zero","","",31,{"o":{"n":"self"}}],[11,"is_zero","","",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",31,{"o":{"n":"self"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",31,null],[11,"add_assign","","",31,{"i":[{"n":"self"},{"n":"uint2"}]}],[11,"sub","","",31,null],[11,"sub_assign","","",31,{"i":[{"n":"self"},{"n":"uint2"}]}],[11,"mul","","",31,null],[11,"mul_assign","","",31,{"i":[{"n":"self"},{"n":"uint2"}]}],[11,"div","","",31,null],[11,"div_assign","","",31,{"i":[{"n":"self"},{"n":"uint2"}]}],[11,"rem","","",31,null],[11,"rem_assign","","",31,{"i":[{"n":"self"},{"n":"uint2"}]}],[11,"sum","","",31,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"product","","",31,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"sum","","",31,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"product","","",31,{"i":[{"n":"i"}],"o":{"n":"uint2"}}],[11,"hash","","",31,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"ordering"}}],[11,"add","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"sub","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"mul","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"div","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"rem","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"not","","",31,{"i":[{"n":"self"}],"o":{"n":"uint2"}}],[11,"bitxor","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"bitxor","","",31,null],[11,"bitxor_assign","","",31,{"i":[{"n":"self"},{"n":"uint2"}]}],[11,"bitor","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"bitor","","",31,null],[11,"bitor_assign","","",31,{"i":[{"n":"self"},{"n":"uint2"}]}],[11,"bitand","","",31,{"i":[{"n":"self"},{"n":"uint2"}],"o":{"n":"uint2"}}],[11,"bitand","","",31,null],[11,"bitand_assign","","",31,{"i":[{"n":"self"},{"n":"uint2"}]}],[11,"neg","","",31,{"i":[{"n":"self"}],"o":{"n":"uint2"}}],[11,"shl","","",31,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint2"}}],[11,"shl_assign","","",31,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",31,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint2"}}],[11,"shr_assign","","",31,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"uint3"}}],[11,"default","","",32,{"o":{"n":"uint3"}}],[11,"partial_cmp","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"le","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"gt","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"ge","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"bool"}}],[11,"new","","",32,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"uint3"}}],[11,"from","","",32,null],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",32,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"zero","","",32,{"o":{"n":"self"}}],[11,"is_zero","","",32,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",32,{"o":{"n":"self"}}],[11,"deref","","",32,null],[11,"deref_mut","","",32,null],[11,"zero","","",32,{"o":{"n":"self"}}],[11,"is_zero","","",32,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",32,{"o":{"n":"self"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",32,null],[11,"add_assign","","",32,{"i":[{"n":"self"},{"n":"uint3"}]}],[11,"sub","","",32,null],[11,"sub_assign","","",32,{"i":[{"n":"self"},{"n":"uint3"}]}],[11,"mul","","",32,null],[11,"mul_assign","","",32,{"i":[{"n":"self"},{"n":"uint3"}]}],[11,"div","","",32,null],[11,"div_assign","","",32,{"i":[{"n":"self"},{"n":"uint3"}]}],[11,"rem","","",32,null],[11,"rem_assign","","",32,{"i":[{"n":"self"},{"n":"uint3"}]}],[11,"sum","","",32,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"product","","",32,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"sum","","",32,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"product","","",32,{"i":[{"n":"i"}],"o":{"n":"uint3"}}],[11,"hash","","",32,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"ordering"}}],[11,"add","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"sub","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"mul","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"div","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"rem","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"not","","",32,{"i":[{"n":"self"}],"o":{"n":"uint3"}}],[11,"bitxor","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"bitxor","","",32,null],[11,"bitxor_assign","","",32,{"i":[{"n":"self"},{"n":"uint3"}]}],[11,"bitor","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"bitor","","",32,null],[11,"bitor_assign","","",32,{"i":[{"n":"self"},{"n":"uint3"}]}],[11,"bitand","","",32,{"i":[{"n":"self"},{"n":"uint3"}],"o":{"n":"uint3"}}],[11,"bitand","","",32,null],[11,"bitand_assign","","",32,{"i":[{"n":"self"},{"n":"uint3"}]}],[11,"neg","","",32,{"i":[{"n":"self"}],"o":{"n":"uint3"}}],[11,"shl","","",32,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint3"}}],[11,"shl_assign","","",32,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",32,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint3"}}],[11,"shr_assign","","",32,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"uint4"}}],[11,"default","","",33,{"o":{"n":"uint4"}}],[11,"partial_cmp","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"le","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"gt","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"ge","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"bool"}}],[11,"new","","",33,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"uint4"}}],[11,"from","","",33,null],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",33,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"zero","","",33,{"o":{"n":"self"}}],[11,"is_zero","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",33,{"o":{"n":"self"}}],[11,"deref","","",33,null],[11,"deref_mut","","",33,null],[11,"zero","","",33,{"o":{"n":"self"}}],[11,"is_zero","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",33,{"o":{"n":"self"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",33,null],[11,"add_assign","","",33,{"i":[{"n":"self"},{"n":"uint4"}]}],[11,"sub","","",33,null],[11,"sub_assign","","",33,{"i":[{"n":"self"},{"n":"uint4"}]}],[11,"mul","","",33,null],[11,"mul_assign","","",33,{"i":[{"n":"self"},{"n":"uint4"}]}],[11,"div","","",33,null],[11,"div_assign","","",33,{"i":[{"n":"self"},{"n":"uint4"}]}],[11,"rem","","",33,null],[11,"rem_assign","","",33,{"i":[{"n":"self"},{"n":"uint4"}]}],[11,"sum","","",33,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"product","","",33,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"sum","","",33,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"product","","",33,{"i":[{"n":"i"}],"o":{"n":"uint4"}}],[11,"hash","","",33,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"ordering"}}],[11,"add","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"sub","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"mul","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"div","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"rem","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"not","","",33,{"i":[{"n":"self"}],"o":{"n":"uint4"}}],[11,"bitxor","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"bitxor","","",33,null],[11,"bitxor_assign","","",33,{"i":[{"n":"self"},{"n":"uint4"}]}],[11,"bitor","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"bitor","","",33,null],[11,"bitor_assign","","",33,{"i":[{"n":"self"},{"n":"uint4"}]}],[11,"bitand","","",33,{"i":[{"n":"self"},{"n":"uint4"}],"o":{"n":"uint4"}}],[11,"bitand","","",33,null],[11,"bitand_assign","","",33,{"i":[{"n":"self"},{"n":"uint4"}]}],[11,"neg","","",33,{"i":[{"n":"self"}],"o":{"n":"uint4"}}],[11,"shl","","",33,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint4"}}],[11,"shl_assign","","",33,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",33,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint4"}}],[11,"shr_assign","","",33,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"uint8"}}],[11,"default","","",34,{"o":{"n":"uint8"}}],[11,"partial_cmp","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"le","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"gt","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"ge","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"bool"}}],[11,"new","","",34,{"i":[{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"},{"n":"i8"}],"o":{"n":"uint8"}}],[11,"from","","",34,null],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",34,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"zero","","",34,{"o":{"n":"self"}}],[11,"is_zero","","",34,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",34,{"o":{"n":"self"}}],[11,"deref","","",34,null],[11,"deref_mut","","",34,null],[11,"zero","","",34,{"o":{"n":"self"}}],[11,"is_zero","","",34,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",34,{"o":{"n":"self"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",34,null],[11,"add_assign","","",34,{"i":[{"n":"self"},{"n":"uint8"}]}],[11,"sub","","",34,null],[11,"sub_assign","","",34,{"i":[{"n":"self"},{"n":"uint8"}]}],[11,"mul","","",34,null],[11,"mul_assign","","",34,{"i":[{"n":"self"},{"n":"uint8"}]}],[11,"div","","",34,null],[11,"div_assign","","",34,{"i":[{"n":"self"},{"n":"uint8"}]}],[11,"rem","","",34,null],[11,"rem_assign","","",34,{"i":[{"n":"self"},{"n":"uint8"}]}],[11,"sum","","",34,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"product","","",34,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"sum","","",34,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"product","","",34,{"i":[{"n":"i"}],"o":{"n":"uint8"}}],[11,"hash","","",34,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"ordering"}}],[11,"add","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"sub","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"mul","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"div","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"rem","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"not","","",34,{"i":[{"n":"self"}],"o":{"n":"uint8"}}],[11,"bitxor","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"bitxor","","",34,null],[11,"bitxor_assign","","",34,{"i":[{"n":"self"},{"n":"uint8"}]}],[11,"bitor","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"bitor","","",34,null],[11,"bitor_assign","","",34,{"i":[{"n":"self"},{"n":"uint8"}]}],[11,"bitand","","",34,{"i":[{"n":"self"},{"n":"uint8"}],"o":{"n":"uint8"}}],[11,"bitand","","",34,null],[11,"bitand_assign","","",34,{"i":[{"n":"self"},{"n":"uint8"}]}],[11,"neg","","",34,{"i":[{"n":"self"}],"o":{"n":"uint8"}}],[11,"shl","","",34,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint8"}}],[11,"shl_assign","","",34,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",34,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint8"}}],[11,"shr_assign","","",34,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"uint16"}}],[11,"default","","",35,{"o":{"n":"uint16"}}],[11,"partial_cmp","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"le","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"gt","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"ge","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"bool"}}],[11,"new","","",35,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"uint16"}}],[11,"from","","",35,null],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",35,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"zero","","",35,{"o":{"n":"self"}}],[11,"is_zero","","",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",35,{"o":{"n":"self"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"zero","","",35,{"o":{"n":"self"}}],[11,"is_zero","","",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",35,{"o":{"n":"self"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",35,null],[11,"add_assign","","",35,{"i":[{"n":"self"},{"n":"uint16"}]}],[11,"sub","","",35,null],[11,"sub_assign","","",35,{"i":[{"n":"self"},{"n":"uint16"}]}],[11,"mul","","",35,null],[11,"mul_assign","","",35,{"i":[{"n":"self"},{"n":"uint16"}]}],[11,"div","","",35,null],[11,"div_assign","","",35,{"i":[{"n":"self"},{"n":"uint16"}]}],[11,"rem","","",35,null],[11,"rem_assign","","",35,{"i":[{"n":"self"},{"n":"uint16"}]}],[11,"sum","","",35,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"product","","",35,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"sum","","",35,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"product","","",35,{"i":[{"n":"i"}],"o":{"n":"uint16"}}],[11,"hash","","",35,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"ordering"}}],[11,"add","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"sub","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"mul","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"div","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"rem","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"not","","",35,{"i":[{"n":"self"}],"o":{"n":"uint16"}}],[11,"bitxor","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"bitxor","","",35,null],[11,"bitxor_assign","","",35,{"i":[{"n":"self"},{"n":"uint16"}]}],[11,"bitor","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"bitor","","",35,null],[11,"bitor_assign","","",35,{"i":[{"n":"self"},{"n":"uint16"}]}],[11,"bitand","","",35,{"i":[{"n":"self"},{"n":"uint16"}],"o":{"n":"uint16"}}],[11,"bitand","","",35,null],[11,"bitand_assign","","",35,{"i":[{"n":"self"},{"n":"uint16"}]}],[11,"neg","","",35,{"i":[{"n":"self"}],"o":{"n":"uint16"}}],[11,"shl","","",35,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint16"}}],[11,"shl_assign","","",35,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",35,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"uint16"}}],[11,"shr_assign","","",35,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"long"}}],[11,"default","","",36,{"o":{"n":"long"}}],[11,"partial_cmp","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"le","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"gt","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"ge","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"bool"}}],[11,"new","","",36,{"i":[{"n":"i64"}],"o":{"n":"long"}}],[11,"from","","",36,null],[11,"from","","",36,{"i":[{"n":"i64"}],"o":{"n":"long"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",36,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"zero","","",36,{"o":{"n":"self"}}],[11,"is_zero","","",36,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",36,{"o":{"n":"self"}}],[11,"deref","","",36,null],[11,"deref_mut","","",36,null],[11,"zero","","",36,{"o":{"n":"self"}}],[11,"is_zero","","",36,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",36,{"o":{"n":"self"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",36,null],[11,"add_assign","","",36,{"i":[{"n":"self"},{"n":"long"}]}],[11,"sub","","",36,null],[11,"sub_assign","","",36,{"i":[{"n":"self"},{"n":"long"}]}],[11,"mul","","",36,null],[11,"mul_assign","","",36,{"i":[{"n":"self"},{"n":"long"}]}],[11,"div","","",36,null],[11,"div_assign","","",36,{"i":[{"n":"self"},{"n":"long"}]}],[11,"rem","","",36,null],[11,"rem_assign","","",36,{"i":[{"n":"self"},{"n":"long"}]}],[11,"sum","","",36,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"product","","",36,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"sum","","",36,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"product","","",36,{"i":[{"n":"i"}],"o":{"n":"long"}}],[11,"hash","","",36,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"ordering"}}],[11,"add","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"sub","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"mul","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"div","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"rem","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"not","","",36,{"i":[{"n":"self"}],"o":{"n":"long"}}],[11,"bitxor","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"bitxor","","",36,null],[11,"bitxor_assign","","",36,{"i":[{"n":"self"},{"n":"long"}]}],[11,"bitor","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"bitor","","",36,null],[11,"bitor_assign","","",36,{"i":[{"n":"self"},{"n":"long"}]}],[11,"bitand","","",36,{"i":[{"n":"self"},{"n":"long"}],"o":{"n":"long"}}],[11,"bitand","","",36,null],[11,"bitand_assign","","",36,{"i":[{"n":"self"},{"n":"long"}]}],[11,"neg","","",36,{"i":[{"n":"self"}],"o":{"n":"long"}}],[11,"shl","","",36,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long"}}],[11,"shl_assign","","",36,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",36,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long"}}],[11,"shr_assign","","",36,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"long2"}}],[11,"default","","",37,{"o":{"n":"long2"}}],[11,"partial_cmp","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"le","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"gt","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"ge","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"bool"}}],[11,"new","","",37,{"i":[{"n":"i64"},{"n":"i64"}],"o":{"n":"long2"}}],[11,"from","","",37,null],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",37,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"zero","","",37,{"o":{"n":"self"}}],[11,"is_zero","","",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",37,{"o":{"n":"self"}}],[11,"deref","","",37,null],[11,"deref_mut","","",37,null],[11,"zero","","",37,{"o":{"n":"self"}}],[11,"is_zero","","",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",37,{"o":{"n":"self"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",37,null],[11,"add_assign","","",37,{"i":[{"n":"self"},{"n":"long2"}]}],[11,"sub","","",37,null],[11,"sub_assign","","",37,{"i":[{"n":"self"},{"n":"long2"}]}],[11,"mul","","",37,null],[11,"mul_assign","","",37,{"i":[{"n":"self"},{"n":"long2"}]}],[11,"div","","",37,null],[11,"div_assign","","",37,{"i":[{"n":"self"},{"n":"long2"}]}],[11,"rem","","",37,null],[11,"rem_assign","","",37,{"i":[{"n":"self"},{"n":"long2"}]}],[11,"sum","","",37,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"product","","",37,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"sum","","",37,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"product","","",37,{"i":[{"n":"i"}],"o":{"n":"long2"}}],[11,"hash","","",37,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"ordering"}}],[11,"add","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"sub","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"mul","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"div","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"rem","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"not","","",37,{"i":[{"n":"self"}],"o":{"n":"long2"}}],[11,"bitxor","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"bitxor","","",37,null],[11,"bitxor_assign","","",37,{"i":[{"n":"self"},{"n":"long2"}]}],[11,"bitor","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"bitor","","",37,null],[11,"bitor_assign","","",37,{"i":[{"n":"self"},{"n":"long2"}]}],[11,"bitand","","",37,{"i":[{"n":"self"},{"n":"long2"}],"o":{"n":"long2"}}],[11,"bitand","","",37,null],[11,"bitand_assign","","",37,{"i":[{"n":"self"},{"n":"long2"}]}],[11,"neg","","",37,{"i":[{"n":"self"}],"o":{"n":"long2"}}],[11,"shl","","",37,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long2"}}],[11,"shl_assign","","",37,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",37,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long2"}}],[11,"shr_assign","","",37,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"long3"}}],[11,"default","","",38,{"o":{"n":"long3"}}],[11,"partial_cmp","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"le","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"gt","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"ge","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"bool"}}],[11,"new","","",38,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long3"}}],[11,"from","","",38,null],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",38,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"zero","","",38,{"o":{"n":"self"}}],[11,"is_zero","","",38,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",38,{"o":{"n":"self"}}],[11,"deref","","",38,null],[11,"deref_mut","","",38,null],[11,"zero","","",38,{"o":{"n":"self"}}],[11,"is_zero","","",38,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",38,{"o":{"n":"self"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",38,null],[11,"add_assign","","",38,{"i":[{"n":"self"},{"n":"long3"}]}],[11,"sub","","",38,null],[11,"sub_assign","","",38,{"i":[{"n":"self"},{"n":"long3"}]}],[11,"mul","","",38,null],[11,"mul_assign","","",38,{"i":[{"n":"self"},{"n":"long3"}]}],[11,"div","","",38,null],[11,"div_assign","","",38,{"i":[{"n":"self"},{"n":"long3"}]}],[11,"rem","","",38,null],[11,"rem_assign","","",38,{"i":[{"n":"self"},{"n":"long3"}]}],[11,"sum","","",38,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"product","","",38,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"sum","","",38,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"product","","",38,{"i":[{"n":"i"}],"o":{"n":"long3"}}],[11,"hash","","",38,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"ordering"}}],[11,"add","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"sub","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"mul","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"div","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"rem","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"not","","",38,{"i":[{"n":"self"}],"o":{"n":"long3"}}],[11,"bitxor","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"bitxor","","",38,null],[11,"bitxor_assign","","",38,{"i":[{"n":"self"},{"n":"long3"}]}],[11,"bitor","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"bitor","","",38,null],[11,"bitor_assign","","",38,{"i":[{"n":"self"},{"n":"long3"}]}],[11,"bitand","","",38,{"i":[{"n":"self"},{"n":"long3"}],"o":{"n":"long3"}}],[11,"bitand","","",38,null],[11,"bitand_assign","","",38,{"i":[{"n":"self"},{"n":"long3"}]}],[11,"neg","","",38,{"i":[{"n":"self"}],"o":{"n":"long3"}}],[11,"shl","","",38,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long3"}}],[11,"shl_assign","","",38,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",38,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long3"}}],[11,"shr_assign","","",38,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"long4"}}],[11,"default","","",39,{"o":{"n":"long4"}}],[11,"partial_cmp","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"le","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"gt","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"ge","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"bool"}}],[11,"new","","",39,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long4"}}],[11,"from","","",39,null],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",39,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"zero","","",39,{"o":{"n":"self"}}],[11,"is_zero","","",39,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",39,{"o":{"n":"self"}}],[11,"deref","","",39,null],[11,"deref_mut","","",39,null],[11,"zero","","",39,{"o":{"n":"self"}}],[11,"is_zero","","",39,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",39,{"o":{"n":"self"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",39,null],[11,"add_assign","","",39,{"i":[{"n":"self"},{"n":"long4"}]}],[11,"sub","","",39,null],[11,"sub_assign","","",39,{"i":[{"n":"self"},{"n":"long4"}]}],[11,"mul","","",39,null],[11,"mul_assign","","",39,{"i":[{"n":"self"},{"n":"long4"}]}],[11,"div","","",39,null],[11,"div_assign","","",39,{"i":[{"n":"self"},{"n":"long4"}]}],[11,"rem","","",39,null],[11,"rem_assign","","",39,{"i":[{"n":"self"},{"n":"long4"}]}],[11,"sum","","",39,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"product","","",39,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"sum","","",39,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"product","","",39,{"i":[{"n":"i"}],"o":{"n":"long4"}}],[11,"hash","","",39,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"ordering"}}],[11,"add","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"sub","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"mul","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"div","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"rem","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"not","","",39,{"i":[{"n":"self"}],"o":{"n":"long4"}}],[11,"bitxor","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"bitxor","","",39,null],[11,"bitxor_assign","","",39,{"i":[{"n":"self"},{"n":"long4"}]}],[11,"bitor","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"bitor","","",39,null],[11,"bitor_assign","","",39,{"i":[{"n":"self"},{"n":"long4"}]}],[11,"bitand","","",39,{"i":[{"n":"self"},{"n":"long4"}],"o":{"n":"long4"}}],[11,"bitand","","",39,null],[11,"bitand_assign","","",39,{"i":[{"n":"self"},{"n":"long4"}]}],[11,"neg","","",39,{"i":[{"n":"self"}],"o":{"n":"long4"}}],[11,"shl","","",39,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long4"}}],[11,"shl_assign","","",39,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",39,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long4"}}],[11,"shr_assign","","",39,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"long8"}}],[11,"default","","",40,{"o":{"n":"long8"}}],[11,"partial_cmp","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"le","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"gt","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"ge","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"bool"}}],[11,"new","","",40,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long8"}}],[11,"from","","",40,null],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",40,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"zero","","",40,{"o":{"n":"self"}}],[11,"is_zero","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",40,{"o":{"n":"self"}}],[11,"deref","","",40,null],[11,"deref_mut","","",40,null],[11,"zero","","",40,{"o":{"n":"self"}}],[11,"is_zero","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",40,{"o":{"n":"self"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",40,null],[11,"add_assign","","",40,{"i":[{"n":"self"},{"n":"long8"}]}],[11,"sub","","",40,null],[11,"sub_assign","","",40,{"i":[{"n":"self"},{"n":"long8"}]}],[11,"mul","","",40,null],[11,"mul_assign","","",40,{"i":[{"n":"self"},{"n":"long8"}]}],[11,"div","","",40,null],[11,"div_assign","","",40,{"i":[{"n":"self"},{"n":"long8"}]}],[11,"rem","","",40,null],[11,"rem_assign","","",40,{"i":[{"n":"self"},{"n":"long8"}]}],[11,"sum","","",40,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"product","","",40,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"sum","","",40,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"product","","",40,{"i":[{"n":"i"}],"o":{"n":"long8"}}],[11,"hash","","",40,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"ordering"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"not","","",40,{"i":[{"n":"self"}],"o":{"n":"long8"}}],[11,"bitxor","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"bitxor","","",40,null],[11,"bitxor_assign","","",40,{"i":[{"n":"self"},{"n":"long8"}]}],[11,"bitor","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"bitor","","",40,null],[11,"bitor_assign","","",40,{"i":[{"n":"self"},{"n":"long8"}]}],[11,"bitand","","",40,{"i":[{"n":"self"},{"n":"long8"}],"o":{"n":"long8"}}],[11,"bitand","","",40,null],[11,"bitand_assign","","",40,{"i":[{"n":"self"},{"n":"long8"}]}],[11,"neg","","",40,{"i":[{"n":"self"}],"o":{"n":"long8"}}],[11,"shl","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long8"}}],[11,"shl_assign","","",40,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long8"}}],[11,"shr_assign","","",40,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"long16"}}],[11,"default","","",41,{"o":{"n":"long16"}}],[11,"partial_cmp","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"le","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"gt","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"ge","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"bool"}}],[11,"new","","",41,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"long16"}}],[11,"from","","",41,null],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",41,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"zero","","",41,{"o":{"n":"self"}}],[11,"is_zero","","",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",41,{"o":{"n":"self"}}],[11,"deref","","",41,null],[11,"deref_mut","","",41,null],[11,"zero","","",41,{"o":{"n":"self"}}],[11,"is_zero","","",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",41,{"o":{"n":"self"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",41,null],[11,"add_assign","","",41,{"i":[{"n":"self"},{"n":"long16"}]}],[11,"sub","","",41,null],[11,"sub_assign","","",41,{"i":[{"n":"self"},{"n":"long16"}]}],[11,"mul","","",41,null],[11,"mul_assign","","",41,{"i":[{"n":"self"},{"n":"long16"}]}],[11,"div","","",41,null],[11,"div_assign","","",41,{"i":[{"n":"self"},{"n":"long16"}]}],[11,"rem","","",41,null],[11,"rem_assign","","",41,{"i":[{"n":"self"},{"n":"long16"}]}],[11,"sum","","",41,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"product","","",41,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"sum","","",41,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"product","","",41,{"i":[{"n":"i"}],"o":{"n":"long16"}}],[11,"hash","","",41,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"ordering"}}],[11,"add","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"sub","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"mul","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"div","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"rem","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"not","","",41,{"i":[{"n":"self"}],"o":{"n":"long16"}}],[11,"bitxor","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"bitxor","","",41,null],[11,"bitxor_assign","","",41,{"i":[{"n":"self"},{"n":"long16"}]}],[11,"bitor","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"bitor","","",41,null],[11,"bitor_assign","","",41,{"i":[{"n":"self"},{"n":"long16"}]}],[11,"bitand","","",41,{"i":[{"n":"self"},{"n":"long16"}],"o":{"n":"long16"}}],[11,"bitand","","",41,null],[11,"bitand_assign","","",41,{"i":[{"n":"self"},{"n":"long16"}]}],[11,"neg","","",41,{"i":[{"n":"self"}],"o":{"n":"long16"}}],[11,"shl","","",41,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long16"}}],[11,"shl_assign","","",41,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",41,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"long16"}}],[11,"shr_assign","","",41,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"ulong"}}],[11,"default","","",42,{"o":{"n":"ulong"}}],[11,"partial_cmp","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"le","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"gt","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"ge","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"bool"}}],[11,"new","","",42,{"i":[{"n":"u64"}],"o":{"n":"ulong"}}],[11,"from","","",42,null],[11,"from","","",42,{"i":[{"n":"u64"}],"o":{"n":"ulong"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",42,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"zero","","",42,{"o":{"n":"self"}}],[11,"is_zero","","",42,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",42,{"o":{"n":"self"}}],[11,"deref","","",42,null],[11,"deref_mut","","",42,null],[11,"zero","","",42,{"o":{"n":"self"}}],[11,"is_zero","","",42,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",42,{"o":{"n":"self"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",42,null],[11,"add_assign","","",42,{"i":[{"n":"self"},{"n":"ulong"}]}],[11,"sub","","",42,null],[11,"sub_assign","","",42,{"i":[{"n":"self"},{"n":"ulong"}]}],[11,"mul","","",42,null],[11,"mul_assign","","",42,{"i":[{"n":"self"},{"n":"ulong"}]}],[11,"div","","",42,null],[11,"div_assign","","",42,{"i":[{"n":"self"},{"n":"ulong"}]}],[11,"rem","","",42,null],[11,"rem_assign","","",42,{"i":[{"n":"self"},{"n":"ulong"}]}],[11,"sum","","",42,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"product","","",42,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"sum","","",42,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"product","","",42,{"i":[{"n":"i"}],"o":{"n":"ulong"}}],[11,"hash","","",42,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ordering"}}],[11,"add","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"sub","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"mul","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"div","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"rem","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"not","","",42,{"i":[{"n":"self"}],"o":{"n":"ulong"}}],[11,"bitxor","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,{"i":[{"n":"self"},{"n":"ulong"}]}],[11,"bitor","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,{"i":[{"n":"self"},{"n":"ulong"}]}],[11,"bitand","","",42,{"i":[{"n":"self"},{"n":"ulong"}],"o":{"n":"ulong"}}],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,{"i":[{"n":"self"},{"n":"ulong"}]}],[11,"neg","","",42,{"i":[{"n":"self"}],"o":{"n":"ulong"}}],[11,"shl","","",42,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong"}}],[11,"shl_assign","","",42,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",42,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong"}}],[11,"shr_assign","","",42,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"ulong2"}}],[11,"default","","",43,{"o":{"n":"ulong2"}}],[11,"partial_cmp","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"le","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"gt","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"ge","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"bool"}}],[11,"new","","",43,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong2"}}],[11,"from","","",43,null],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",43,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"zero","","",43,{"o":{"n":"self"}}],[11,"is_zero","","",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",43,{"o":{"n":"self"}}],[11,"deref","","",43,null],[11,"deref_mut","","",43,null],[11,"zero","","",43,{"o":{"n":"self"}}],[11,"is_zero","","",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",43,{"o":{"n":"self"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",43,null],[11,"add_assign","","",43,{"i":[{"n":"self"},{"n":"ulong2"}]}],[11,"sub","","",43,null],[11,"sub_assign","","",43,{"i":[{"n":"self"},{"n":"ulong2"}]}],[11,"mul","","",43,null],[11,"mul_assign","","",43,{"i":[{"n":"self"},{"n":"ulong2"}]}],[11,"div","","",43,null],[11,"div_assign","","",43,{"i":[{"n":"self"},{"n":"ulong2"}]}],[11,"rem","","",43,null],[11,"rem_assign","","",43,{"i":[{"n":"self"},{"n":"ulong2"}]}],[11,"sum","","",43,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"product","","",43,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"sum","","",43,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"product","","",43,{"i":[{"n":"i"}],"o":{"n":"ulong2"}}],[11,"hash","","",43,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ordering"}}],[11,"add","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"sub","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"mul","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"div","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"rem","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"not","","",43,{"i":[{"n":"self"}],"o":{"n":"ulong2"}}],[11,"bitxor","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"bitxor","","",43,null],[11,"bitxor_assign","","",43,{"i":[{"n":"self"},{"n":"ulong2"}]}],[11,"bitor","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"bitor","","",43,null],[11,"bitor_assign","","",43,{"i":[{"n":"self"},{"n":"ulong2"}]}],[11,"bitand","","",43,{"i":[{"n":"self"},{"n":"ulong2"}],"o":{"n":"ulong2"}}],[11,"bitand","","",43,null],[11,"bitand_assign","","",43,{"i":[{"n":"self"},{"n":"ulong2"}]}],[11,"neg","","",43,{"i":[{"n":"self"}],"o":{"n":"ulong2"}}],[11,"shl","","",43,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong2"}}],[11,"shl_assign","","",43,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",43,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong2"}}],[11,"shr_assign","","",43,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"ulong3"}}],[11,"default","","",44,{"o":{"n":"ulong3"}}],[11,"partial_cmp","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"le","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"gt","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"ge","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"bool"}}],[11,"new","","",44,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong3"}}],[11,"from","","",44,null],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",44,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"zero","","",44,{"o":{"n":"self"}}],[11,"is_zero","","",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",44,{"o":{"n":"self"}}],[11,"deref","","",44,null],[11,"deref_mut","","",44,null],[11,"zero","","",44,{"o":{"n":"self"}}],[11,"is_zero","","",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",44,{"o":{"n":"self"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",44,null],[11,"add_assign","","",44,{"i":[{"n":"self"},{"n":"ulong3"}]}],[11,"sub","","",44,null],[11,"sub_assign","","",44,{"i":[{"n":"self"},{"n":"ulong3"}]}],[11,"mul","","",44,null],[11,"mul_assign","","",44,{"i":[{"n":"self"},{"n":"ulong3"}]}],[11,"div","","",44,null],[11,"div_assign","","",44,{"i":[{"n":"self"},{"n":"ulong3"}]}],[11,"rem","","",44,null],[11,"rem_assign","","",44,{"i":[{"n":"self"},{"n":"ulong3"}]}],[11,"sum","","",44,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"product","","",44,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"sum","","",44,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"product","","",44,{"i":[{"n":"i"}],"o":{"n":"ulong3"}}],[11,"hash","","",44,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ordering"}}],[11,"add","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"sub","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"mul","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"div","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"rem","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"not","","",44,{"i":[{"n":"self"}],"o":{"n":"ulong3"}}],[11,"bitxor","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"bitxor","","",44,null],[11,"bitxor_assign","","",44,{"i":[{"n":"self"},{"n":"ulong3"}]}],[11,"bitor","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"bitor","","",44,null],[11,"bitor_assign","","",44,{"i":[{"n":"self"},{"n":"ulong3"}]}],[11,"bitand","","",44,{"i":[{"n":"self"},{"n":"ulong3"}],"o":{"n":"ulong3"}}],[11,"bitand","","",44,null],[11,"bitand_assign","","",44,{"i":[{"n":"self"},{"n":"ulong3"}]}],[11,"neg","","",44,{"i":[{"n":"self"}],"o":{"n":"ulong3"}}],[11,"shl","","",44,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong3"}}],[11,"shl_assign","","",44,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",44,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong3"}}],[11,"shr_assign","","",44,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"ulong4"}}],[11,"default","","",45,{"o":{"n":"ulong4"}}],[11,"partial_cmp","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"le","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"gt","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"ge","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"bool"}}],[11,"new","","",45,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong4"}}],[11,"from","","",45,null],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",45,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"zero","","",45,{"o":{"n":"self"}}],[11,"is_zero","","",45,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",45,{"o":{"n":"self"}}],[11,"deref","","",45,null],[11,"deref_mut","","",45,null],[11,"zero","","",45,{"o":{"n":"self"}}],[11,"is_zero","","",45,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",45,{"o":{"n":"self"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",45,null],[11,"add_assign","","",45,{"i":[{"n":"self"},{"n":"ulong4"}]}],[11,"sub","","",45,null],[11,"sub_assign","","",45,{"i":[{"n":"self"},{"n":"ulong4"}]}],[11,"mul","","",45,null],[11,"mul_assign","","",45,{"i":[{"n":"self"},{"n":"ulong4"}]}],[11,"div","","",45,null],[11,"div_assign","","",45,{"i":[{"n":"self"},{"n":"ulong4"}]}],[11,"rem","","",45,null],[11,"rem_assign","","",45,{"i":[{"n":"self"},{"n":"ulong4"}]}],[11,"sum","","",45,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"product","","",45,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"sum","","",45,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"product","","",45,{"i":[{"n":"i"}],"o":{"n":"ulong4"}}],[11,"hash","","",45,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ordering"}}],[11,"add","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"sub","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"mul","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"div","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"rem","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"not","","",45,{"i":[{"n":"self"}],"o":{"n":"ulong4"}}],[11,"bitxor","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"bitxor","","",45,null],[11,"bitxor_assign","","",45,{"i":[{"n":"self"},{"n":"ulong4"}]}],[11,"bitor","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"bitor","","",45,null],[11,"bitor_assign","","",45,{"i":[{"n":"self"},{"n":"ulong4"}]}],[11,"bitand","","",45,{"i":[{"n":"self"},{"n":"ulong4"}],"o":{"n":"ulong4"}}],[11,"bitand","","",45,null],[11,"bitand_assign","","",45,{"i":[{"n":"self"},{"n":"ulong4"}]}],[11,"neg","","",45,{"i":[{"n":"self"}],"o":{"n":"ulong4"}}],[11,"shl","","",45,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong4"}}],[11,"shl_assign","","",45,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",45,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong4"}}],[11,"shr_assign","","",45,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"ulong8"}}],[11,"default","","",46,{"o":{"n":"ulong8"}}],[11,"partial_cmp","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"le","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"gt","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"ge","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"bool"}}],[11,"new","","",46,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong8"}}],[11,"from","","",46,null],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",46,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"zero","","",46,{"o":{"n":"self"}}],[11,"is_zero","","",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",46,{"o":{"n":"self"}}],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"zero","","",46,{"o":{"n":"self"}}],[11,"is_zero","","",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",46,{"o":{"n":"self"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",46,null],[11,"add_assign","","",46,{"i":[{"n":"self"},{"n":"ulong8"}]}],[11,"sub","","",46,null],[11,"sub_assign","","",46,{"i":[{"n":"self"},{"n":"ulong8"}]}],[11,"mul","","",46,null],[11,"mul_assign","","",46,{"i":[{"n":"self"},{"n":"ulong8"}]}],[11,"div","","",46,null],[11,"div_assign","","",46,{"i":[{"n":"self"},{"n":"ulong8"}]}],[11,"rem","","",46,null],[11,"rem_assign","","",46,{"i":[{"n":"self"},{"n":"ulong8"}]}],[11,"sum","","",46,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"product","","",46,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"sum","","",46,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"product","","",46,{"i":[{"n":"i"}],"o":{"n":"ulong8"}}],[11,"hash","","",46,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ordering"}}],[11,"add","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"sub","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"mul","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"div","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"rem","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"not","","",46,{"i":[{"n":"self"}],"o":{"n":"ulong8"}}],[11,"bitxor","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"bitxor","","",46,null],[11,"bitxor_assign","","",46,{"i":[{"n":"self"},{"n":"ulong8"}]}],[11,"bitor","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"bitor","","",46,null],[11,"bitor_assign","","",46,{"i":[{"n":"self"},{"n":"ulong8"}]}],[11,"bitand","","",46,{"i":[{"n":"self"},{"n":"ulong8"}],"o":{"n":"ulong8"}}],[11,"bitand","","",46,null],[11,"bitand_assign","","",46,{"i":[{"n":"self"},{"n":"ulong8"}]}],[11,"neg","","",46,{"i":[{"n":"self"}],"o":{"n":"ulong8"}}],[11,"shl","","",46,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong8"}}],[11,"shl_assign","","",46,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",46,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong8"}}],[11,"shr_assign","","",46,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"ulong16"}}],[11,"default","","",47,{"o":{"n":"ulong16"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"le","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"gt","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"ge","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"bool"}}],[11,"new","","",47,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"ulong16"}}],[11,"from","","",47,null],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",47,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"zero","","",47,{"o":{"n":"self"}}],[11,"is_zero","","",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",47,{"o":{"n":"self"}}],[11,"deref","","",47,null],[11,"deref_mut","","",47,null],[11,"zero","","",47,{"o":{"n":"self"}}],[11,"is_zero","","",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",47,{"o":{"n":"self"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",47,null],[11,"add_assign","","",47,{"i":[{"n":"self"},{"n":"ulong16"}]}],[11,"sub","","",47,null],[11,"sub_assign","","",47,{"i":[{"n":"self"},{"n":"ulong16"}]}],[11,"mul","","",47,null],[11,"mul_assign","","",47,{"i":[{"n":"self"},{"n":"ulong16"}]}],[11,"div","","",47,null],[11,"div_assign","","",47,{"i":[{"n":"self"},{"n":"ulong16"}]}],[11,"rem","","",47,null],[11,"rem_assign","","",47,{"i":[{"n":"self"},{"n":"ulong16"}]}],[11,"sum","","",47,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"product","","",47,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"sum","","",47,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"product","","",47,{"i":[{"n":"i"}],"o":{"n":"ulong16"}}],[11,"hash","","",47,{"i":[{"n":"self"},{"n":"h"}]}],[11,"cmp","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ordering"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"not","","",47,{"i":[{"n":"self"}],"o":{"n":"ulong16"}}],[11,"bitxor","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"bitxor","","",47,null],[11,"bitxor_assign","","",47,{"i":[{"n":"self"},{"n":"ulong16"}]}],[11,"bitor","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"bitor","","",47,null],[11,"bitor_assign","","",47,{"i":[{"n":"self"},{"n":"ulong16"}]}],[11,"bitand","","",47,{"i":[{"n":"self"},{"n":"ulong16"}],"o":{"n":"ulong16"}}],[11,"bitand","","",47,null],[11,"bitand_assign","","",47,{"i":[{"n":"self"},{"n":"ulong16"}]}],[11,"neg","","",47,{"i":[{"n":"self"}],"o":{"n":"ulong16"}}],[11,"shl","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong16"}}],[11,"shl_assign","","",47,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ulong16"}}],[11,"shr_assign","","",47,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"float"}}],[11,"default","","",48,{"o":{"n":"float"}}],[11,"partial_cmp","","",48,{"i":[{"n":"self"},{"n":"float"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",48,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"le","","",48,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"gt","","",48,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"ge","","",48,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"new","","",48,{"i":[{"n":"f32"}],"o":{"n":"float"}}],[11,"from","","",48,null],[11,"from","","",48,{"i":[{"n":"f32"}],"o":{"n":"float"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",48,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"zero","","",48,{"o":{"n":"self"}}],[11,"is_zero","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",48,{"o":{"n":"self"}}],[11,"deref","","",48,null],[11,"deref_mut","","",48,null],[11,"zero","","",48,{"o":{"n":"self"}}],[11,"is_zero","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",48,{"o":{"n":"self"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",48,null],[11,"add_assign","","",48,{"i":[{"n":"self"},{"n":"float"}]}],[11,"sub","","",48,null],[11,"sub_assign","","",48,{"i":[{"n":"self"},{"n":"float"}]}],[11,"mul","","",48,null],[11,"mul_assign","","",48,{"i":[{"n":"self"},{"n":"float"}]}],[11,"div","","",48,null],[11,"div_assign","","",48,{"i":[{"n":"self"},{"n":"float"}]}],[11,"rem","","",48,null],[11,"rem_assign","","",48,{"i":[{"n":"self"},{"n":"float"}]}],[11,"sum","","",48,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"product","","",48,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"sum","","",48,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"product","","",48,{"i":[{"n":"i"}],"o":{"n":"float"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"float"}}],[11,"neg","","",48,{"i":[{"n":"self"}],"o":{"n":"float"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"float2"}}],[11,"default","","",49,{"o":{"n":"float2"}}],[11,"partial_cmp","","",49,{"i":[{"n":"self"},{"n":"float2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",49,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"le","","",49,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"gt","","",49,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"ge","","",49,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"bool"}}],[11,"new","","",49,{"i":[{"n":"f32"},{"n":"f32"}],"o":{"n":"float2"}}],[11,"from","","",49,null],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",49,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"zero","","",49,{"o":{"n":"self"}}],[11,"is_zero","","",49,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",49,{"o":{"n":"self"}}],[11,"deref","","",49,null],[11,"deref_mut","","",49,null],[11,"zero","","",49,{"o":{"n":"self"}}],[11,"is_zero","","",49,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",49,{"o":{"n":"self"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",49,null],[11,"add_assign","","",49,{"i":[{"n":"self"},{"n":"float2"}]}],[11,"sub","","",49,null],[11,"sub_assign","","",49,{"i":[{"n":"self"},{"n":"float2"}]}],[11,"mul","","",49,null],[11,"mul_assign","","",49,{"i":[{"n":"self"},{"n":"float2"}]}],[11,"div","","",49,null],[11,"div_assign","","",49,{"i":[{"n":"self"},{"n":"float2"}]}],[11,"rem","","",49,null],[11,"rem_assign","","",49,{"i":[{"n":"self"},{"n":"float2"}]}],[11,"sum","","",49,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"product","","",49,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"sum","","",49,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"product","","",49,{"i":[{"n":"i"}],"o":{"n":"float2"}}],[11,"add","","",49,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"sub","","",49,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"mul","","",49,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"div","","",49,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"rem","","",49,{"i":[{"n":"self"},{"n":"float2"}],"o":{"n":"float2"}}],[11,"neg","","",49,{"i":[{"n":"self"}],"o":{"n":"float2"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"float3"}}],[11,"default","","",50,{"o":{"n":"float3"}}],[11,"partial_cmp","","",50,{"i":[{"n":"self"},{"n":"float3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",50,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"le","","",50,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"gt","","",50,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"ge","","",50,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"bool"}}],[11,"new","","",50,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float3"}}],[11,"from","","",50,null],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",50,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"zero","","",50,{"o":{"n":"self"}}],[11,"is_zero","","",50,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",50,{"o":{"n":"self"}}],[11,"deref","","",50,null],[11,"deref_mut","","",50,null],[11,"zero","","",50,{"o":{"n":"self"}}],[11,"is_zero","","",50,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",50,{"o":{"n":"self"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",50,null],[11,"add_assign","","",50,{"i":[{"n":"self"},{"n":"float3"}]}],[11,"sub","","",50,null],[11,"sub_assign","","",50,{"i":[{"n":"self"},{"n":"float3"}]}],[11,"mul","","",50,null],[11,"mul_assign","","",50,{"i":[{"n":"self"},{"n":"float3"}]}],[11,"div","","",50,null],[11,"div_assign","","",50,{"i":[{"n":"self"},{"n":"float3"}]}],[11,"rem","","",50,null],[11,"rem_assign","","",50,{"i":[{"n":"self"},{"n":"float3"}]}],[11,"sum","","",50,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"product","","",50,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"sum","","",50,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"product","","",50,{"i":[{"n":"i"}],"o":{"n":"float3"}}],[11,"add","","",50,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"sub","","",50,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"mul","","",50,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"div","","",50,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"rem","","",50,{"i":[{"n":"self"},{"n":"float3"}],"o":{"n":"float3"}}],[11,"neg","","",50,{"i":[{"n":"self"}],"o":{"n":"float3"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"float4"}}],[11,"default","","",51,{"o":{"n":"float4"}}],[11,"partial_cmp","","",51,{"i":[{"n":"self"},{"n":"float4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",51,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"le","","",51,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"gt","","",51,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"ge","","",51,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"bool"}}],[11,"new","","",51,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float4"}}],[11,"from","","",51,null],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",51,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"zero","","",51,{"o":{"n":"self"}}],[11,"is_zero","","",51,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",51,{"o":{"n":"self"}}],[11,"deref","","",51,null],[11,"deref_mut","","",51,null],[11,"zero","","",51,{"o":{"n":"self"}}],[11,"is_zero","","",51,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",51,{"o":{"n":"self"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",51,null],[11,"add_assign","","",51,{"i":[{"n":"self"},{"n":"float4"}]}],[11,"sub","","",51,null],[11,"sub_assign","","",51,{"i":[{"n":"self"},{"n":"float4"}]}],[11,"mul","","",51,null],[11,"mul_assign","","",51,{"i":[{"n":"self"},{"n":"float4"}]}],[11,"div","","",51,null],[11,"div_assign","","",51,{"i":[{"n":"self"},{"n":"float4"}]}],[11,"rem","","",51,null],[11,"rem_assign","","",51,{"i":[{"n":"self"},{"n":"float4"}]}],[11,"sum","","",51,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"product","","",51,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"sum","","",51,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"product","","",51,{"i":[{"n":"i"}],"o":{"n":"float4"}}],[11,"add","","",51,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"sub","","",51,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"mul","","",51,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"div","","",51,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"rem","","",51,{"i":[{"n":"self"},{"n":"float4"}],"o":{"n":"float4"}}],[11,"neg","","",51,{"i":[{"n":"self"}],"o":{"n":"float4"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"float8"}}],[11,"default","","",52,{"o":{"n":"float8"}}],[11,"partial_cmp","","",52,{"i":[{"n":"self"},{"n":"float8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",52,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"le","","",52,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"gt","","",52,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"ge","","",52,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"bool"}}],[11,"new","","",52,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float8"}}],[11,"from","","",52,null],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",52,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"zero","","",52,{"o":{"n":"self"}}],[11,"is_zero","","",52,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",52,{"o":{"n":"self"}}],[11,"deref","","",52,null],[11,"deref_mut","","",52,null],[11,"zero","","",52,{"o":{"n":"self"}}],[11,"is_zero","","",52,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",52,{"o":{"n":"self"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",52,null],[11,"add_assign","","",52,{"i":[{"n":"self"},{"n":"float8"}]}],[11,"sub","","",52,null],[11,"sub_assign","","",52,{"i":[{"n":"self"},{"n":"float8"}]}],[11,"mul","","",52,null],[11,"mul_assign","","",52,{"i":[{"n":"self"},{"n":"float8"}]}],[11,"div","","",52,null],[11,"div_assign","","",52,{"i":[{"n":"self"},{"n":"float8"}]}],[11,"rem","","",52,null],[11,"rem_assign","","",52,{"i":[{"n":"self"},{"n":"float8"}]}],[11,"sum","","",52,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"product","","",52,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"sum","","",52,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"product","","",52,{"i":[{"n":"i"}],"o":{"n":"float8"}}],[11,"add","","",52,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"sub","","",52,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"mul","","",52,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"div","","",52,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"rem","","",52,{"i":[{"n":"self"},{"n":"float8"}],"o":{"n":"float8"}}],[11,"neg","","",52,{"i":[{"n":"self"}],"o":{"n":"float8"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"float16"}}],[11,"default","","",53,{"o":{"n":"float16"}}],[11,"partial_cmp","","",53,{"i":[{"n":"self"},{"n":"float16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",53,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"le","","",53,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"gt","","",53,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"ge","","",53,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"bool"}}],[11,"new","","",53,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"float16"}}],[11,"from","","",53,null],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",53,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"zero","","",53,{"o":{"n":"self"}}],[11,"is_zero","","",53,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",53,{"o":{"n":"self"}}],[11,"deref","","",53,null],[11,"deref_mut","","",53,null],[11,"zero","","",53,{"o":{"n":"self"}}],[11,"is_zero","","",53,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",53,{"o":{"n":"self"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",53,null],[11,"add_assign","","",53,{"i":[{"n":"self"},{"n":"float16"}]}],[11,"sub","","",53,null],[11,"sub_assign","","",53,{"i":[{"n":"self"},{"n":"float16"}]}],[11,"mul","","",53,null],[11,"mul_assign","","",53,{"i":[{"n":"self"},{"n":"float16"}]}],[11,"div","","",53,null],[11,"div_assign","","",53,{"i":[{"n":"self"},{"n":"float16"}]}],[11,"rem","","",53,null],[11,"rem_assign","","",53,{"i":[{"n":"self"},{"n":"float16"}]}],[11,"sum","","",53,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"product","","",53,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"sum","","",53,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"product","","",53,{"i":[{"n":"i"}],"o":{"n":"float16"}}],[11,"add","","",53,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"sub","","",53,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"mul","","",53,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"div","","",53,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"rem","","",53,{"i":[{"n":"self"},{"n":"float16"}],"o":{"n":"float16"}}],[11,"neg","","",53,{"i":[{"n":"self"}],"o":{"n":"float16"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"double"}}],[11,"default","","",54,{"o":{"n":"double"}}],[11,"partial_cmp","","",54,{"i":[{"n":"self"},{"n":"double"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",54,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"le","","",54,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"gt","","",54,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"ge","","",54,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"bool"}}],[11,"new","","",54,{"i":[{"n":"f64"}],"o":{"n":"double"}}],[11,"from","","",54,null],[11,"from","","",54,{"i":[{"n":"f64"}],"o":{"n":"double"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",54,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"zero","","",54,{"o":{"n":"self"}}],[11,"is_zero","","",54,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",54,{"o":{"n":"self"}}],[11,"deref","","",54,null],[11,"deref_mut","","",54,null],[11,"zero","","",54,{"o":{"n":"self"}}],[11,"is_zero","","",54,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",54,{"o":{"n":"self"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",54,null],[11,"add_assign","","",54,{"i":[{"n":"self"},{"n":"double"}]}],[11,"sub","","",54,null],[11,"sub_assign","","",54,{"i":[{"n":"self"},{"n":"double"}]}],[11,"mul","","",54,null],[11,"mul_assign","","",54,{"i":[{"n":"self"},{"n":"double"}]}],[11,"div","","",54,null],[11,"div_assign","","",54,{"i":[{"n":"self"},{"n":"double"}]}],[11,"rem","","",54,null],[11,"rem_assign","","",54,{"i":[{"n":"self"},{"n":"double"}]}],[11,"sum","","",54,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"product","","",54,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"sum","","",54,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"product","","",54,{"i":[{"n":"i"}],"o":{"n":"double"}}],[11,"add","","",54,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"sub","","",54,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"mul","","",54,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"div","","",54,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"rem","","",54,{"i":[{"n":"self"},{"n":"double"}],"o":{"n":"double"}}],[11,"neg","","",54,{"i":[{"n":"self"}],"o":{"n":"double"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"double2"}}],[11,"default","","",55,{"o":{"n":"double2"}}],[11,"partial_cmp","","",55,{"i":[{"n":"self"},{"n":"double2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",55,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"le","","",55,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"gt","","",55,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"ge","","",55,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"bool"}}],[11,"new","","",55,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"double2"}}],[11,"from","","",55,null],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",55,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"zero","","",55,{"o":{"n":"self"}}],[11,"is_zero","","",55,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",55,{"o":{"n":"self"}}],[11,"deref","","",55,null],[11,"deref_mut","","",55,null],[11,"zero","","",55,{"o":{"n":"self"}}],[11,"is_zero","","",55,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",55,{"o":{"n":"self"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",55,null],[11,"add_assign","","",55,{"i":[{"n":"self"},{"n":"double2"}]}],[11,"sub","","",55,null],[11,"sub_assign","","",55,{"i":[{"n":"self"},{"n":"double2"}]}],[11,"mul","","",55,null],[11,"mul_assign","","",55,{"i":[{"n":"self"},{"n":"double2"}]}],[11,"div","","",55,null],[11,"div_assign","","",55,{"i":[{"n":"self"},{"n":"double2"}]}],[11,"rem","","",55,null],[11,"rem_assign","","",55,{"i":[{"n":"self"},{"n":"double2"}]}],[11,"sum","","",55,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"product","","",55,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"sum","","",55,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"product","","",55,{"i":[{"n":"i"}],"o":{"n":"double2"}}],[11,"add","","",55,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"sub","","",55,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"mul","","",55,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"div","","",55,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"rem","","",55,{"i":[{"n":"self"},{"n":"double2"}],"o":{"n":"double2"}}],[11,"neg","","",55,{"i":[{"n":"self"}],"o":{"n":"double2"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"double3"}}],[11,"default","","",56,{"o":{"n":"double3"}}],[11,"partial_cmp","","",56,{"i":[{"n":"self"},{"n":"double3"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",56,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"le","","",56,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"gt","","",56,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"ge","","",56,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"bool"}}],[11,"new","","",56,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double3"}}],[11,"from","","",56,null],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",56,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"zero","","",56,{"o":{"n":"self"}}],[11,"is_zero","","",56,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",56,{"o":{"n":"self"}}],[11,"deref","","",56,null],[11,"deref_mut","","",56,null],[11,"zero","","",56,{"o":{"n":"self"}}],[11,"is_zero","","",56,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",56,{"o":{"n":"self"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",56,null],[11,"add_assign","","",56,{"i":[{"n":"self"},{"n":"double3"}]}],[11,"sub","","",56,null],[11,"sub_assign","","",56,{"i":[{"n":"self"},{"n":"double3"}]}],[11,"mul","","",56,null],[11,"mul_assign","","",56,{"i":[{"n":"self"},{"n":"double3"}]}],[11,"div","","",56,null],[11,"div_assign","","",56,{"i":[{"n":"self"},{"n":"double3"}]}],[11,"rem","","",56,null],[11,"rem_assign","","",56,{"i":[{"n":"self"},{"n":"double3"}]}],[11,"sum","","",56,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"product","","",56,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"sum","","",56,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"product","","",56,{"i":[{"n":"i"}],"o":{"n":"double3"}}],[11,"add","","",56,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"sub","","",56,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"mul","","",56,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"div","","",56,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"rem","","",56,{"i":[{"n":"self"},{"n":"double3"}],"o":{"n":"double3"}}],[11,"neg","","",56,{"i":[{"n":"self"}],"o":{"n":"double3"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"double4"}}],[11,"default","","",57,{"o":{"n":"double4"}}],[11,"partial_cmp","","",57,{"i":[{"n":"self"},{"n":"double4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",57,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"le","","",57,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"gt","","",57,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"ge","","",57,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"bool"}}],[11,"new","","",57,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double4"}}],[11,"from","","",57,null],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",57,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"zero","","",57,{"o":{"n":"self"}}],[11,"is_zero","","",57,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",57,{"o":{"n":"self"}}],[11,"deref","","",57,null],[11,"deref_mut","","",57,null],[11,"zero","","",57,{"o":{"n":"self"}}],[11,"is_zero","","",57,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",57,{"o":{"n":"self"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",57,null],[11,"add_assign","","",57,{"i":[{"n":"self"},{"n":"double4"}]}],[11,"sub","","",57,null],[11,"sub_assign","","",57,{"i":[{"n":"self"},{"n":"double4"}]}],[11,"mul","","",57,null],[11,"mul_assign","","",57,{"i":[{"n":"self"},{"n":"double4"}]}],[11,"div","","",57,null],[11,"div_assign","","",57,{"i":[{"n":"self"},{"n":"double4"}]}],[11,"rem","","",57,null],[11,"rem_assign","","",57,{"i":[{"n":"self"},{"n":"double4"}]}],[11,"sum","","",57,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"product","","",57,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"sum","","",57,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"product","","",57,{"i":[{"n":"i"}],"o":{"n":"double4"}}],[11,"add","","",57,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"sub","","",57,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"mul","","",57,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"div","","",57,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"rem","","",57,{"i":[{"n":"self"},{"n":"double4"}],"o":{"n":"double4"}}],[11,"neg","","",57,{"i":[{"n":"self"}],"o":{"n":"double4"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"double8"}}],[11,"default","","",58,{"o":{"n":"double8"}}],[11,"partial_cmp","","",58,{"i":[{"n":"self"},{"n":"double8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",58,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"le","","",58,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"gt","","",58,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"ge","","",58,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"bool"}}],[11,"new","","",58,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double8"}}],[11,"from","","",58,null],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",58,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"zero","","",58,{"o":{"n":"self"}}],[11,"is_zero","","",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",58,{"o":{"n":"self"}}],[11,"deref","","",58,null],[11,"deref_mut","","",58,null],[11,"zero","","",58,{"o":{"n":"self"}}],[11,"is_zero","","",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",58,{"o":{"n":"self"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",58,null],[11,"add_assign","","",58,{"i":[{"n":"self"},{"n":"double8"}]}],[11,"sub","","",58,null],[11,"sub_assign","","",58,{"i":[{"n":"self"},{"n":"double8"}]}],[11,"mul","","",58,null],[11,"mul_assign","","",58,{"i":[{"n":"self"},{"n":"double8"}]}],[11,"div","","",58,null],[11,"div_assign","","",58,{"i":[{"n":"self"},{"n":"double8"}]}],[11,"rem","","",58,null],[11,"rem_assign","","",58,{"i":[{"n":"self"},{"n":"double8"}]}],[11,"sum","","",58,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"product","","",58,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"sum","","",58,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"product","","",58,{"i":[{"n":"i"}],"o":{"n":"double8"}}],[11,"add","","",58,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"sub","","",58,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"mul","","",58,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"div","","",58,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"rem","","",58,{"i":[{"n":"self"},{"n":"double8"}],"o":{"n":"double8"}}],[11,"neg","","",58,{"i":[{"n":"self"}],"o":{"n":"double8"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"double16"}}],[11,"default","","",59,{"o":{"n":"double16"}}],[11,"partial_cmp","","",59,{"i":[{"n":"self"},{"n":"double16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",59,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"le","","",59,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"gt","","",59,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"ge","","",59,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"bool"}}],[11,"new","","",59,{"i":[{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"double16"}}],[11,"from","","",59,null],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"splat","","",59,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"zero","","",59,{"o":{"n":"self"}}],[11,"is_zero","","",59,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",59,{"o":{"n":"self"}}],[11,"deref","","",59,null],[11,"deref_mut","","",59,null],[11,"zero","","",59,{"o":{"n":"self"}}],[11,"is_zero","","",59,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",59,{"o":{"n":"self"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"fmtresult"}}],[11,"add","","",59,null],[11,"add_assign","","",59,{"i":[{"n":"self"},{"n":"double16"}]}],[11,"sub","","",59,null],[11,"sub_assign","","",59,{"i":[{"n":"self"},{"n":"double16"}]}],[11,"mul","","",59,null],[11,"mul_assign","","",59,{"i":[{"n":"self"},{"n":"double16"}]}],[11,"div","","",59,null],[11,"div_assign","","",59,{"i":[{"n":"self"},{"n":"double16"}]}],[11,"rem","","",59,null],[11,"rem_assign","","",59,{"i":[{"n":"self"},{"n":"double16"}]}],[11,"sum","","",59,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"product","","",59,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"sum","","",59,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"product","","",59,{"i":[{"n":"i"}],"o":{"n":"double16"}}],[11,"add","","",59,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"sub","","",59,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"mul","","",59,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"div","","",59,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"rem","","",59,{"i":[{"n":"self"},{"n":"double16"}],"o":{"n":"double16"}}],[11,"neg","","",59,{"i":[{"n":"self"}],"o":{"n":"double16"}}]],"paths":[[3,"Char"],[3,"Char2"],[3,"Char3"],[3,"Char4"],[3,"Char8"],[3,"Char16"],[3,"Uchar"],[3,"Uchar2"],[3,"Uchar3"],[3,"Uchar4"],[3,"Uchar8"],[3,"Uchar16"],[3,"Short"],[3,"Short2"],[3,"Short3"],[3,"Short4"],[3,"Short8"],[3,"Short16"],[3,"Ushort"],[3,"Ushort2"],[3,"Ushort3"],[3,"Ushort4"],[3,"Ushort8"],[3,"Ushort16"],[3,"Int"],[3,"Int2"],[3,"Int3"],[3,"Int4"],[3,"Int8"],[3,"Int16"],[3,"Uint"],[3,"Uint2"],[3,"Uint3"],[3,"Uint4"],[3,"Uint8"],[3,"Uint16"],[3,"Long"],[3,"Long2"],[3,"Long3"],[3,"Long4"],[3,"Long8"],[3,"Long16"],[3,"Ulong"],[3,"Ulong2"],[3,"Ulong3"],[3,"Ulong4"],[3,"Ulong8"],[3,"Ulong16"],[3,"Float"],[3,"Float2"],[3,"Float3"],[3,"Float4"],[3,"Float8"],[3,"Float16"],[3,"Double"],[3,"Double2"],[3,"Double3"],[3,"Double4"],[3,"Double8"],[3,"Double16"]]};
searchIndex["ocl_example_rgb2gray"] = {"doc":"Convert a color image (`test.jpg` in this case) to greyscale.","items":[],"paths":[]};
searchIndex["ocl_extras"] = {"doc":"","items":[[5,"scrambled_vec","ocl_extras","Returns a vector with length `size` containing random values in the (half-open) range `[vals.0, vals.1)`.",null,null],[5,"shuffled_vec","","Returns a vector with length `size` which is first filled with each integer value in the (inclusive) range `[vals.0, vals.1]`. If `size` is greater than the number of integers in the aforementioned range, the integers will repeat. After being filled with `size` values, the vector is shuffled and the order of its values is randomized.",null,null],[5,"shuffle","","Shuffles the values in a vector using a single pass of Fisher-Yates with a weak (not cryptographically secure) random number generator.",null,null],[0,"sub_buffer_pool","","A sub-buffer allocator.",null,null],[3,"PoolRegion","ocl_extras::sub_buffer_pool","",null,null],[3,"SubBufferPool","","A simple (linear search) sub-buffer allocator.",null,null],[11,"new","","Returns a new buffer pool.",0,{"i":[{"n":"u32"},{"n":"queue"}],"o":{"n":"subbufferpool"}}],[11,"alloc","","Allocates space for and creates a new sub-buffer then returns the buffer id which can be used to `::get` or `::free` it.",0,{"i":[{"n":"self"},{"n":"u32"},{"g":["memflags"],"n":"option"}],"o":{"g":["usize"],"n":"result"}}],[11,"free","","Deallocates the buffer identified by `buffer_id` or returns it back in the event of a failure.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["usize"],"n":"result"}}],[11,"get","","Returns a reference to the sub-buffer identified by `buffer_id`.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["buffer"],"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the sub-buffer identified by `buffer_id`.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["buffer"],"n":"option"}}],[11,"defrag","","Defragments the buffer. Be sure to `::finish()` any and all command queues you may be using before doing this.",0,{"i":[{"n":"self"}]}],[11,"resize","","Shrinks or grows and defragments the main buffer. Invalidates all kernels referencing sub-buffers in this pool. See `::defrag` for more information.",0,{"i":[{"n":"self"},{"n":"u32"}]}],[0,"command_graph","ocl_extras","A command requisite-dependency graph.",null,null],[3,"RwCmdIdxs","ocl_extras::command_graph","",null,null],[3,"KernelArgBuffer","","",null,null],[3,"Command","","",null,null],[3,"CommandGraph","","A directional sequence dependency graph representing the temporal requirements of each asynchronous read, write, copy, and kernel (commands) for a particular task.",null,null],[4,"CommandDetails","","Details of a queuable command.",null,null],[13,"Fill","","",1,null],[12,"target","ocl_extras::command_graph::CommandDetails","",1,null],[13,"Write","ocl_extras::command_graph","",1,null],[12,"target","ocl_extras::command_graph::CommandDetails","",1,null],[13,"Read","ocl_extras::command_graph","",1,null],[12,"source","ocl_extras::command_graph::CommandDetails","",1,null],[13,"Copy","ocl_extras::command_graph","",1,null],[12,"source","ocl_extras::command_graph::CommandDetails","",1,null],[12,"target","","",1,null],[13,"Kernel","ocl_extras::command_graph","",1,null],[12,"id","ocl_extras::command_graph::CommandDetails","",1,null],[12,"sources","","",1,null],[12,"targets","","",1,null],[11,"new","ocl_extras::command_graph","",2,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"kernelargbuffer"}}],[11,"sources","","",1,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"vec"}}],[11,"targets","","",1,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"vec"}}],[11,"new","","",3,{"i":[{"n":"commanddetails"}],"o":{"n":"command"}}],[11,"preceding_writers","","Returns a list of commands which both precede a command and which write to a block of memory which is read from by that command.",3,{"i":[{"n":"self"},{"n":"hashmap"}],"o":{"g":["usize"],"n":"btreeset"}}],[11,"following_readers","","Returns a list of commands which both follow a command and which read from a block of memory which is written to by that command.",3,{"i":[{"n":"self"},{"n":"hashmap"}],"o":{"g":["usize"],"n":"btreeset"}}],[11,"details","","",3,{"i":[{"n":"self"}],"o":{"n":"commanddetails"}}],[11,"new","","Returns a new, empty graph.",4,{"o":{"n":"commandgraph"}}],[11,"add","","Adds a new command and returns the command index if successful.",4,{"i":[{"n":"self"},{"n":"command"}],"o":{"g":["usize"],"n":"result"}}],[11,"populate_requisites","","Populates the list of requisite commands necessary for each command.",4,{"i":[{"n":"self"}]}],[11,"get_req_events","","Returns the list of requisite events for a command.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["ref","str"],"n":"result"}}],[11,"set_cmd_event","","Sets the event associated with the completion of a command.",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"event"}],"o":{"g":["str"],"n":"result"}}],[11,"commands","","",4,null],[11,"get_finish_events","","",4,{"i":[{"n":"self"},{"n":"eventlist"}]}],[0,"work_pool","ocl_extras","",null,null],[3,"WorkPool","ocl_extras::work_pool","A general purpose work completion pool.",null,null],[4,"WorkPoolError","","An error associated with `WorkPool`.",null,null],[13,"StdIo","","",5,null],[13,"FuturesMpscSend","","",5,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",5,{"i":[{"n":"error"}],"o":{"n":"workpoolerror"}}],[11,"from","","",5,{"i":[{"n":"senderror"}],"o":{"n":"workpoolerror"}}],[11,"new","","Create a new, empty work pool.",6,{"i":[{"n":"usize"}],"o":{"g":["workpool","workpoolerror"],"n":"result"}}],[11,"complete","","Submits a future which need only be polled to completion and that contains no intensive CPU work (including memcpy).",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["workpoolerror"],"n":"result"}}],[11,"drop","","Blocks the dropping thread until all submitted and all spawned work is complete.",6,{"i":[{"n":"self"}]}]],"paths":[[3,"SubBufferPool"],[4,"CommandDetails"],[3,"KernelArgBuffer"],[3,"Command"],[3,"CommandGraph"],[4,"WorkPoolError"],[3,"WorkPool"]]};
searchIndex["ocl_interop"] = {"doc":"","items":[[5,"get_properties_list","ocl_interop","",null,{"o":{"n":"contextproperties"}}],[5,"get_context","","",null,{"o":{"g":["context"],"n":"option"}}]],"paths":[]};
searchIndex["ocl_proto"] = {"doc":"","items":[],"paths":[]};
searchIndex["opencl_2_1"] = {"doc":"","items":[],"paths":[]};
searchIndex["png"] = {"doc":"PNG encoder and decoder This crate contains a PNG encoder and decoder. It supports reading of single lines or whole frames. ## The decoder The most important types for decoding purposes are `Decoder` and `Reader`. They both wrap a `std::io::Read`. `Decoder` serves as a builder for `Reader`. Calling `Decoder::read_info` reads from the `Read` until the image data is reached. ### Using the decoder     use std::fs::File;","items":[[3,"PixelDimensions","png","Pixel dimensions information",null,null],[12,"xppu","","Pixels per unit, X axis",0,null],[12,"yppu","","Pixels per unit, Y axis",0,null],[12,"unit","","Either Meter or Unspecified",0,null],[3,"FrameControl","","Frame control information",null,null],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",1,null],[12,"width","","Width of the following frame",1,null],[12,"height","","Height of the following frame",1,null],[12,"x_offset","","X position at which to render the following frame",1,null],[12,"y_offset","","Y position at which to render the following frame",1,null],[12,"delay_num","","Frame delay fraction numerator",1,null],[12,"delay_den","","Frame delay fraction denominator",1,null],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",1,null],[12,"blend_op","","Type of frame area rendering for this frame",1,null],[3,"AnimationControl","","Animation control information",null,null],[12,"num_frames","","Number of frames",2,null],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",2,null],[3,"Info","","PNG info struct",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"bit_depth","","",3,null],[12,"color_type","","",3,null],[12,"interlaced","","",3,null],[12,"trns","","",3,null],[12,"pixel_dims","","",3,null],[12,"palette","","",3,null],[12,"frame_control","","",3,null],[12,"animation_control","","",3,null],[3,"Transformations","","Output transformations",null,null],[3,"Decoder","","PNG Decoder",null,null],[3,"Reader","","PNG reader (mostly high-level interface)",null,null],[3,"OutputInfo","","Output info",null,null],[12,"width","","",4,null],[12,"height","","",4,null],[12,"color_type","","",4,null],[12,"bit_depth","","",4,null],[12,"line_size","","",4,null],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",null,null],[3,"Encoder","","PNG Encoder",null,null],[3,"Writer","","PNG writer",null,null],[4,"ColorType","","",null,null],[13,"Grayscale","","",5,null],[13,"RGB","","",5,null],[13,"Indexed","","",5,null],[13,"GrayscaleAlpha","","",5,null],[13,"RGBA","","",5,null],[4,"BitDepth","","Bit depth of the png file",null,null],[13,"One","","",6,null],[13,"Two","","",6,null],[13,"Four","","",6,null],[13,"Eight","","",6,null],[13,"Sixteen","","",6,null],[4,"Unit","","Physical unit of the pixel dimensions",null,null],[13,"Unspecified","","",7,null],[13,"Meter","","",7,null],[4,"Decoded","","Result of the decoding process",null,null],[13,"Nothing","","Nothing decoded yet",8,null],[13,"Header","","",8,null],[13,"ChunkBegin","","",8,null],[13,"ChunkComplete","","",8,null],[13,"PixelDimensions","","",8,null],[13,"AnimationControl","","",8,null],[13,"FrameControl","","",8,null],[13,"ImageData","","Decoded raw image data.",8,null],[13,"PartialChunk","","",8,null],[13,"ImageEnd","","",8,null],[4,"DecodingError","","",null,null],[13,"IoError","","",9,null],[13,"Format","","",9,null],[13,"InvalidSignature","","",9,null],[13,"CrcMismatch","","",9,null],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",9,null],[12,"crc_val","","Stored CRC32 value",9,null],[12,"crc_sum","","Calculated CRC32 sum",9,null],[12,"chunk","","",9,null],[13,"Other","png","",9,null],[13,"CorruptFlateStream","","",9,null],[4,"EncodingError","","",null,null],[13,"IoError","","",10,null],[13,"Format","","",10,null],[0,"chunk","","Chunk types and functions",null,null],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",null,{"i":[{"n":"chunktype"}],"o":{"n":"bool"}}],[5,"is_private","","Returns true if the chunk is private.",null,{"i":[{"n":"chunktype"}],"o":{"n":"bool"}}],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set. If it is set the chunk name is invalid.",null,{"i":[{"n":"chunktype"}],"o":{"n":"bool"}}],[5,"safe_to_copy","","Returns true if the chunk is safe to copy if unknown.",null,{"i":[{"n":"chunktype"}],"o":{"n":"bool"}}],[6,"ChunkType","","",null,null],[17,"IHDR","","Image header",null,null],[17,"PLTE","","Palette",null,null],[17,"IDAT","","Image data",null,null],[17,"IEND","","Image trailer",null,null],[17,"tRNS","","Transparency",null,null],[17,"bKGD","","Background colour",null,null],[17,"tIME","","Image last-modification time",null,null],[17,"pHYs","","Physical pixel dimensions",null,null],[17,"acTL","","Animation control",null,null],[17,"fcTL","","Frame control",null,null],[17,"fdAT","","Frame data",null,null],[11,"fmt","png","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",9,{"i":[{"n":"error"}],"o":{"n":"decodingerror"}}],[11,"from","","",9,{"i":[{"n":"string"}],"o":{"n":"decodingerror"}}],[11,"new","","Creates a new StreamingDecoder",11,{"o":{"n":"streamingdecoder"}}],[11,"reset","","Resets the StreamingDecoder",11,{"i":[{"n":"self"}]}],[11,"update","","Low level StreamingDecoder interface.",11,null],[11,"set_param","","",12,{"i":[{"n":"self"},{"n":"decoder"}]}],[11,"buffer_size","","Returns the size needed to hold a decoded frame",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"new","","",13,{"i":[{"n":"r"}],"o":{"n":"decoder"}}],[11,"read_info","","Reads all meta data until the first IDAT chunk",13,{"i":[{"n":"self"}],"o":{"g":["decodingerror"],"n":"result"}}],[11,"info","","",14,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"next_frame","","Decodes the next frame into `buf`",14,null],[11,"next_row","","Returns the next processed row of the image",14,{"i":[{"n":"self"}],"o":{"g":["option","decodingerror"],"n":"result"}}],[11,"next_interlaced_row","","Returns the next processed row of the image",14,{"i":[{"n":"self"}],"o":{"g":["option","decodingerror"],"n":"result"}}],[11,"output_color_type","","Returns the color type and the number of bits per sample of the data returned by `Reader::next_row` and Reader::frames`.",14,null],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame that is decoded using the given input transformations.",14,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",14,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"usize"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",10,{"i":[{"n":"error"}],"o":{"n":"encodingerror"}}],[11,"new","","",15,{"i":[{"n":"w"},{"n":"u32"},{"n":"u32"}],"o":{"n":"encoder"}}],[11,"write_header","","",15,{"i":[{"n":"self"}],"o":{"g":["writer","encodingerror"],"n":"result"}}],[11,"set_param","","",5,{"i":[{"n":"self"},{"n":"encoder"}]}],[11,"set_param","","",6,{"i":[{"n":"self"},{"n":"encoder"}]}],[11,"write_chunk","","",16,null],[11,"write_image_data","","Writes the image data.",16,null],[11,"drop","","",16,{"i":[{"n":"self"}]}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"colortype"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"colortype"}],"o":{"n":"bool"}}],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",5,{"i":[{"n":"u8"}],"o":{"g":["colortype"],"n":"option"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"bitdepth"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"bitdepth"}],"o":{"n":"bool"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",6,{"i":[{"n":"u8"}],"o":{"g":["bitdepth"],"n":"option"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"pixeldimensions"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"unit"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"unit"}],"o":{"n":"bool"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",7,{"i":[{"n":"u8"}],"o":{"g":["unit"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"animationcontrol"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"info"}}],[11,"size","","Size of the image",3,null],[11,"is_animated","","Returns true if the image is an APNG image.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"animation_control","","Returns the frame control information of the image",3,{"i":[{"n":"self"}],"o":{"g":["animationcontrol"],"n":"option"}}],[11,"frame_control","","Returns the frame control information of the current frame",3,{"i":[{"n":"self"}],"o":{"g":["framecontrol"],"n":"option"}}],[11,"bits_per_pixel","","Returns the bits per pixel",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes_per_pixel","","Returns the bytes per pixel",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row ",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",3,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"usize"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"bool"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"transformations"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"bool"}}],[11,"le","","",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"bool"}}],[11,"gt","","",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"bool"}}],[11,"ge","","",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"bool"}}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"ordering"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"IDENTITY","","No transformation",12,null],[18,"STRIP_16","","Strip 16-bit samples to 8 bits",12,null],[18,"STRIP_ALPHA","","Discard the alpha channel",12,null],[18,"PACKING","","Expand 1; 2 and 4-bit samples to bytes",12,null],[18,"PACKSWAP","","Change order of packed pixels to LSB first",12,null],[18,"EXPAND","","Expand paletted images to RGB; expand grayscale images of less than 8-bit depth to 8-bit depth; and expand tRNS chunks to alpha channels.",12,null],[18,"INVERT_MONO","","Invert monochrome images",12,null],[18,"SHIFT","","Normalize pixels to the sBIT depth",12,null],[18,"BGR","","Flip RGB to BGR; RGBA to BGRA",12,null],[18,"SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",12,null],[18,"SWAP_ENDIAN","","Byte-swap 16-bit samples",12,null],[18,"INVERT_ALPHA","","Change alpha from opacity to transparency",12,null],[18,"STRIP_FILLER","","",12,null],[18,"STRIP_FILLER_BEFORE","","",12,null],[18,"STRIP_FILLER_AFTER","","",12,null],[18,"GRAY_TO_RGB","","",12,null],[18,"EXPAND_16","","",12,null],[18,"SCALE_16","","",12,null],[11,"empty","","Returns an empty set of flags.",12,{"o":{"n":"transformations"}}],[11,"all","","Returns the set containing all flags.",12,{"o":{"n":"transformations"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,{"i":[{"n":"u32"}],"o":{"g":["transformations"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,{"i":[{"n":"u32"}],"o":{"n":"transformations"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"i":[{"n":"self"},{"n":"transformations"}]}],[11,"remove","","Removes the specified flags in-place.",12,{"i":[{"n":"self"},{"n":"transformations"}]}],[11,"toggle","","Toggles the specified flags in-place.",12,{"i":[{"n":"self"},{"n":"transformations"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,{"i":[{"n":"self"},{"n":"transformations"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"transformations"}}],[11,"bitor_assign","","Adds the set of flags.",12,{"i":[{"n":"self"},{"n":"transformations"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"transformations"}}],[11,"bitxor_assign","","Toggles the set of flags.",12,{"i":[{"n":"self"},{"n":"transformations"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"transformations"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",12,{"i":[{"n":"self"},{"n":"transformations"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"i":[{"n":"self"},{"n":"transformations"}],"o":{"n":"transformations"}}],[11,"sub_assign","","Disables all flags enabled in the set.",12,{"i":[{"n":"self"},{"n":"transformations"}]}],[11,"not","","Returns the complement of this set of flags.",12,{"i":[{"n":"self"}],"o":{"n":"transformations"}}],[11,"extend","","",12,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",12,{"i":[{"n":"t"}],"o":{"n":"transformations"}}],[8,"Parameter","","Configuration parameter trait",null,null],[10,"set_param","","",17,{"i":[{"n":"self"},{"n":"object"}]}],[8,"HasParameters","","Object has parameters",null,null],[11,"set","","",18,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"self"}}],[11,"set","","",18,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"self"}}]],"paths":[[3,"PixelDimensions"],[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Unit"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",1,null],[13,"Brace","","`{ ... }`",1,null],[13,"Bracket","","`[ ... ]`",1,null],[13,"None","","`Ø ... Ø`",1,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,null],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",null,null],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["tokentree"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_iter","proc_macro2","",4,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"new","","Returns an empty `TokenStream` containing no token trees.",4,{"o":{"n":"tokenstream"}}],[11,"empty","","",4,{"o":{"n":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","",4,{"o":{"n":"self"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["tokenstream","lexerror"],"n":"result"}}],[11,"from","","",4,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",4,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"call_site","","The span of the invocation of the current procedural macro.",6,{"o":{"n":"span"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"tokentree"}}],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for only this token.",0,{"i":[{"n":"self"},{"n":"span"}]}],[11,"from","","",0,{"i":[{"n":"group"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"ident"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"punct"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"literal"}],"o":{"n":"tokentree"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,{"i":[{"n":"delimiter"},{"n":"tokenstream"}],"o":{"n":"group"}}],[11,"delimiter","","Returns the delimiter of this `Group`",7,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"punct"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"spacing"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,{"i":[{"n":"char"},{"n":"spacing"}],"o":{"n":"punct"}}],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"span","","Returns the span for this punctuation character.",8,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configure the span for this punctuation character.",8,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",9,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,{"i":[{"n":"self"},{"n":"span"}]}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"hash","","",9,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"f64_unsuffixed","","",10,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f64_suffixed","","",10,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"f32_suffixed","","",10,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"string","","",10,{"i":[{"n":"str"}],"o":{"n":"literal"}}],[11,"character","","",10,{"i":[{"n":"char"}],"o":{"n":"literal"}}],[11,"byte_string","","",10,null],[11,"span","","",10,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",10,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",null,null],[10,"append","","",0,{"i":[{"n":"self"},{"n":"u"}]}],[10,"append_all","","",0,{"i":[{"n":"self"},{"n":"i"}]}],[10,"append_separated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[10,"append_terminated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["qutex"] = {"doc":"A collection of locking data structures, both thread-safe and single-thread-optimized, which use Rust futures instead of thread-blocking.","items":[[3,"Guard","qutex","Allows access to the data contained within a lock just like a mutex guard.",null,null],[3,"FutureGuard","","A future which resolves to a `Guard`.",null,null],[3,"Request","","A request to lock the qutex for exclusive access.",null,null],[3,"Qutex","","A lock-free-queue-backed exclusive data lock.",null,null],[3,"ReadGuard","","Allows read-only access to the data contained within a lock.",null,null],[3,"WriteGuard","","Allows read or write access to the data contained within a lock.",null,null],[3,"FutureReadGuard","","A future which resolves to a `ReadGuard`.",null,null],[3,"FutureWriteGuard","","A future which resolves to a `WriteGuard`.",null,null],[3,"QrwRequest","","A request to lock the lock for either read or write access.",null,null],[3,"QrwLock","","A queue-backed read/write data lock.",null,null],[4,"RequestKind","","Specifies whether a `QrwRequest` is a read or write request.",null,null],[13,"Read","","",0,null],[13,"Write","","",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"unlock","","Releases the lock held by a `Guard` and returns the original `Qutex`.",1,{"i":[{"n":"guard"}],"o":{"n":"qutex"}}],[11,"deref","","",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"wait","","Blocks the current thread until this future resolves.",2,{"i":[{"n":"self"}],"o":{"g":["guard","canceled"],"n":"result"}}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"drop","","Gracefully unlock if this guard has a lock acquired.",2,{"i":[{"n":"self"}]}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new `Request`.",3,{"i":[{"n":"sender"}],"o":{"n":"request"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates and returns a new `Qutex`.",4,{"i":[{"n":"t"}],"o":{"n":"qutex"}}],[11,"lock","","Returns a new `FutureGuard` which can be used as a future and will resolve into a `Guard`.",4,{"i":[{"n":"self"}],"o":{"n":"futureguard"}}],[11,"push_request","","Pushes a lock request onto the queue.",4,{"i":[{"n":"self"},{"n":"request"}]}],[11,"get_mut","","Returns a mutable reference to the inner `Vec` if there are currently no other copies of this `Qutex`.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ptr","","Returns a reference to the inner value.",4,null],[11,"as_mut_ptr","","Returns a mutable reference to the inner value.",4,null],[11,"process_queue","","Pops the next lock request in the queue if this (the caller's) lock is unlocked.",4,{"i":[{"n":"self"}]}],[11,"direct_unlock","","Unlocks this (the caller's) lock and wakes up the next task in the queue.",4,{"i":[{"n":"self"}]}],[11,"from","","",4,{"i":[{"n":"t"}],"o":{"n":"qutex"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"qutex"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"upgrade","","",5,{"i":[{"n":"readguard"}],"o":{"n":"futureupgrade"}}],[11,"release","","Releases the lock held by this `ReadGuard` and returns the original `QrwLock`.",5,{"i":[{"n":"readguard"}],"o":{"n":"qrwlock"}}],[11,"deref","","",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"downgrade","","Converts this `WriteGuard` into a `ReadGuard` and fulfills any other pending read requests.",6,{"i":[{"n":"writeguard"}],"o":{"n":"readguard"}}],[11,"release","","Releases the lock held by this `WriteGuard` and returns the original `QrwLock`.",6,{"i":[{"n":"writeguard"}],"o":{"n":"qrwlock"}}],[11,"deref","","",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"wait","","Blocks the current thread until this future resolves.",7,{"i":[{"n":"self"}],"o":{"g":["readguard","canceled"],"n":"result"}}],[11,"poll","","",7,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"drop","","Gracefully unlock if this guard has a lock acquired.",7,{"i":[{"n":"self"}]}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"wait","","Blocks the current thread until this future resolves.",8,{"i":[{"n":"self"}],"o":{"g":["writeguard","canceled"],"n":"result"}}],[11,"poll","","",8,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"drop","","Gracefully unlock if this guard has a lock acquired.",8,{"i":[{"n":"self"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"requestkind"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"requestkind"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new `QrwRequest`.",9,{"i":[{"n":"sender"},{"n":"requestkind"}],"o":{"n":"qrwrequest"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates and returns a new `QrwLock`.",10,{"i":[{"n":"t"}],"o":{"n":"qrwlock"}}],[11,"read","","Returns a new `FutureReadGuard` which can be used as a future and will resolve into a `ReadGuard`.",10,{"i":[{"n":"self"}],"o":{"n":"futurereadguard"}}],[11,"write","","Returns a new `FutureWriteGuard` which can be used as a future and will resolve into a `WriteGuard`.",10,{"i":[{"n":"self"}],"o":{"n":"futurewriteguard"}}],[11,"enqueue_lock_request","","Pushes a lock request onto the queue.",10,{"i":[{"n":"self"},{"n":"qrwrequest"}]}],[11,"get_mut","","Returns a mutable reference to the inner `Vec` if there are currently no other copies of this `QrwLock`.",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ptr","","Returns a reference to the inner value.",10,null],[11,"as_mut_ptr","","Returns a mutable reference to the inner value.",10,null],[11,"process_queues","","Pops the next lock request in the queue if possible.",10,{"i":[{"n":"self"}]}],[11,"upgrade_read_lock","","Converts a single read lock (read count of '1') into a write lock.",10,{"i":[{"n":"self"}],"o":{"g":["receiver"],"n":"result"}}],[11,"downgrade_write_lock","","Converts a write lock into a read lock then processes the queue, allowing additional read requests to acquire locks.",10,{"i":[{"n":"self"}]}],[11,"release_read_lock","","Decreases the reader count by one and unparks the next requester task in the queue if possible.",10,{"i":[{"n":"self"}]}],[11,"release_write_lock","","Unlocks this (the caller's) lock and unparks the next requester task in the queue if possible.",10,{"i":[{"n":"self"}]}],[11,"from","","",10,{"i":[{"n":"t"}],"o":{"n":"qrwlock"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"qrwlock"}}]],"paths":[[4,"RequestKind"],[3,"Guard"],[3,"FutureGuard"],[3,"Request"],[3,"Qutex"],[3,"ReadGuard"],[3,"WriteGuard"],[3,"FutureReadGuard"],[3,"FutureWriteGuard"],[3,"QrwRequest"],[3,"QrwLock"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",1,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[8,"Rng","rand","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",2,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","Return the next random u64.",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",2,null],[11,"gen","","Return a random value of a `Rand` type.",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,{"i":[{"n":"self"}],"o":{"n":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,{"i":[{"n":"self"}],"o":{"n":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",2,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,null],[11,"shuffle","","Shuffle a mutable slice in place.",2,null],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,{"i":[{"n":"r"}],"o":{"n":"self"}}],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",4,null],[10,"from_seed","","Create a new RNG with the given seed.",4,{"i":[{"n":"seed"}],"o":{"n":"self"}}],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",5,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",6,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"o":{"n":"xorshiftrng"}}],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"o":{"n":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"o":{"n":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"i":[{"n":"r"},{"n":"i"},{"n":"usize"}],"o":{"n":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",null,null],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,{"i":[{"n":"range"},{"n":"r"}],"o":{"n":"self"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",8,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",9,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",12,null],[12,"item","","The actual item which is being weighted",12,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[11,"new","rand::os","Create a new `OsRng`.",13,{"o":{"g":["osrng","error"],"n":"result"}}],[11,"reseed","rand::reseeding","",14,null],[11,"next_u32","rand","",15,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",15,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"next_u32","rand::isaac","",16,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u32","rand::chacha","",17,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u32","rand","",18,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",18,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",18,null],[11,"next_u32","rand::isaac","",19,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",19,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"next_u32","rand","",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u32","rand::reseeding","",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",0,null],[11,"next_u32","rand::os","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",13,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",13,null],[11,"next_u32","rand::read","",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",21,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",21,null],[11,"ind_sample","rand::distributions::exponential","",22,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","rand::distributions","",23,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"ind_sample","rand::distributions::range","",24,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"ind_sample","rand::distributions::gamma","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",26,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",27,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","rand::distributions","",28,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"ind_sample","rand::distributions::gamma","",29,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","rand::distributions::normal","",30,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",31,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","rand::distributions::exponential","",9,{"i":[{"n":"self"}],"o":{"n":"exp1"}}],[11,"clone","rand","",15,{"i":[{"n":"self"}],"o":{"n":"stdrng"}}],[11,"clone","rand::chacha","",17,{"i":[{"n":"self"}],"o":{"n":"chacharng"}}],[11,"clone","rand::distributions","",12,{"i":[{"n":"self"}],"o":{"n":"weighted"}}],[11,"clone","rand","",18,{"i":[{"n":"self"}],"o":{"n":"threadrng"}}],[11,"clone","rand::isaac","",19,{"i":[{"n":"self"}],"o":{"n":"isaac64rng"}}],[11,"clone","rand::distributions::gamma","",27,{"i":[{"n":"self"}],"o":{"n":"gamma"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"chisquared"}}],[11,"clone","rand::isaac","",16,{"i":[{"n":"self"}],"o":{"n":"isaacrng"}}],[11,"clone","rand::distributions","",23,{"i":[{"n":"self"}],"o":{"n":"randsample"}}],[11,"clone","rand::distributions::range","",24,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"clone","rand::distributions::normal","",8,{"i":[{"n":"self"}],"o":{"n":"standardnormal"}}],[11,"clone","rand","",20,{"i":[{"n":"self"}],"o":{"n":"xorshiftrng"}}],[11,"clone","rand::distributions::normal","",30,{"i":[{"n":"self"}],"o":{"n":"normal"}}],[11,"clone","rand::reseeding","",14,{"i":[{"n":"self"}],"o":{"n":"reseedwithdefault"}}],[11,"clone","rand::distributions::gamma","",26,{"i":[{"n":"self"}],"o":{"n":"studentt"}}],[11,"clone","rand::distributions::normal","",31,{"i":[{"n":"self"}],"o":{"n":"lognormal"}}],[11,"clone","rand::distributions::exponential","",22,{"i":[{"n":"self"}],"o":{"n":"exp"}}],[11,"clone","rand::distributions::gamma","",29,{"i":[{"n":"self"}],"o":{"n":"fisherf"}}],[11,"rand","rand::chacha","",17,{"i":[{"n":"r"}],"o":{"n":"chacharng"}}],[11,"rand","rand","",20,{"i":[{"n":"r"}],"o":{"n":"xorshiftrng"}}],[11,"rand","rand::isaac","",16,{"i":[{"n":"r"}],"o":{"n":"isaacrng"}}],[11,"rand","","",19,{"i":[{"n":"r"}],"o":{"n":"isaac64rng"}}],[11,"rand","rand","",5,{"i":[{"n":"r"}],"o":{"g":["f64"],"n":"open01"}}],[11,"rand","rand::distributions::exponential","",9,{"i":[{"n":"r"}],"o":{"n":"exp1"}}],[11,"rand","rand::distributions::normal","",8,{"i":[{"n":"r"}],"o":{"n":"standardnormal"}}],[11,"rand","rand","",5,{"i":[{"n":"r"}],"o":{"g":["f32"],"n":"open01"}}],[11,"rand","","",6,{"i":[{"n":"r"}],"o":{"g":["f64"],"n":"closed01"}}],[11,"rand","","",6,{"i":[{"n":"r"}],"o":{"g":["f32"],"n":"closed01"}}],[11,"sample","rand::distributions::gamma","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",26,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","rand::distributions::exponential","",22,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","rand::distributions","",23,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"sample","rand::distributions::gamma","",29,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","rand::distributions::normal","",31,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","rand::distributions::gamma","",27,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","rand::distributions::normal","",30,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","rand::distributions::range","",24,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"sample","rand::distributions","",28,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"default","rand::reseeding","",14,{"o":{"n":"reseedwithdefault"}}],[11,"reseed","rand::isaac","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",16,null],[11,"reseed","rand::chacha","",17,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",17,null],[11,"reseed","rand","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",20,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",20,null],[11,"reseed","rand::reseeding","",0,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,null],[11,"reseed","rand::isaac","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"reseed","rand","",15,null],[11,"from_seed","","",15,null],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","rand::distributions","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::normal","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::reseeding","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::normal","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::exponential","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::isaac","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::gamma","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::normal","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::gamma","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::gamma","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::read","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::isaac","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::range","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::exponential","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::os","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::gamma","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::reseeding","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::chacha","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",16,{"o":{"n":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"o":{"n":"isaac64rng"}}],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",17,{"o":{"n":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",17,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,{"i":[{"n":"r"},{"n":"u64"},{"n":"rsdr"}],"o":{"n":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,null],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",21,{"i":[{"n":"r"}],"o":{"n":"readrng"}}],[11,"new_unseeded","rand","Creates a new XorShiftRng instance which is not seeded.",20,{"o":{"n":"xorshiftrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",15,{"o":{"g":["stdrng","error"],"n":"result"}}],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",24,{"i":[{"n":"x"},{"n":"x"}],"o":{"n":"range"}}],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",27,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"gamma"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",25,{"i":[{"n":"f64"}],"o":{"n":"chisquared"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",29,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"fisherf"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",26,{"i":[{"n":"f64"}],"o":{"n":"studentt"}}],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",30,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"normal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",31,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"lognormal"}}],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",22,{"i":[{"n":"f64"}],"o":{"n":"exp"}}],[11,"new","rand::distributions","",23,{"o":{"n":"randsample"}}],[11,"new","","Create a new `WeightedChoice`.",28,null]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"ReseedWithDefault"],[3,"StdRng"],[3,"IsaacRng"],[3,"ChaChaRng"],[3,"ThreadRng"],[3,"Isaac64Rng"],[3,"XorShiftRng"],[3,"ReadRng"],[3,"Exp"],[3,"RandSample"],[3,"Range"],[3,"ChiSquared"],[3,"StudentT"],[3,"Gamma"],[3,"WeightedChoice"],[3,"FisherF"],[3,"Normal"],[3,"LogNormal"],[3,"AsciiGenerator"],[3,"Generator"]]};
searchIndex["rayon"] = {"doc":"Data-parallelism library that makes it easy to convert sequential computations into parallel","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"o":{"n":"usize"}}],[3,"ThreadPool","","Represents a user created [thread-pool].",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"i":[{"n":"op"}],"o":{"n":"r"}}],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,null],[0,"collections","","Parallel iterator types for [standard collections][std::collections]",null,null],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",0,null],[11,"opt_len","","",0,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",0,null],[11,"len","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",1,null],[11,"opt_len","","",1,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",1,null],[11,"len","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",1,null],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",2,null],[11,"opt_len","","",2,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",4,null],[11,"opt_len","","",4,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",null,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",6,null],[11,"opt_len","","",6,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",7,null],[11,"opt_len","","",7,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",8,null],[11,"opt_len","","",8,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",9,null],[11,"opt_len","","",9,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",null,null],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",10,null],[11,"opt_len","","",10,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",11,null],[11,"opt_len","","",11,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",null,null],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",12,null],[11,"opt_len","","",12,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",13,null],[11,"opt_len","","",13,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",14,null],[11,"opt_len","","",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",null,null],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",15,null],[11,"opt_len","","",15,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",15,null],[11,"len","","",15,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",15,null],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",16,null],[11,"opt_len","","",16,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",16,null],[11,"len","","",16,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",16,null],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",17,null],[11,"opt_len","","",17,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",17,null],[11,"len","","",17,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",17,null],[0,"iter","rayon","Traits for writing parallel programs using an iterator-style interface",null,null],[4,"Either","rayon::iter","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",18,null],[13,"Right","","A value of type `R`.",18,null],[3,"IterBridge","","`IterBridge` is a parallel iterator that wraps a sequential iterator.",null,null],[3,"Chain","","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[3,"Chunks","","`Chunks` is an iterator that groups elements of an underlying iterator.",null,null],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]",null,null],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[3,"Flatten","","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",null,null],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[3,"TryFold","","`TryFold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`try_fold()`] method on [`ParallelIterator`]",null,null],[3,"TryFoldWith","","`TryFoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]",null,null],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]",null,null],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`IndexedParallelIterator`]",null,null],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"Zip","","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",null,null],[3,"ZipEq","","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",null,null],[3,"Interleave","","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",null,null],[3,"InterleaveShortest","","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",null,null],[3,"Intersperse","","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",null,null],[3,"Update","","`Update` is an iterator that mutates the elements of an underlying iterator before they are yielded.",null,null],[3,"Rev","","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",null,null],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[3,"Repeat","","Iterator adaptor for the `repeat()` function.",null,null],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",null,null],[3,"Empty","","Iterator adaptor for the `empty()` function.",null,null],[3,"Once","","Iterator adaptor for the `once()` function.",null,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"i":[{"n":"d"},{"n":"s"}],"o":{"n":"split"}}],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",null,{"i":[{"n":"t"}],"o":{"n":"repeat"}}],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"repeatn"}}],[5,"empty","","Creates a parallel iterator that produces nothing.",null,{"o":{"n":"empty"}}],[5,"once","","Creates a parallel iterator that produces an element exactly once.",null,{"i":[{"n":"t"}],"o":{"n":"once"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"iterbridge"}}],[11,"drive_unindexed","","",19,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"chain"}}],[11,"drive_unindexed","","",20,null],[11,"opt_len","","",20,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",20,null],[11,"len","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",20,null],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"chunks"}}],[11,"drive_unindexed","","",21,null],[11,"opt_len","","",21,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",21,null],[11,"len","","",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",21,null],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"enumerate"}}],[11,"drive_unindexed","","",22,null],[11,"opt_len","","",22,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",22,null],[11,"len","","",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",22,null],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"filter"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",23,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"filtermap"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",24,null],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"flatmap"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",25,null],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"drive_unindexed","","",26,null],[0,"plumbing","","Traits and functions used to implement parallel iteration.  These are low-level details -- users of parallel iterators should not need to interact with them directly.  See [the `plumbing` README][r] for a high-level overview.",null,null],[5,"bridge","rayon::iter::plumbing","This helper function is used to \"connect\" a parallel iterator to a consumer. It will convert the `par_iter` into a producer P and then pull items from P and feed them to `consumer`, splitting and creating parallel threads as needed.",null,null],[5,"bridge_producer_consumer","","This helper function is used to \"connect\" a producer and a consumer. You may prefer to call [`bridge`], which wraps this function. This function will draw items from `producer` and feed them to `consumer`, splitting and creating parallel tasks when needed.",null,null],[5,"bridge_unindexed","","A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.",null,null],[8,"ProducerCallback","","The `ProducerCallback` trait is a kind of generic closure, [analogous to `FnOnce`][FnOnce]. See [the corresponding section in the plumbing README][r] for more details.",null,null],[16,"Output","","The type of value returned by this callback. Analogous to [`Output` from the `FnOnce` trait][Output].",27,null],[10,"callback","","Invokes the callback with the given producer as argument. The key point of this trait is that this method is generic over `P`, and hence implementors must be defined for any producer.",27,null],[8,"Producer","","A `Producer` is effectively a \"splittable `IntoIterator`\". That is, a producer is a value which can be converted into an iterator at any time: at that point, it simply produces items on demand, like any iterator. But what makes a `Producer` special is that, before we convert to an iterator, we can also split it at a particular point using the `split_at` method. This will yield up two producers, one producing the items before that point, and one producing the items after that point (these two producers can then independently be split further, or be converted into iterators). In Rayon, this splitting is used to divide between threads. See [the `plumbing` README][r] for further details.",null,null],[16,"Item","","The type of item that will be produced by this producer once it is converted into an iterator.",28,null],[16,"IntoIter","","The type of iterator we will become.",28,null],[10,"into_iter","","Convert `self` into an iterator; at this point, no more parallel splits are possible.",28,null],[11,"min_len","","The minimum number of items that we will process sequentially. Defaults to 1, which means that we will split all the way down to a single item. This can be raised higher using the [`with_min_len`] method, which will force us to create sequential tasks at a larger granularity. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",28,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"max_len","","The maximum number of items that we will process sequentially. Defaults to MAX, which means that we can choose not to split at all. This can be lowered using the [`with_max_len`] method, which will force us to create more parallel tasks. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",28,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",28,null],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",28,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"f"}}],[8,"Consumer","","A consumer is effectively a [generalized \"fold\" operation][fold], and in fact each consumer will eventually be converted into a [`Folder`]. What makes a consumer special is that, like a [`Producer`], it can be split into multiple consumers using the `split_at` method. When a consumer is split, it produces two consumers, as well as a reducer. The two consumers can be fed items independently, and when they are done the reducer is used to combine their two results into one. See [the `plumbing` README][r] for further details.",null,null],[16,"Folder","","The type of folder that this consumer can be converted into.",29,null],[16,"Reducer","","The type of reducer that is produced if this consumer is split.",29,null],[16,"Result","","The type of result that this consumer will ultimately produce.",29,null],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",29,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",29,null],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",29,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Folder","","The `Folder` trait encapsulates [the standard fold operation][fold].  It can be fed many items using the `consume` method. At the end, once all items have been consumed, it can then be converted (using `complete`) into a final value.",null,null],[16,"Result","","The type of result that will ultimately be produced by the folder.",30,null],[10,"consume","","Consume next item and return new sequential state.",30,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"self"}}],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",30,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"self"}}],[10,"complete","","Finish consuming items, produce final result.",30,null],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Reducer","","The reducer is the final step of a `Consumer` -- after a consumer has been split into two parts, and each of those parts has been fully processed, we are left with two results. The reducer is then used to combine those two results into one. See [the `plumbing` README][r] for further details.",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",31,{"i":[{"n":"self"},{"n":"result"},{"n":"result"}],"o":{"n":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied. These consumers can be used like regular consumers, but they also support a `split_off_left` method that does not take an index to split, but simply splits at some arbitrary point (`for_each`, for example, produces an unindexed consumer).",null,null],[10,"split_off_left","","Splits off a \"left\" consumer and returns it. The `self` consumer should then be used to consume the \"right\" portion of the data. (The ordering matters for methods like find_first -- values produced by the returned value are given precedence over values produced by `self`.) Once the left and right halves have been fully consumed, you should reduce the results with the result of `to_reducer`.",32,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_reducer","","Creates a reducer that can be used to combine the results from a split consumer.",32,null],[8,"UnindexedProducer","","A variant on `Producer` which does not know its exact length or cannot represent it in a `usize`. These producers act like ordinary producers except that they cannot be told to split at a particular point. Instead, you just ask them to split 'somewhere'.",null,null],[16,"Item","","The type of item returned by this producer.",33,null],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",33,null],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"f"}}],[11,"clone","rayon::iter","",34,{"i":[{"n":"self"}],"o":{"n":"fold"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",34,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"foldwith"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",35,null],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"tryfold"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",36,null],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"tryfoldwith"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",37,null],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"skip"}}],[11,"drive_unindexed","","",38,null],[11,"opt_len","","",38,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"len","","",38,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"drive","","",38,null],[11,"with_producer","","",38,null],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"split"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",39,null],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"take"}}],[11,"drive_unindexed","","",40,null],[11,"opt_len","","",40,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"len","","",40,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"drive","","",40,null],[11,"with_producer","","",40,null],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"map"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",41,null],[11,"opt_len","","",41,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",41,null],[11,"len","","",41,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",41,null],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"mapwith"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",42,null],[11,"len","","",42,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",42,null],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"zip"}}],[11,"drive_unindexed","","",43,null],[11,"opt_len","","",43,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",43,null],[11,"len","","",43,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",43,null],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"zipeq"}}],[11,"drive_unindexed","","",44,null],[11,"opt_len","","",44,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",44,null],[11,"len","","",44,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",44,null],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"interleave"}}],[11,"drive_unindexed","","",45,null],[11,"opt_len","","",45,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",45,null],[11,"len","","",45,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",45,null],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"interleaveshortest"}}],[11,"drive_unindexed","","",46,null],[11,"opt_len","","",46,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",46,null],[11,"len","","",46,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",46,null],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"intersperse"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",47,null],[11,"opt_len","","",47,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",47,null],[11,"len","","",47,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",47,null],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"update"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",48,null],[11,"opt_len","","",48,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",48,null],[11,"len","","",48,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",48,null],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"rev"}}],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",49,null],[11,"len","","",49,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",49,null],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"minlen"}}],[11,"drive_unindexed","","",50,null],[11,"opt_len","","",50,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",50,null],[11,"len","","",50,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",50,null],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"maxlen"}}],[11,"drive_unindexed","","",51,null],[11,"opt_len","","",51,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",51,null],[11,"len","","",51,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",51,null],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"cloned"}}],[11,"drive_unindexed","","",52,null],[11,"opt_len","","",52,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",52,null],[11,"len","","",52,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",52,null],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"inspect"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",53,null],[11,"len","","",53,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",53,null],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"drive_unindexed","","",54,null],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"repeat"}}],[11,"take","","Take only `n` repeats of the element, similar to the general `take()`.",55,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"repeatn"}}],[11,"zip","","Iterate tuples repeating the element with items from another iterator, similar to the general `zip()`.",55,{"i":[{"n":"self"},{"n":"z"}],"o":{"g":["repeatn"],"n":"zip"}}],[11,"drive_unindexed","","",55,null],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"repeatn"}}],[11,"drive_unindexed","","",56,null],[11,"opt_len","","",56,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",56,null],[11,"with_producer","","",56,null],[11,"len","","",56,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",57,null],[11,"opt_len","","",57,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",57,null],[11,"len","","",57,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",57,null],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"once"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",58,null],[11,"opt_len","","",58,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",58,null],[11,"len","","",58,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",58,null],[8,"ParallelBridge","","Conversion trait to convert an `Iterator` to a `ParallelIterator`.",null,null],[10,"par_bridge","","Create a bridge from this type to a `ParallelIterator`.",59,{"i":[{"n":"self"}],"o":{"n":"iterbridge"}}],[8,"IntoParallelIterator","","`IntoParallelIterator` implements the conversion to a [`ParallelIterator`].",null,null],[16,"Iter","","The parallel iterator type that will be created.",60,null],[16,"Item","","The type of item that the parallel iterator will produce.",60,null],[10,"into_par_iter","","Converts `self` into a parallel iterator.",60,null],[8,"IntoParallelRefIterator","","`IntoParallelRefIterator` implements the conversion to a [`ParallelIterator`], providing shared references to the data.",null,null],[16,"Iter","","The type of the parallel iterator that will be returned.",61,null],[16,"Item","","The type of item that the parallel iterator will produce. This will typically be an `&'data T` reference type.",61,null],[10,"par_iter","","Converts `self` into a parallel iterator.",61,null],[8,"IntoParallelRefMutIterator","","`IntoParallelRefMutIterator` implements the conversion to a [`ParallelIterator`], providing mutable references to the data.",null,null],[16,"Iter","","The type of iterator that will be created.",62,null],[16,"Item","","The type of item that will be produced; this is typically an `&'data mut T` reference.",62,null],[10,"par_iter_mut","","Creates the parallel iterator from `self`.",62,null],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",null,null],[16,"Item","","The type of item that this parallel iterator produces. For example, if you use the [`for_each`] method, this is the type of item that your closure will be invoked with.",63,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",63,{"i":[{"n":"self"},{"n":"op"}]}],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",63,{"i":[{"n":"self"},{"n":"t"},{"n":"op"}]}],[11,"try_for_each","","Executes a fallible `OP` on each item produced by the iterator, in parallel.",63,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"try_for_each_with","","Executes a fallible `OP` on the given `init` value with each item produced by the iterator, in parallel.",63,{"i":[{"n":"self"},{"n":"t"},{"n":"op"}],"o":{"n":"r"}}],[11,"count","","Counts the number of items in this parallel iterator.",63,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",63,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",63,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"mapwith"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",63,{"i":[{"n":"self"}],"o":{"n":"cloned"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",63,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"inspect"}}],[11,"update","","Mutates each item of this iterator before yielding it.",63,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"update"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",63,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",63,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",63,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"flatmap"}}],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",63,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",63,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",63,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"option"}}],[11,"try_reduce","","Reduces the items in the iterator into one item using a fallible `op`. The `identity` argument is used the same way as in [`reduce()`].",63,null],[11,"try_reduce_with","","Reduces the items in the iterator into one item using a fallible `op`.",63,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"option"}}],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",63,{"i":[{"n":"self"},{"n":"id"},{"n":"f"}],"o":{"n":"fold"}}],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",63,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"foldwith"}}],[11,"try_fold","","Perform a fallible parallel fold.",63,{"i":[{"n":"self"},{"n":"id"},{"n":"f"}],"o":{"n":"tryfold"}}],[11,"try_fold_with","","Perform a fallible parallel fold with a cloneable `init` value.",63,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"tryfoldwith"}}],[11,"sum","","Sums up the items in the iterator.",63,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"product","","Multiplies all the items in the iterator.",63,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",63,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",63,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"chain"}}],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",63,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",63,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",63,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",63,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",63,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"bool"}}],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",63,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",63,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",63,null],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",63,null],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",63,null],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",63,null],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",63,null],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",63,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"collect_into_vec","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",64,{"i":[{"n":"self"},{"n":"vec"}]}],[11,"unzip_into_vecs","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",64,{"i":[{"n":"self"},{"n":"vec"},{"n":"vec"}]}],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",64,{"i":[{"n":"self"},{"n":"z"}],"o":{"n":"zip"}}],[11,"zip_eq","","The same as `Zip`, but requires that both iterators have the same length.",64,{"i":[{"n":"self"},{"n":"z"}],"o":{"n":"zipeq"}}],[11,"interleave","","Interleave elements of this iterator and the other given iterator. Alternately yields elements from this iterator and the given iterator, until both are exhausted. If one iterator is exhausted before the other, the last elements are provided from the other.",64,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"interleave"}}],[11,"interleave_shortest","","Interleave elements of this iterator and the other given iterator, until one is exhausted.",64,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"interleaveshortest"}}],[11,"chunks","","Split an iterator up into fixed-size chunks.",64,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",64,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",64,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",64,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",64,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",64,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",64,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",64,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",64,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"enumerate","","Yields an index along with each item.",64,{"i":[{"n":"self"}],"o":{"n":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",64,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",64,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",64,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",64,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",64,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",64,{"i":[{"n":"self"}],"o":{"n":"rev"}}],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",64,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"minlen"}}],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",64,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"maxlen"}}],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",64,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",64,null],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",64,null],[8,"FromParallelIterator","","`FromParallelIterator` implements the creation of a collection from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a given type, you define how it will be created from an iterator.",null,null],[10,"from_par_iter","","Creates an instance of the collection from the parallel iterator `par_iter`.",65,{"i":[{"n":"i"}],"o":{"n":"self"}}],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",null,null],[10,"par_extend","","Extends an instance of the collection with the elements drawn from the parallel iterator `par_iter`.",66,{"i":[{"n":"self"},{"n":"i"}]}],[0,"option","rayon","Parallel iterator types for [options][std::option]",null,null],[3,"IntoIter","rayon::option","A parallel iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"Iter","","A parallel iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",67,null],[11,"opt_len","","",67,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",67,null],[11,"len","","",67,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",67,null],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",68,null],[11,"opt_len","","",68,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",68,null],[11,"len","","",68,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",68,null],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",69,null],[11,"opt_len","","",69,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",69,null],[11,"len","","",69,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",69,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[8,"ParallelBridge","rayon::prelude","Conversion trait to convert an `Iterator` to a `ParallelIterator`.",null,null],[10,"par_bridge","","Create a bridge from this type to a `ParallelIterator`.",59,{"i":[{"n":"self"}],"o":{"n":"iterbridge"}}],[0,"range","rayon","Parallel iterator types for [ranges][std::range], the type for values created by `a..b` expressions",null,null],[3,"Iter","rayon::range","Parallel iterator over a range, implemented for all integer types.",null,null],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"result","rayon","Parallel iterator types for [results][std::result]",null,null],[3,"IntoIter","rayon::result","Parallel iterator over a result",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",71,null],[11,"opt_len","","",71,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",71,null],[11,"len","","",71,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",71,null],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",72,null],[11,"opt_len","","",72,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",72,null],[11,"len","","",72,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",72,null],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",73,null],[11,"opt_len","","",73,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",73,null],[11,"len","","",73,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",73,null],[0,"slice","rayon","Parallel iterator types for [slices][std::slice]",null,null],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",null,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",null,null],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",null,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",null,null],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",null,null],[8,"ParallelSlice","","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",74,null],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",74,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"split"}}],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `window_size`. The windows overlap.",74,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"windows"}}],[11,"par_chunks","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks do not overlap.",74,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",75,null],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",75,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"splitmut"}}],[11,"par_chunks_mut","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks are mutable and do not overlap.",75,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunksmut"}}],[11,"par_sort","","Sorts the slice in parallel.",75,{"i":[{"n":"self"}]}],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",75,{"i":[{"n":"self"},{"n":"f"}]}],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",75,{"i":[{"n":"self"},{"n":"f"}]}],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",75,{"i":[{"n":"self"}]}],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",75,{"i":[{"n":"self"},{"n":"f"}]}],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",75,{"i":[{"n":"self"},{"n":"f"}]}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",76,null],[11,"opt_len","","",76,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",76,null],[11,"len","","",76,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",76,null],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",77,null],[11,"opt_len","","",77,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",77,null],[11,"len","","",77,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",77,null],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",78,null],[11,"opt_len","","",78,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",78,null],[11,"len","","",78,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",78,null],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",79,null],[11,"opt_len","","",79,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",79,null],[11,"len","","",79,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",79,null],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",80,null],[11,"opt_len","","",80,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",80,null],[11,"len","","",80,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",80,null],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",81,null],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",82,null],[0,"str","rayon","Parallel iterator types for [strings][std::str]",null,null],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",null,null],[3,"CharIndices","","Parallel iterator over the characters of a string, with their positions",null,null],[3,"Bytes","","Parallel iterator over the bytes of a string",null,null],[3,"EncodeUtf16","","Parallel iterator over a string encoded as UTF-16",null,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",null,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[3,"Matches","","Parallel iterator over substrings that match a pattern",null,null],[3,"MatchIndices","","Parallel iterator over substrings that match a pattern, with their positions",null,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",83,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",83,{"i":[{"n":"self"}],"o":{"n":"chars"}}],[11,"par_char_indices","","Returns a parallel iterator over the characters of a string, with their positions.",83,{"i":[{"n":"self"}],"o":{"n":"charindices"}}],[11,"par_bytes","","Returns a parallel iterator over the bytes of a string.",83,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"par_encode_utf16","","Returns a parallel iterator over a string encoded as UTF-16.",83,{"i":[{"n":"self"}],"o":{"n":"encodeutf16"}}],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",83,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"split"}}],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",83,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"splitterminator"}}],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",83,{"i":[{"n":"self"}],"o":{"n":"lines"}}],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",83,{"i":[{"n":"self"}],"o":{"n":"splitwhitespace"}}],[11,"par_matches","","Returns a parallel iterator over substrings that match a given character or predicate, similar to `str::matches`.",83,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"matches"}}],[11,"par_match_indices","","Returns a parallel iterator over substrings that match a given character or predicate, with their positions, similar to `str::match_indices`.",83,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"matchindices"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"chars"}}],[11,"drive_unindexed","","",84,null],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"charindices"}}],[11,"drive_unindexed","","",85,null],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"drive_unindexed","","",86,null],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"encodeutf16"}}],[11,"drive_unindexed","","",87,null],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"split"}}],[11,"drive_unindexed","","",88,null],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"splitterminator"}}],[11,"drive_unindexed","","",89,null],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"lines"}}],[11,"drive_unindexed","","",90,null],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"splitwhitespace"}}],[11,"drive_unindexed","","",91,null],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"matches"}}],[11,"drive_unindexed","","",92,null],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"matchindices"}}],[11,"drive_unindexed","","",93,null],[0,"vec","rayon","Parallel iterator types for [vectors][std::vec] (`Vec<T>`)",null,null],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",null,null],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",94,null],[11,"opt_len","","",94,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",94,null],[11,"len","","",94,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",94,null],[11,"drive_unindexed","rayon::iter","",18,null],[11,"opt_len","","",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",18,null],[11,"len","","",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",18,null],[11,"par_extend","","",18,{"i":[{"n":"self"},{"n":"i"}]}],[11,"new","rayon","Deprecated in favor of `ThreadPoolBuilder::build`.",95,{"i":[{"n":"configuration"}],"o":{"g":["threadpool","box"],"n":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",95,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",95,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",95,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",95,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",95,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",95,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",95,null],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"drop","","",95,null],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",98,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"default","","",99,{"o":{"n":"threadpoolbuilder"}}],[11,"fmt","rayon::iter","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"as_mut","","",18,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"as_ref","","",18,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"extend","","",18,null],[11,"from","","",18,{"i":[{"n":"result"}],"o":{"n":"either"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"write","","",18,null],[11,"flush","","",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",18,null],[11,"read_to_end","","",18,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"into","","",18,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"next_back","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"deref_mut","","",18,null],[11,"description","","",18,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"partial_cmp","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"fill_buf","","",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"consume","","",18,null],[11,"cmp","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"hash","","",18,null],[11,"next","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",18,null],[11,"fold","","",18,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",18,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"deref","","",18,null],[11,"new","rayon","Creates and returns a valid rayon thread pool builder, but does not initialize it.",99,{"o":{"n":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",99,{"i":[{"n":"self"}],"o":{"g":["threadpool","threadpoolbuilderror"],"n":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",99,{"i":[{"n":"self"}],"o":{"g":["threadpoolbuilderror"],"n":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",99,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"threadpoolbuilder"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",99,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",99,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",99,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"threadpoolbuilder"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",99,{"i":[{"n":"self"}],"o":{"n":"threadpoolbuilder"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",99,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",99,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",97,null],[11,"is_left","rayon::iter","Return true if the value is the `Left` variant.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",18,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",18,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",18,{"i":[{"n":"self"}],"o":{"n":"t"}}]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"IterBridge"],[3,"Chain"],[3,"Chunks"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"ZipEq"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"Update"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[3,"Repeat"],[3,"RepeatN"],[3,"Empty"],[3,"Once"],[8,"ParallelBridge"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"IntoIter"],[3,"ThreadPool"],[3,"FnContext"],[3,"Scope"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"]]};
searchIndex["rayon_core"] = {"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","Represents a user created [thread-pool].",null,null],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"o":{"g":["usize"],"n":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"o":{"g":["bool"],"n":"option"}}],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"i":[{"n":"op"}],"o":{"n":"r"}}],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"i":[{"n":"f"}]}],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"o":{"n":"usize"}}],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",null,{"i":[{"n":"configuration"}],"o":{"g":["box"],"n":"result"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",0,{"i":[{"n":"self"},{"n":"body"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",1,{"i":[{"n":"configuration"}],"o":{"g":["threadpool","box"],"n":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,{"i":[{"n":"self"},{"n":"op"}]}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"threadpoolbuilder"}}],[11,"default","","",4,{"o":{"n":"configuration"}}],[11,"new","","Creates and returns a valid rayon thread pool builder, but does not initialize it.",3,{"o":{"n":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",3,{"i":[{"n":"self"}],"o":{"g":["threadpool","threadpoolbuilderror"],"n":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",3,{"i":[{"n":"self"}],"o":{"g":["threadpoolbuilderror"],"n":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",3,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",3,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",3,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",4,{"o":{"n":"configuration"}}],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",4,{"i":[{"n":"self"}],"o":{"g":["threadpool","box"],"n":"result"}}],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"configuration"}}],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",4,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",4,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",4,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"i":[{"n":"str"}],"o":{"n":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"i":[{"n":"str"}],"o":{"g":["demangle","trydemangleerror"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"i":[{"n":"self"}],"o":{"g":["vec","frombase64error"],"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"characterset"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"newline"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"config"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"frombase64error"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"i":[{"n":"self"}],"o":{"n":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"i":[{"n":"self"}],"o":{"g":["vec","fromhexerror"],"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"fromhexerror"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",6,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"i":[{"n":"errorcode"}],"o":{"n":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"i":[{"n":"str"}],"o":{"n":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"i":[{"n":"t"}],"o":{"n":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"i":[{"n":"t"}],"o":{"n":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"errorcode"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"errorcode"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"parsererror"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"decodererror"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"decodererror"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"encodererror"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",12,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",12,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",12,{"i":[{"n":"parsererror"}],"o":{"n":"decodererror"}}],[11,"description","","",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",11,{"i":[{"n":"error"}],"o":{"n":"parsererror"}}],[11,"description","","",13,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",13,{"i":[{"n":"error"}],"o":{"n":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"i":[{"n":"write"}],"o":{"n":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"i":[{"n":"write"}],"o":{"n":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"emit_nil","","",17,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_usize","","",17,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"encoderesult"}}],[11,"emit_u64","","",17,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"encoderesult"}}],[11,"emit_u32","","",17,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"encoderesult"}}],[11,"emit_u16","","",17,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"encoderesult"}}],[11,"emit_u8","","",17,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"encoderesult"}}],[11,"emit_isize","","",17,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"encoderesult"}}],[11,"emit_i64","","",17,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"encoderesult"}}],[11,"emit_i32","","",17,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"encoderesult"}}],[11,"emit_i16","","",17,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"encoderesult"}}],[11,"emit_i8","","",17,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"encoderesult"}}],[11,"emit_bool","","",17,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"encoderesult"}}],[11,"emit_f64","","",17,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"encoderesult"}}],[11,"emit_f32","","",17,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"encoderesult"}}],[11,"emit_char","","",17,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"encoderesult"}}],[11,"emit_str","","",17,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"encoderesult"}}],[11,"emit_enum","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct_field","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option","","",17,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option_none","","",17,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_option_some","","",17,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"encode","","",9,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"i":[{"n":"read"}],"o":{"g":["buildererror"],"n":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"i":[{"n":"str"}],"o":{"g":["buildererror"],"n":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"i":[{"n":"self"}],"o":{"n":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json"],"n":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json"],"n":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"index","","",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"json"}}],[11,"index","","",9,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"json"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"jsonevent"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"jsonevent"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"stackelement"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"stackelement"}],"o":{"n":"bool"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"stackelement"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",18,{"o":{"n":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"i":[{"n":"self"}],"o":{"g":["stackelement"],"n":"option"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"g":["jsonevent"],"n":"option"}}],[11,"new","","Creates the JSON parser.",19,{"i":[{"n":"t"}],"o":{"n":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"i":[{"n":"self"}],"o":{"n":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"build","","",20,{"i":[{"n":"self"}],"o":{"g":["json","buildererror"],"n":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"i":[{"n":"json"}],"o":{"n":"decoder"}}],[11,"read_nil","","",21,{"i":[{"n":"self"}],"o":{"n":"decoderesult"}}],[11,"read_usize","","",21,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"decoderesult"}}],[11,"read_u8","","",21,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"decoderesult"}}],[11,"read_u16","","",21,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"decoderesult"}}],[11,"read_u32","","",21,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"decoderesult"}}],[11,"read_u64","","",21,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"decoderesult"}}],[11,"read_isize","","",21,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"decoderesult"}}],[11,"read_i8","","",21,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"decoderesult"}}],[11,"read_i16","","",21,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"decoderesult"}}],[11,"read_i32","","",21,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"decoderesult"}}],[11,"read_i64","","",21,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"decoderesult"}}],[11,"read_f32","","",21,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"decoderesult"}}],[11,"read_f64","","",21,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"decoderesult"}}],[11,"read_bool","","",21,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"decoderesult"}}],[11,"read_char","","",21,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"decoderesult"}}],[11,"read_str","","",21,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"decoderesult"}}],[11,"read_enum","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_struct_field","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_option","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_seq","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_seq_elt","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"error","","",21,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"decodererror"}}],[11,"to_json","","",9,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",9,{"i":[{"n":"str"}],"o":{"g":["json","parsererror"],"n":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"read_usize","","Read a usize value.",25,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[10,"read_isize","","Read a isize value.",25,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[10,"read_bool","","Read a bool value.",25,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[10,"read_char","","Read a char value.",25,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"result"}}],[10,"read_str","","Read a string value.",25,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_struct","","Read an struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_option","","Read an optional value.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"emit_char","","Emit a char value.",26,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"emit_str","","Emit a string value.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["vec"],"n":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["scoped_threadpool"] = {"doc":"This crate provides a stable, safe and scoped threadpool.","items":[[3,"Pool","scoped_threadpool","A threadpool that acts as a handle to a number of threads spawned at construction.",null,null],[3,"Scope","","Handle to the scope during which the threadpool is borrowed.",null,null],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"new","","Construct a threadpool with the given number of threads. Minimum value is `1`.",0,{"i":[{"n":"u32"}],"o":{"n":"pool"}}],[11,"scoped","","Borrows the pool and allows executing jobs on other threads during that scope via the argument of the closure.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"thread_count","","Returns the number of threads inside this pool.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"execute","","Execute a job on the threadpool.",1,{"i":[{"n":"self"},{"n":"f"}]}],[11,"join_all","","Blocks until all currently queued jobs have run to completion.",1,{"i":[{"n":"self"}]}],[11,"drop","","",1,{"i":[{"n":"self"}]}]],"paths":[[3,"Pool"],[3,"Scope"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[4,"Always","","Always run on scope exit.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"i":[{"n":"t"},{"n":"f"}],"o":{"g":["always"],"n":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,{"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"should_run","","",1,{"o":{"n":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,{"i":[{"n":"t"},{"n":"f"}],"o":{"n":"scopeguard"}}],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",13,null],[12,"base","","",13,null],[12,"dot_token","","",13,null],[12,"member","","",13,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",14,null],[12,"expr","","",14,null],[12,"bracket_token","","",14,null],[12,"index","","",14,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",15,null],[12,"lit","","",15,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",16,null],[12,"paren_token","","",16,null],[12,"expr","","",16,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",17,null],[12,"qself","","",17,null],[12,"path","","",17,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",18,null],[12,"op","","",18,null],[12,"expr","","",18,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",19,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",20,null],[12,"span","","",20,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",21,null],[12,"lt_token","","",21,null],[12,"lifetimes","","",21,null],[12,"gt_token","","",21,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",22,null],[12,"const_token","","",22,null],[12,"ident","","",22,null],[12,"colon_token","","",22,null],[12,"ty","","",22,null],[12,"eq_token","","",22,null],[12,"default","","",22,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",23,null],[12,"params","","",23,null],[12,"gt_token","","",23,null],[12,"where_clause","","",23,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",24,null],[12,"lifetime","","",24,null],[12,"colon_token","","",24,null],[12,"bounds","","",24,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",25,null],[12,"eq_token","","",25,null],[12,"rhs_ty","","",25,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",26,null],[12,"colon_token","","",26,null],[12,"bounds","","",26,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",27,null],[12,"bounded_ty","","The type being bounded",27,null],[12,"colon_token","","",27,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",28,null],[12,"modifier","","",28,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",29,null],[12,"ident","","",29,null],[12,"colon_token","","",29,null],[12,"bounds","","",29,null],[12,"eq_token","","",29,null],[12,"default","","",29,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",30,null],[12,"predicates","","",30,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",31,null],[12,"ident","","",31,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",32,null],[12,"span","","",32,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",33,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",34,null],[12,"bang_token","","",34,null],[12,"delimiter","","",34,null],[12,"tts","","",34,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",35,null],[12,"brace_token","","",35,null],[12,"variants","","",35,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",36,null],[12,"fields","","",36,null],[12,"semi_token","","",36,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",37,null],[12,"fields","","",37,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,null],[12,"vis","","Visibility of the struct or enum.",38,null],[12,"ident","","Name of the struct or enum.",38,null],[12,"generics","","Generics required to complete the definition.",38,null],[12,"data","","Data within the struct or enum.",38,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",39,null],[12,"name","","",39,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",40,null],[12,"ty","","",40,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",41,null],[12,"elem","","",41,null],[12,"semi_token","","",41,null],[12,"len","","",41,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",42,null],[12,"abi","","",42,null],[12,"fn_token","","",42,null],[12,"lifetimes","","",42,null],[12,"paren_token","","",42,null],[12,"inputs","","",42,null],[12,"variadic","","",42,null],[12,"output","","",42,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",43,null],[12,"elem","","",43,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",44,null],[12,"bounds","","",44,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",45,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",46,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",47,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",48,null],[12,"elem","","",48,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",49,null],[12,"path","","",49,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",50,null],[12,"const_token","","",50,null],[12,"mutability","","",50,null],[12,"elem","","",50,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",51,null],[12,"lifetime","","",51,null],[12,"mutability","","",51,null],[12,"elem","","",51,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",52,null],[12,"elem","","",52,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",53,null],[12,"bounds","","",53,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",54,null],[12,"elems","","",54,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",55,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",56,null],[12,"1","","",56,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",57,null],[12,"lt_token","","",57,null],[12,"args","","",57,null],[12,"gt_token","","",57,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",58,null],[12,"eq_token","","",58,null],[12,"ty","","",58,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",59,null],[12,"inputs","","`(A, B)`",59,null],[12,"output","","`C`",59,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",60,null],[12,"segments","","",60,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",61,null],[12,"arguments","","",61,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",62,null],[12,"ty","","",62,null],[12,"position","","",62,null],[12,"as_token","","",62,null],[12,"gt_token","","",62,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",63,null],[13,"Inner","","",63,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",64,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,null],[13,"Unit","","Unit struct or unit variant such as `None`.",66,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",67,null],[13,"Crate","","A crate-level visibility: `crate`.",67,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,null],[13,"Inherited","","An inherited visibility, which usually means private.",67,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",68,null],[13,"InPlace","","A placement expression: `place <- value`.",68,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,null],[13,"Call","","A function call expression: `invoke(a, b)`.",68,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,null],[13,"Unary","","A unary operation: `!x`, `*x`.",68,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,null],[13,"Cast","","A cast expression: `foo as f64`.",68,null],[13,"Type","","A type ascription expression: `foo: f64`.",68,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",68,null],[13,"While","","A while loop: `while expr { ... }`.",68,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",68,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,null],[13,"Block","","A blocked scope: `{ ... }`.",68,null],[13,"Assign","","An assignment expression: `a = compute()`.",68,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,null],[13,"Continue","","A `continue`, with an optional label.",68,null],[13,"Return","","A `return`, with an optional value to be returned.",68,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,null],[13,"Group","","An expression contained within invisible delimiters.",68,null],[13,"Try","","A try-expression: `expr?`.",68,null],[13,"Catch","","A catch expression: `do catch { ... }`.",68,null],[13,"Yield","","A yield expression: `yield expr`.",68,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",69,null],[13,"Unnamed","","An unnamed field like `self.0`.",69,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",71,null],[13,"Maybe","","",71,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",72,null],[13,"Lifetime","","",72,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",74,null],[13,"F64","","",74,null],[13,"None","","",74,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",75,null],[13,"I16","","",75,null],[13,"I32","","",75,null],[13,"I64","","",75,null],[13,"I128","","",75,null],[13,"Isize","","",75,null],[13,"U8","","",75,null],[13,"U16","","",75,null],[13,"U32","","",75,null],[13,"U64","","",75,null],[13,"U128","","",75,null],[13,"Usize","","",75,null],[13,"None","","",75,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,null],[13,"Byte","","A byte literal: `b'f'`.",76,null],[13,"Char","","A character literal: `'a'`.",76,null],[13,"Int","","An integer literal: `1` or `1u16`.",76,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,null],[13,"Bool","","A boolean literal: `true` or `false`.",76,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",77,null],[13,"Raw","","A raw string like `r##\"data\"##`.",77,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",78,null],[13,"Brace","","",78,null],[13,"Bracket","","",78,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",80,null],[13,"Sub","","The `-` operator (subtraction)",80,null],[13,"Mul","","The `*` operator (multiplication)",80,null],[13,"Div","","The `/` operator (division)",80,null],[13,"Rem","","The `%` operator (modulus)",80,null],[13,"And","","The `&&` operator (logical and)",80,null],[13,"Or","","The `||` operator (logical or)",80,null],[13,"BitXor","","The `^` operator (bitwise xor)",80,null],[13,"BitAnd","","The `&` operator (bitwise and)",80,null],[13,"BitOr","","The `|` operator (bitwise or)",80,null],[13,"Shl","","The `<<` operator (shift left)",80,null],[13,"Shr","","The `>>` operator (shift right)",80,null],[13,"Eq","","The `==` operator (equality)",80,null],[13,"Lt","","The `<` operator (less than)",80,null],[13,"Le","","The `<=` operator (less than or equal to)",80,null],[13,"Ne","","The `!=` operator (not equal to)",80,null],[13,"Ge","","The `>=` operator (greater than or equal to)",80,null],[13,"Gt","","The `>` operator (greater than)",80,null],[13,"AddEq","","The `+=` operator",80,null],[13,"SubEq","","The `-=` operator",80,null],[13,"MulEq","","The `*=` operator",80,null],[13,"DivEq","","The `/=` operator",80,null],[13,"RemEq","","The `%=` operator",80,null],[13,"BitXorEq","","The `^=` operator",80,null],[13,"BitAndEq","","The `&=` operator",80,null],[13,"BitOrEq","","The `|=` operator",80,null],[13,"ShlEq","","The `<<=` operator",80,null],[13,"ShrEq","","The `>>=` operator",80,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",81,null],[13,"Not","","The `!` operator for logical inversion",81,null],[13,"Neg","","The `-` operator for negation",81,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",82,null],[13,"Wild","","Argument not given a name, matched with `_`.",82,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",83,null],[13,"Type","","A particular type is returned.",83,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,null],[13,"Array","","A fixed size array type: `[T; n]`.",84,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,null],[13,"Never","","The never type: `!`.",84,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,null],[13,"Group","","A type contained within invisible delimiters.",84,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,null],[13,"Macro","","A macro in the type position.",84,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",85,null],[13,"Type","","A type argument.",85,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,null],[13,"Const","","A const expression. Must be inside of a block.",85,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",86,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"i":[{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"0","","",87,null],[3,"Apostrophe","","`'`",null,null],[12,"0","","",88,null],[3,"Add","","`+`",null,null],[12,"0","","",89,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",90,null],[3,"And","","`&`",null,null],[12,"0","","",91,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",92,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",93,null],[3,"At","","`@`",null,null],[12,"0","","",94,null],[3,"Bang","","`!`",null,null],[12,"0","","",95,null],[3,"Caret","","`^`",null,null],[12,"0","","",96,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",97,null],[3,"Colon","","`:`",null,null],[12,"0","","",98,null],[3,"Colon2","","`::`",null,null],[12,"0","","",99,null],[3,"Comma","","`,`",null,null],[12,"0","","",100,null],[3,"Div","","`/`",null,null],[12,"0","","",101,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",102,null],[3,"Dollar","","`$`",null,null],[12,"0","","",103,null],[3,"Dot","","`.`",null,null],[12,"0","","",104,null],[3,"Dot2","","`..`",null,null],[12,"0","","",105,null],[3,"Dot3","","`...`",null,null],[12,"0","","",106,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",107,null],[3,"Eq","","`=`",null,null],[12,"0","","",108,null],[3,"EqEq","","`==`",null,null],[12,"0","","",109,null],[3,"Ge","","`>=`",null,null],[12,"0","","",110,null],[3,"Gt","","`>`",null,null],[12,"0","","",111,null],[3,"Le","","`<=`",null,null],[12,"0","","",112,null],[3,"Lt","","`<`",null,null],[12,"0","","",113,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",114,null],[3,"Ne","","`!=`",null,null],[12,"0","","",115,null],[3,"Or","","`|`",null,null],[12,"0","","",116,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",117,null],[3,"OrOr","","`||`",null,null],[12,"0","","",118,null],[3,"Pound","","`#`",null,null],[12,"0","","",119,null],[3,"Question","","`?`",null,null],[12,"0","","",120,null],[3,"RArrow","","`->`",null,null],[12,"0","","",121,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",122,null],[3,"Rem","","`%`",null,null],[12,"0","","",123,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",124,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",125,null],[3,"Semi","","`;`",null,null],[12,"0","","",126,null],[3,"Shl","","`<<`",null,null],[12,"0","","",127,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",128,null],[3,"Shr","","`>>`",null,null],[12,"0","","",129,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",130,null],[3,"Star","","`*`",null,null],[12,"0","","",131,null],[3,"Sub","","`-`",null,null],[12,"0","","",132,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",133,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",134,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",135,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",136,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",137,null],[3,"As","","`as`",null,null],[12,"0","","",138,null],[3,"Async","","`async`",null,null],[12,"0","","",139,null],[3,"Auto","","`auto`",null,null],[12,"0","","",140,null],[3,"Box","","`box`",null,null],[12,"0","","",141,null],[3,"Break","","`break`",null,null],[12,"0","","",142,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",143,null],[3,"Catch","","`catch`",null,null],[12,"0","","",144,null],[3,"Const","","`const`",null,null],[12,"0","","",145,null],[3,"Continue","","`continue`",null,null],[12,"0","","",146,null],[3,"Crate","","`crate`",null,null],[12,"0","","",147,null],[3,"Default","","`default`",null,null],[12,"0","","",148,null],[3,"Do","","`do`",null,null],[12,"0","","",149,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",150,null],[3,"Else","","`else`",null,null],[12,"0","","",151,null],[3,"Enum","","`enum`",null,null],[12,"0","","",152,null],[3,"Extern","","`extern`",null,null],[12,"0","","",153,null],[3,"Fn","","`fn`",null,null],[12,"0","","",154,null],[3,"For","","`for`",null,null],[12,"0","","",155,null],[3,"If","","`if`",null,null],[12,"0","","",156,null],[3,"Impl","","`impl`",null,null],[12,"0","","",157,null],[3,"In","","`in`",null,null],[12,"0","","",158,null],[3,"Let","","`let`",null,null],[12,"0","","",159,null],[3,"Loop","","`loop`",null,null],[12,"0","","",160,null],[3,"Macro","","`macro`",null,null],[12,"0","","",161,null],[3,"Match","","`match`",null,null],[12,"0","","",162,null],[3,"Mod","","`mod`",null,null],[12,"0","","",163,null],[3,"Move","","`move`",null,null],[12,"0","","",164,null],[3,"Mut","","`mut`",null,null],[12,"0","","",165,null],[3,"Pub","","`pub`",null,null],[12,"0","","",166,null],[3,"Ref","","`ref`",null,null],[12,"0","","",167,null],[3,"Return","","`return`",null,null],[12,"0","","",168,null],[3,"Self_","","`self`",null,null],[12,"0","","",169,null],[3,"Static","","`static`",null,null],[12,"0","","",170,null],[3,"Struct","","`struct`",null,null],[12,"0","","",171,null],[3,"Super","","`super`",null,null],[12,"0","","",172,null],[3,"Trait","","`trait`",null,null],[12,"0","","",173,null],[3,"Type","","`type`",null,null],[12,"0","","",174,null],[3,"Union","","`union`",null,null],[12,"0","","",175,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",176,null],[3,"Use","","`use`",null,null],[12,"0","","",177,null],[3,"Where","","`where`",null,null],[12,"0","","",178,null],[3,"While","","`while`",null,null],[12,"0","","",179,null],[3,"Yield","","`yield`",null,null],[12,"0","","",180,null],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"underscore"}}],[11,"new","","",87,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",87,{"o":{"n":"self"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"underscore"}],"o":{"n":"bool"}}],[11,"hash","","",87,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",87,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",87,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",87,{"i":[{"n":"cursor"}],"o":{"g":["underscore"],"n":"presult"}}],[11,"description","","",87,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"apostrophe"}}],[11,"new","","",88,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",88,{"o":{"n":"self"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"apostrophe"}],"o":{"n":"bool"}}],[11,"hash","","",88,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",88,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",88,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",88,{"i":[{"n":"cursor"}],"o":{"g":["apostrophe"],"n":"presult"}}],[11,"description","","",88,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"add"}}],[11,"new","","",89,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",89,{"o":{"n":"self"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"add"}],"o":{"n":"bool"}}],[11,"hash","","",89,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",89,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"addeq"}}],[11,"new","","",90,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",90,{"o":{"n":"self"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"addeq"}],"o":{"n":"bool"}}],[11,"hash","","",90,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",90,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"and"}}],[11,"new","","",91,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",91,{"o":{"n":"self"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"and"}],"o":{"n":"bool"}}],[11,"hash","","",91,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",91,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"andand"}}],[11,"new","","",92,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",92,{"o":{"n":"self"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"andand"}],"o":{"n":"bool"}}],[11,"hash","","",92,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",92,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"andeq"}}],[11,"new","","",93,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",93,{"o":{"n":"self"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"andeq"}],"o":{"n":"bool"}}],[11,"hash","","",93,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",93,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"at"}}],[11,"new","","",94,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",94,{"o":{"n":"self"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"at"}],"o":{"n":"bool"}}],[11,"hash","","",94,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",94,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"bang"}}],[11,"new","","",95,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",95,{"o":{"n":"self"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"bang"}],"o":{"n":"bool"}}],[11,"hash","","",95,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",95,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"caret"}}],[11,"new","","",96,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",96,{"o":{"n":"self"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"caret"}],"o":{"n":"bool"}}],[11,"hash","","",96,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",96,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"careteq"}}],[11,"new","","",97,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",97,{"o":{"n":"self"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"careteq"}],"o":{"n":"bool"}}],[11,"hash","","",97,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",97,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"colon"}}],[11,"new","","",98,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",98,{"o":{"n":"self"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"colon"}],"o":{"n":"bool"}}],[11,"hash","","",98,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",98,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"colon2"}}],[11,"new","","",99,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",99,{"o":{"n":"self"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"colon2"}],"o":{"n":"bool"}}],[11,"hash","","",99,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",99,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"comma"}}],[11,"new","","",100,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",100,{"o":{"n":"self"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"comma"}],"o":{"n":"bool"}}],[11,"hash","","",100,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",100,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"div"}}],[11,"new","","",101,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",101,{"o":{"n":"self"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",101,{"i":[{"n":"self"},{"n":"div"}],"o":{"n":"bool"}}],[11,"hash","","",101,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",101,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"diveq"}}],[11,"new","","",102,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",102,{"o":{"n":"self"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",102,{"i":[{"n":"self"},{"n":"diveq"}],"o":{"n":"bool"}}],[11,"hash","","",102,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",102,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"dollar"}}],[11,"new","","",103,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",103,{"o":{"n":"self"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",103,{"i":[{"n":"self"},{"n":"dollar"}],"o":{"n":"bool"}}],[11,"hash","","",103,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",103,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"dot"}}],[11,"new","","",104,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",104,{"o":{"n":"self"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",104,{"i":[{"n":"self"},{"n":"dot"}],"o":{"n":"bool"}}],[11,"hash","","",104,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",104,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"dot2"}}],[11,"new","","",105,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",105,{"o":{"n":"self"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",105,{"i":[{"n":"self"},{"n":"dot2"}],"o":{"n":"bool"}}],[11,"hash","","",105,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",105,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"dot3"}}],[11,"new","","",106,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",106,{"o":{"n":"self"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",106,{"i":[{"n":"self"},{"n":"dot3"}],"o":{"n":"bool"}}],[11,"hash","","",106,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",106,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"dotdoteq"}}],[11,"new","","",107,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",107,{"o":{"n":"self"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"dotdoteq"}],"o":{"n":"bool"}}],[11,"hash","","",107,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",107,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"eq"}}],[11,"new","","",108,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",108,{"o":{"n":"self"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",108,{"i":[{"n":"self"},{"n":"eq"}],"o":{"n":"bool"}}],[11,"hash","","",108,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",108,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"eqeq"}}],[11,"new","","",109,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",109,{"o":{"n":"self"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"eqeq"}],"o":{"n":"bool"}}],[11,"hash","","",109,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",109,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"ge"}}],[11,"new","","",110,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",110,{"o":{"n":"self"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",110,{"i":[{"n":"self"},{"n":"ge"}],"o":{"n":"bool"}}],[11,"hash","","",110,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",110,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"gt"}}],[11,"new","","",111,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",111,{"o":{"n":"self"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",111,{"i":[{"n":"self"},{"n":"gt"}],"o":{"n":"bool"}}],[11,"hash","","",111,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",111,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"le"}}],[11,"new","","",112,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",112,{"o":{"n":"self"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"le"}],"o":{"n":"bool"}}],[11,"hash","","",112,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",112,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"lt"}}],[11,"new","","",113,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",113,{"o":{"n":"self"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",113,{"i":[{"n":"self"},{"n":"lt"}],"o":{"n":"bool"}}],[11,"hash","","",113,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",113,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"muleq"}}],[11,"new","","",114,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",114,{"o":{"n":"self"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",114,{"i":[{"n":"self"},{"n":"muleq"}],"o":{"n":"bool"}}],[11,"hash","","",114,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",114,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"ne"}}],[11,"new","","",115,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",115,{"o":{"n":"self"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",115,{"i":[{"n":"self"},{"n":"ne"}],"o":{"n":"bool"}}],[11,"hash","","",115,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",115,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"or"}}],[11,"new","","",116,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",116,{"o":{"n":"self"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",116,{"i":[{"n":"self"},{"n":"or"}],"o":{"n":"bool"}}],[11,"hash","","",116,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",116,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"oreq"}}],[11,"new","","",117,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",117,{"o":{"n":"self"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"oreq"}],"o":{"n":"bool"}}],[11,"hash","","",117,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",117,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"oror"}}],[11,"new","","",118,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",118,{"o":{"n":"self"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"oror"}],"o":{"n":"bool"}}],[11,"hash","","",118,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",118,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"pound"}}],[11,"new","","",119,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",119,{"o":{"n":"self"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",119,{"i":[{"n":"self"},{"n":"pound"}],"o":{"n":"bool"}}],[11,"hash","","",119,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",119,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"question"}}],[11,"new","","",120,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",120,{"o":{"n":"self"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",120,{"i":[{"n":"self"},{"n":"question"}],"o":{"n":"bool"}}],[11,"hash","","",120,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",120,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"rarrow"}}],[11,"new","","",121,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",121,{"o":{"n":"self"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",121,{"i":[{"n":"self"},{"n":"rarrow"}],"o":{"n":"bool"}}],[11,"hash","","",121,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",121,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"larrow"}}],[11,"new","","",122,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",122,{"o":{"n":"self"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"larrow"}],"o":{"n":"bool"}}],[11,"hash","","",122,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",122,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"rem"}}],[11,"new","","",123,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",123,{"o":{"n":"self"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"rem"}],"o":{"n":"bool"}}],[11,"hash","","",123,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",123,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"remeq"}}],[11,"new","","",124,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",124,{"o":{"n":"self"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",124,{"i":[{"n":"self"},{"n":"remeq"}],"o":{"n":"bool"}}],[11,"hash","","",124,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",124,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"fatarrow"}}],[11,"new","","",125,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",125,{"o":{"n":"self"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",125,{"i":[{"n":"self"},{"n":"fatarrow"}],"o":{"n":"bool"}}],[11,"hash","","",125,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",125,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"semi"}}],[11,"new","","",126,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",126,{"o":{"n":"self"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"semi"}],"o":{"n":"bool"}}],[11,"hash","","",126,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",126,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"shl"}}],[11,"new","","",127,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",127,{"o":{"n":"self"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"shl"}],"o":{"n":"bool"}}],[11,"hash","","",127,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",127,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"shleq"}}],[11,"new","","",128,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",128,{"o":{"n":"self"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"shleq"}],"o":{"n":"bool"}}],[11,"hash","","",128,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",128,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"shr"}}],[11,"new","","",129,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",129,{"o":{"n":"self"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"shr"}],"o":{"n":"bool"}}],[11,"hash","","",129,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",129,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"shreq"}}],[11,"new","","",130,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",130,{"o":{"n":"self"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"shreq"}],"o":{"n":"bool"}}],[11,"hash","","",130,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",130,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"star"}}],[11,"new","","",131,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",131,{"o":{"n":"self"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"star"}],"o":{"n":"bool"}}],[11,"hash","","",131,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",131,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"sub"}}],[11,"new","","",132,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",132,{"o":{"n":"self"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"sub"}],"o":{"n":"bool"}}],[11,"hash","","",132,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",132,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"subeq"}}],[11,"new","","",133,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",133,{"o":{"n":"self"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"subeq"}],"o":{"n":"bool"}}],[11,"hash","","",133,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",133,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",89,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",89,{"i":[{"n":"cursor"}],"o":{"g":["add"],"n":"presult"}}],[11,"description","","",89,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",90,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",90,{"i":[{"n":"cursor"}],"o":{"g":["addeq"],"n":"presult"}}],[11,"description","","",90,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",91,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",91,{"i":[{"n":"cursor"}],"o":{"g":["and"],"n":"presult"}}],[11,"description","","",91,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",92,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",92,{"i":[{"n":"cursor"}],"o":{"g":["andand"],"n":"presult"}}],[11,"description","","",92,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",93,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",93,{"i":[{"n":"cursor"}],"o":{"g":["andeq"],"n":"presult"}}],[11,"description","","",93,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",94,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",94,{"i":[{"n":"cursor"}],"o":{"g":["at"],"n":"presult"}}],[11,"description","","",94,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",95,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",95,{"i":[{"n":"cursor"}],"o":{"g":["bang"],"n":"presult"}}],[11,"description","","",95,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",96,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",96,{"i":[{"n":"cursor"}],"o":{"g":["caret"],"n":"presult"}}],[11,"description","","",96,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",97,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",97,{"i":[{"n":"cursor"}],"o":{"g":["careteq"],"n":"presult"}}],[11,"description","","",97,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",98,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",98,{"i":[{"n":"cursor"}],"o":{"g":["colon"],"n":"presult"}}],[11,"description","","",98,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",99,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",99,{"i":[{"n":"cursor"}],"o":{"g":["colon2"],"n":"presult"}}],[11,"description","","",99,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",100,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",100,{"i":[{"n":"cursor"}],"o":{"g":["comma"],"n":"presult"}}],[11,"description","","",100,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",101,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",101,{"i":[{"n":"cursor"}],"o":{"g":["div"],"n":"presult"}}],[11,"description","","",101,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",102,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",102,{"i":[{"n":"cursor"}],"o":{"g":["diveq"],"n":"presult"}}],[11,"description","","",102,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",103,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",103,{"i":[{"n":"cursor"}],"o":{"g":["dollar"],"n":"presult"}}],[11,"description","","",103,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",104,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",104,{"i":[{"n":"cursor"}],"o":{"g":["dot"],"n":"presult"}}],[11,"description","","",104,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",105,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",105,{"i":[{"n":"cursor"}],"o":{"g":["dot2"],"n":"presult"}}],[11,"description","","",105,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",106,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",106,{"i":[{"n":"cursor"}],"o":{"g":["dot3"],"n":"presult"}}],[11,"description","","",106,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",107,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",107,{"i":[{"n":"cursor"}],"o":{"g":["dotdoteq"],"n":"presult"}}],[11,"description","","",107,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",108,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",108,{"i":[{"n":"cursor"}],"o":{"g":["eq"],"n":"presult"}}],[11,"description","","",108,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",109,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",109,{"i":[{"n":"cursor"}],"o":{"g":["eqeq"],"n":"presult"}}],[11,"description","","",109,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",110,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",110,{"i":[{"n":"cursor"}],"o":{"g":["ge"],"n":"presult"}}],[11,"description","","",110,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",111,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",111,{"i":[{"n":"cursor"}],"o":{"g":["gt"],"n":"presult"}}],[11,"description","","",111,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",112,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",112,{"i":[{"n":"cursor"}],"o":{"g":["le"],"n":"presult"}}],[11,"description","","",112,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",113,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",113,{"i":[{"n":"cursor"}],"o":{"g":["lt"],"n":"presult"}}],[11,"description","","",113,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",114,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",114,{"i":[{"n":"cursor"}],"o":{"g":["muleq"],"n":"presult"}}],[11,"description","","",114,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",115,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",115,{"i":[{"n":"cursor"}],"o":{"g":["ne"],"n":"presult"}}],[11,"description","","",115,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",116,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",116,{"i":[{"n":"cursor"}],"o":{"g":["or"],"n":"presult"}}],[11,"description","","",116,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",117,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",117,{"i":[{"n":"cursor"}],"o":{"g":["oreq"],"n":"presult"}}],[11,"description","","",117,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",118,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",118,{"i":[{"n":"cursor"}],"o":{"g":["oror"],"n":"presult"}}],[11,"description","","",118,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",119,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",119,{"i":[{"n":"cursor"}],"o":{"g":["pound"],"n":"presult"}}],[11,"description","","",119,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",120,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",120,{"i":[{"n":"cursor"}],"o":{"g":["question"],"n":"presult"}}],[11,"description","","",120,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",121,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",121,{"i":[{"n":"cursor"}],"o":{"g":["rarrow"],"n":"presult"}}],[11,"description","","",121,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",122,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",122,{"i":[{"n":"cursor"}],"o":{"g":["larrow"],"n":"presult"}}],[11,"description","","",122,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",123,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",123,{"i":[{"n":"cursor"}],"o":{"g":["rem"],"n":"presult"}}],[11,"description","","",123,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",124,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",124,{"i":[{"n":"cursor"}],"o":{"g":["remeq"],"n":"presult"}}],[11,"description","","",124,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",125,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",125,{"i":[{"n":"cursor"}],"o":{"g":["fatarrow"],"n":"presult"}}],[11,"description","","",125,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",126,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",126,{"i":[{"n":"cursor"}],"o":{"g":["semi"],"n":"presult"}}],[11,"description","","",126,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",127,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",127,{"i":[{"n":"cursor"}],"o":{"g":["shl"],"n":"presult"}}],[11,"description","","",127,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",128,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",128,{"i":[{"n":"cursor"}],"o":{"g":["shleq"],"n":"presult"}}],[11,"description","","",128,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",129,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",129,{"i":[{"n":"cursor"}],"o":{"g":["shr"],"n":"presult"}}],[11,"description","","",129,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",130,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",130,{"i":[{"n":"cursor"}],"o":{"g":["shreq"],"n":"presult"}}],[11,"description","","",130,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",131,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",131,{"i":[{"n":"cursor"}],"o":{"g":["star"],"n":"presult"}}],[11,"description","","",131,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",132,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",132,{"i":[{"n":"cursor"}],"o":{"g":["sub"],"n":"presult"}}],[11,"description","","",132,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",133,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",133,{"i":[{"n":"cursor"}],"o":{"g":["subeq"],"n":"presult"}}],[11,"description","","",133,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"brace"}}],[11,"default","","",134,{"o":{"n":"self"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"brace"}],"o":{"n":"bool"}}],[11,"hash","","",134,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",134,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",134,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",134,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"bracket"}}],[11,"default","","",135,{"o":{"n":"self"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",135,{"i":[{"n":"self"},{"n":"bracket"}],"o":{"n":"bool"}}],[11,"hash","","",135,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",135,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",135,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",135,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"paren"}}],[11,"default","","",136,{"o":{"n":"self"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",136,{"i":[{"n":"self"},{"n":"paren"}],"o":{"n":"bool"}}],[11,"hash","","",136,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",136,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",136,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",136,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"default","","",137,{"o":{"n":"self"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"group"}],"o":{"n":"bool"}}],[11,"hash","","",137,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",137,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",137,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",137,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"as"}}],[11,"default","","",138,{"o":{"n":"self"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",138,{"i":[{"n":"self"},{"n":"as"}],"o":{"n":"bool"}}],[11,"hash","","",138,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",138,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",138,{"i":[{"n":"cursor"}],"o":{"g":["as"],"n":"presult"}}],[11,"description","","",138,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",138,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"async"}}],[11,"default","","",139,{"o":{"n":"self"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"async"}],"o":{"n":"bool"}}],[11,"hash","","",139,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",139,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",139,{"i":[{"n":"cursor"}],"o":{"g":["async"],"n":"presult"}}],[11,"description","","",139,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",139,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"auto"}}],[11,"default","","",140,{"o":{"n":"self"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"auto"}],"o":{"n":"bool"}}],[11,"hash","","",140,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",140,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",140,{"i":[{"n":"cursor"}],"o":{"g":["auto"],"n":"presult"}}],[11,"description","","",140,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",140,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"default","","",141,{"o":{"n":"self"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"box"}],"o":{"n":"bool"}}],[11,"hash","","",141,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",141,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",141,{"i":[{"n":"cursor"}],"o":{"g":["box"],"n":"presult"}}],[11,"description","","",141,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",141,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"break"}}],[11,"default","","",142,{"o":{"n":"self"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",142,{"i":[{"n":"self"},{"n":"break"}],"o":{"n":"bool"}}],[11,"hash","","",142,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",142,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",142,{"i":[{"n":"cursor"}],"o":{"g":["break"],"n":"presult"}}],[11,"description","","",142,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",142,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"capself"}}],[11,"default","","",143,{"o":{"n":"self"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"capself"}],"o":{"n":"bool"}}],[11,"hash","","",143,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",143,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",143,{"i":[{"n":"cursor"}],"o":{"g":["capself"],"n":"presult"}}],[11,"description","","",143,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",143,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"catch"}}],[11,"default","","",144,{"o":{"n":"self"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",144,{"i":[{"n":"self"},{"n":"catch"}],"o":{"n":"bool"}}],[11,"hash","","",144,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",144,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",144,{"i":[{"n":"cursor"}],"o":{"g":["catch"],"n":"presult"}}],[11,"description","","",144,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",144,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"const"}}],[11,"default","","",145,{"o":{"n":"self"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"const"}],"o":{"n":"bool"}}],[11,"hash","","",145,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",145,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",145,{"i":[{"n":"cursor"}],"o":{"g":["const"],"n":"presult"}}],[11,"description","","",145,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",145,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"continue"}}],[11,"default","","",146,{"o":{"n":"self"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",146,{"i":[{"n":"self"},{"n":"continue"}],"o":{"n":"bool"}}],[11,"hash","","",146,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",146,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",146,{"i":[{"n":"cursor"}],"o":{"g":["continue"],"n":"presult"}}],[11,"description","","",146,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",146,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"crate"}}],[11,"default","","",147,{"o":{"n":"self"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",147,{"i":[{"n":"self"},{"n":"crate"}],"o":{"n":"bool"}}],[11,"hash","","",147,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",147,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",147,{"i":[{"n":"cursor"}],"o":{"g":["crate"],"n":"presult"}}],[11,"description","","",147,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",147,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"default"}}],[11,"default","","",148,{"o":{"n":"self"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",148,{"i":[{"n":"self"},{"n":"default"}],"o":{"n":"bool"}}],[11,"hash","","",148,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",148,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",148,{"i":[{"n":"cursor"}],"o":{"g":["default"],"n":"presult"}}],[11,"description","","",148,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",148,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"do"}}],[11,"default","","",149,{"o":{"n":"self"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"do"}],"o":{"n":"bool"}}],[11,"hash","","",149,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",149,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",149,{"i":[{"n":"cursor"}],"o":{"g":["do"],"n":"presult"}}],[11,"description","","",149,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",149,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"dyn"}}],[11,"default","","",150,{"o":{"n":"self"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"dyn"}],"o":{"n":"bool"}}],[11,"hash","","",150,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",150,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",150,{"i":[{"n":"cursor"}],"o":{"g":["dyn"],"n":"presult"}}],[11,"description","","",150,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",150,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"else"}}],[11,"default","","",151,{"o":{"n":"self"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",151,{"i":[{"n":"self"},{"n":"else"}],"o":{"n":"bool"}}],[11,"hash","","",151,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",151,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",151,{"i":[{"n":"cursor"}],"o":{"g":["else"],"n":"presult"}}],[11,"description","","",151,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",151,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"enum"}}],[11,"default","","",152,{"o":{"n":"self"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"enum"}],"o":{"n":"bool"}}],[11,"hash","","",152,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",152,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",152,{"i":[{"n":"cursor"}],"o":{"g":["enum"],"n":"presult"}}],[11,"description","","",152,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",152,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"extern"}}],[11,"default","","",153,{"o":{"n":"self"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"extern"}],"o":{"n":"bool"}}],[11,"hash","","",153,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",153,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",153,{"i":[{"n":"cursor"}],"o":{"g":["extern"],"n":"presult"}}],[11,"description","","",153,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",153,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"fn"}}],[11,"default","","",154,{"o":{"n":"self"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",154,{"i":[{"n":"self"},{"n":"fn"}],"o":{"n":"bool"}}],[11,"hash","","",154,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",154,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",154,{"i":[{"n":"cursor"}],"o":{"g":["fn"],"n":"presult"}}],[11,"description","","",154,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",154,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"for"}}],[11,"default","","",155,{"o":{"n":"self"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",155,{"i":[{"n":"self"},{"n":"for"}],"o":{"n":"bool"}}],[11,"hash","","",155,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",155,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",155,{"i":[{"n":"cursor"}],"o":{"g":["for"],"n":"presult"}}],[11,"description","","",155,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",155,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"if"}}],[11,"default","","",156,{"o":{"n":"self"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",156,{"i":[{"n":"self"},{"n":"if"}],"o":{"n":"bool"}}],[11,"hash","","",156,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",156,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",156,{"i":[{"n":"cursor"}],"o":{"g":["if"],"n":"presult"}}],[11,"description","","",156,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",156,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"impl"}}],[11,"default","","",157,{"o":{"n":"self"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",157,{"i":[{"n":"self"},{"n":"impl"}],"o":{"n":"bool"}}],[11,"hash","","",157,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",157,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",157,{"i":[{"n":"cursor"}],"o":{"g":["impl"],"n":"presult"}}],[11,"description","","",157,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",157,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"in"}}],[11,"default","","",158,{"o":{"n":"self"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",158,{"i":[{"n":"self"},{"n":"in"}],"o":{"n":"bool"}}],[11,"hash","","",158,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",158,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",158,{"i":[{"n":"cursor"}],"o":{"g":["in"],"n":"presult"}}],[11,"description","","",158,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",158,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"let"}}],[11,"default","","",159,{"o":{"n":"self"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",159,{"i":[{"n":"self"},{"n":"let"}],"o":{"n":"bool"}}],[11,"hash","","",159,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",159,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",159,{"i":[{"n":"cursor"}],"o":{"g":["let"],"n":"presult"}}],[11,"description","","",159,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",159,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"loop"}}],[11,"default","","",160,{"o":{"n":"self"}}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",160,{"i":[{"n":"self"},{"n":"loop"}],"o":{"n":"bool"}}],[11,"hash","","",160,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",160,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",160,{"i":[{"n":"cursor"}],"o":{"g":["loop"],"n":"presult"}}],[11,"description","","",160,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",160,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"default","","",161,{"o":{"n":"self"}}],[11,"fmt","","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",161,{"i":[{"n":"self"},{"n":"macro"}],"o":{"n":"bool"}}],[11,"hash","","",161,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",161,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",161,{"i":[{"n":"cursor"}],"o":{"g":["macro"],"n":"presult"}}],[11,"description","","",161,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",161,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"default","","",162,{"o":{"n":"self"}}],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",162,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"hash","","",162,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",162,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",162,{"i":[{"n":"cursor"}],"o":{"g":["match"],"n":"presult"}}],[11,"description","","",162,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",162,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",163,{"i":[{"n":"self"}],"o":{"n":"mod"}}],[11,"default","","",163,{"o":{"n":"self"}}],[11,"fmt","","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",163,{"i":[{"n":"self"},{"n":"mod"}],"o":{"n":"bool"}}],[11,"hash","","",163,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",163,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",163,{"i":[{"n":"cursor"}],"o":{"g":["mod"],"n":"presult"}}],[11,"description","","",163,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",163,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"move"}}],[11,"default","","",164,{"o":{"n":"self"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",164,{"i":[{"n":"self"},{"n":"move"}],"o":{"n":"bool"}}],[11,"hash","","",164,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",164,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",164,{"i":[{"n":"cursor"}],"o":{"g":["move"],"n":"presult"}}],[11,"description","","",164,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",164,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"mut"}}],[11,"default","","",165,{"o":{"n":"self"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",165,{"i":[{"n":"self"},{"n":"mut"}],"o":{"n":"bool"}}],[11,"hash","","",165,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",165,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",165,{"i":[{"n":"cursor"}],"o":{"g":["mut"],"n":"presult"}}],[11,"description","","",165,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",165,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"pub"}}],[11,"default","","",166,{"o":{"n":"self"}}],[11,"fmt","","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",166,{"i":[{"n":"self"},{"n":"pub"}],"o":{"n":"bool"}}],[11,"hash","","",166,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",166,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",166,{"i":[{"n":"cursor"}],"o":{"g":["pub"],"n":"presult"}}],[11,"description","","",166,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",166,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",167,{"i":[{"n":"self"}],"o":{"n":"ref"}}],[11,"default","","",167,{"o":{"n":"self"}}],[11,"fmt","","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",167,{"i":[{"n":"self"},{"n":"ref"}],"o":{"n":"bool"}}],[11,"hash","","",167,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",167,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",167,{"i":[{"n":"cursor"}],"o":{"g":["ref"],"n":"presult"}}],[11,"description","","",167,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",167,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"return"}}],[11,"default","","",168,{"o":{"n":"self"}}],[11,"fmt","","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",168,{"i":[{"n":"self"},{"n":"return"}],"o":{"n":"bool"}}],[11,"hash","","",168,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",168,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",168,{"i":[{"n":"cursor"}],"o":{"g":["return"],"n":"presult"}}],[11,"description","","",168,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",168,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",169,{"i":[{"n":"self"}],"o":{"n":"self_"}}],[11,"default","","",169,{"o":{"n":"self"}}],[11,"fmt","","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",169,{"i":[{"n":"self"},{"n":"self_"}],"o":{"n":"bool"}}],[11,"hash","","",169,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",169,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",169,{"i":[{"n":"cursor"}],"o":{"g":["self_"],"n":"presult"}}],[11,"description","","",169,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",169,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",170,{"i":[{"n":"self"}],"o":{"n":"static"}}],[11,"default","","",170,{"o":{"n":"self"}}],[11,"fmt","","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",170,{"i":[{"n":"self"},{"n":"static"}],"o":{"n":"bool"}}],[11,"hash","","",170,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",170,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",170,{"i":[{"n":"cursor"}],"o":{"g":["static"],"n":"presult"}}],[11,"description","","",170,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",170,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",171,{"i":[{"n":"self"}],"o":{"n":"struct"}}],[11,"default","","",171,{"o":{"n":"self"}}],[11,"fmt","","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",171,{"i":[{"n":"self"},{"n":"struct"}],"o":{"n":"bool"}}],[11,"hash","","",171,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",171,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",171,{"i":[{"n":"cursor"}],"o":{"g":["struct"],"n":"presult"}}],[11,"description","","",171,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",171,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"super"}}],[11,"default","","",172,{"o":{"n":"self"}}],[11,"fmt","","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",172,{"i":[{"n":"self"},{"n":"super"}],"o":{"n":"bool"}}],[11,"hash","","",172,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",172,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",172,{"i":[{"n":"cursor"}],"o":{"g":["super"],"n":"presult"}}],[11,"description","","",172,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",172,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"trait"}}],[11,"default","","",173,{"o":{"n":"self"}}],[11,"fmt","","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",173,{"i":[{"n":"self"},{"n":"trait"}],"o":{"n":"bool"}}],[11,"hash","","",173,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",173,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",173,{"i":[{"n":"cursor"}],"o":{"g":["trait"],"n":"presult"}}],[11,"description","","",173,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",173,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"default","","",174,{"o":{"n":"self"}}],[11,"fmt","","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",174,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"hash","","",174,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",174,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",174,{"i":[{"n":"cursor"}],"o":{"g":["type"],"n":"presult"}}],[11,"description","","",174,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",174,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",175,{"i":[{"n":"self"}],"o":{"n":"union"}}],[11,"default","","",175,{"o":{"n":"self"}}],[11,"fmt","","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",175,{"i":[{"n":"self"},{"n":"union"}],"o":{"n":"bool"}}],[11,"hash","","",175,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",175,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",175,{"i":[{"n":"cursor"}],"o":{"g":["union"],"n":"presult"}}],[11,"description","","",175,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",175,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",176,{"i":[{"n":"self"}],"o":{"n":"unsafe"}}],[11,"default","","",176,{"o":{"n":"self"}}],[11,"fmt","","",176,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",176,{"i":[{"n":"self"},{"n":"unsafe"}],"o":{"n":"bool"}}],[11,"hash","","",176,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",176,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",176,{"i":[{"n":"cursor"}],"o":{"g":["unsafe"],"n":"presult"}}],[11,"description","","",176,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",176,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"use"}}],[11,"default","","",177,{"o":{"n":"self"}}],[11,"fmt","","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",177,{"i":[{"n":"self"},{"n":"use"}],"o":{"n":"bool"}}],[11,"hash","","",177,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",177,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",177,{"i":[{"n":"cursor"}],"o":{"g":["use"],"n":"presult"}}],[11,"description","","",177,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",177,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",178,{"i":[{"n":"self"}],"o":{"n":"where"}}],[11,"default","","",178,{"o":{"n":"self"}}],[11,"fmt","","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",178,{"i":[{"n":"self"},{"n":"where"}],"o":{"n":"bool"}}],[11,"hash","","",178,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",178,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",178,{"i":[{"n":"cursor"}],"o":{"g":["where"],"n":"presult"}}],[11,"description","","",178,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",178,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",179,{"i":[{"n":"self"}],"o":{"n":"while"}}],[11,"default","","",179,{"o":{"n":"self"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",179,{"i":[{"n":"self"},{"n":"while"}],"o":{"n":"bool"}}],[11,"hash","","",179,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",179,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",179,{"i":[{"n":"cursor"}],"o":{"g":["while"],"n":"presult"}}],[11,"description","","",179,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",179,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"yield"}}],[11,"default","","",180,{"o":{"n":"self"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"yield"}],"o":{"n":"bool"}}],[11,"hash","","",180,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",180,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",180,{"i":[{"n":"cursor"}],"o":{"g":["yield"],"n":"presult"}}],[11,"description","","",180,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",180,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"from","syn","",181,{"i":[{"n":"self_"}],"o":{"n":"ident"}}],[11,"from","","",181,{"i":[{"n":"capself"}],"o":{"n":"ident"}}],[11,"from","","",181,{"i":[{"n":"super"}],"o":{"n":"ident"}}],[11,"from","","",181,{"i":[{"n":"crate"}],"o":{"n":"ident"}}],[11,"from","","",181,{"i":[{"n":"extern"}],"o":{"n":"ident"}}],[11,"parse_inner","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_outer","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",2,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"attribute"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"i":[{"n":"self"}],"o":{"g":["meta"],"n":"option"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"bool"}}],[11,"ne","","",63,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"bool"}}],[11,"hash","","",63,null],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"attrstyle"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"bool"}}],[11,"ne","","",64,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"bool"}}],[11,"hash","","",64,null],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"meta"}}],[11,"from","","",64,{"i":[{"n":"ident"}],"o":{"n":"meta"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"metalist"}}],[11,"from","","",64,{"i":[{"n":"metalist"}],"o":{"n":"meta"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"metanamevalue"}}],[11,"from","","",64,{"i":[{"n":"metanamevalue"}],"o":{"n":"meta"}}],[11,"to_tokens","","",64,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"name","","Returns the identifier that begins this structured meta item.",64,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"bool"}}],[11,"hash","","",65,null],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"nestedmeta"}}],[11,"from","","",65,{"i":[{"n":"meta"}],"o":{"n":"nestedmeta"}}],[11,"from","","",65,{"i":[{"n":"lit"}],"o":{"n":"nestedmeta"}}],[11,"to_tokens","","",65,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",6,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",6,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",4,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",4,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",5,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",5,{"o":{"g":["str"],"n":"option"}}],[11,"parse_named","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_unnamed","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",67,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",67,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",6,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",4,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",5,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",8,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",7,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",9,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"variant"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"hash","","",66,null],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"fieldsnamed"}}],[11,"from","","",66,{"i":[{"n":"fieldsnamed"}],"o":{"n":"fields"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"fieldsunnamed"}}],[11,"from","","",66,{"i":[{"n":"fieldsunnamed"}],"o":{"n":"fields"}}],[11,"to_tokens","","",66,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,{"i":[{"n":"self"}],"o":{"g":["field"],"n":"iter"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"bool"}}],[11,"hash","","",67,null],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"visibility"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"bool"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"vispublic"}}],[11,"from","","",67,{"i":[{"n":"vispublic"}],"o":{"n":"visibility"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"viscrate"}}],[11,"from","","",67,{"i":[{"n":"viscrate"}],"o":{"n":"visibility"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"bool"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"visrestricted"}}],[11,"from","","",67,{"i":[{"n":"visrestricted"}],"o":{"n":"visibility"}}],[11,"to_tokens","","",67,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",68,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",68,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",15,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",15,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",16,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",16,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",17,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",17,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",69,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",69,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",20,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",20,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",11,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",10,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",18,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",15,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",12,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",13,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",69,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",20,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",14,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",17,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",16,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",19,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"hash","","",68,null],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"expr"}}],[11,"fmt","","",182,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",182,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"bool"}}],[11,"ne","","",182,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"bool"}}],[11,"hash","","",182,null],[11,"clone","","",182,{"i":[{"n":"self"}],"o":{"n":"exprbox"}}],[11,"from","","",68,{"i":[{"n":"exprbox"}],"o":{"n":"expr"}}],[11,"fmt","","",183,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",183,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"bool"}}],[11,"ne","","",183,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"bool"}}],[11,"hash","","",183,null],[11,"clone","","",183,{"i":[{"n":"self"}],"o":{"n":"exprinplace"}}],[11,"from","","",68,{"i":[{"n":"exprinplace"}],"o":{"n":"expr"}}],[11,"fmt","","",184,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",184,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"bool"}}],[11,"ne","","",184,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"bool"}}],[11,"hash","","",184,null],[11,"clone","","",184,{"i":[{"n":"self"}],"o":{"n":"exprarray"}}],[11,"from","","",68,{"i":[{"n":"exprarray"}],"o":{"n":"expr"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"bool"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"exprcall"}}],[11,"from","","",68,{"i":[{"n":"exprcall"}],"o":{"n":"expr"}}],[11,"fmt","","",185,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",185,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"bool"}}],[11,"ne","","",185,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"bool"}}],[11,"hash","","",185,null],[11,"clone","","",185,{"i":[{"n":"self"}],"o":{"n":"exprmethodcall"}}],[11,"from","","",68,{"i":[{"n":"exprmethodcall"}],"o":{"n":"expr"}}],[11,"fmt","","",186,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",186,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"bool"}}],[11,"ne","","",186,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"bool"}}],[11,"hash","","",186,null],[11,"clone","","",186,{"i":[{"n":"self"}],"o":{"n":"exprtuple"}}],[11,"from","","",68,{"i":[{"n":"exprtuple"}],"o":{"n":"expr"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"bool"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"exprbinary"}}],[11,"from","","",68,{"i":[{"n":"exprbinary"}],"o":{"n":"expr"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"bool"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"exprunary"}}],[11,"from","","",68,{"i":[{"n":"exprunary"}],"o":{"n":"expr"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"bool"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"exprlit"}}],[11,"from","","",68,{"i":[{"n":"exprlit"}],"o":{"n":"expr"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"bool"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"exprcast"}}],[11,"from","","",68,{"i":[{"n":"exprcast"}],"o":{"n":"expr"}}],[11,"fmt","","",187,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",187,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"bool"}}],[11,"ne","","",187,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"bool"}}],[11,"hash","","",187,null],[11,"clone","","",187,{"i":[{"n":"self"}],"o":{"n":"exprtype"}}],[11,"from","","",68,{"i":[{"n":"exprtype"}],"o":{"n":"expr"}}],[11,"fmt","","",188,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",188,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"bool"}}],[11,"ne","","",188,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"bool"}}],[11,"hash","","",188,null],[11,"clone","","",188,{"i":[{"n":"self"}],"o":{"n":"exprif"}}],[11,"from","","",68,{"i":[{"n":"exprif"}],"o":{"n":"expr"}}],[11,"fmt","","",189,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",189,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"bool"}}],[11,"ne","","",189,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"bool"}}],[11,"hash","","",189,null],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"expriflet"}}],[11,"from","","",68,{"i":[{"n":"expriflet"}],"o":{"n":"expr"}}],[11,"fmt","","",190,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",190,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"bool"}}],[11,"ne","","",190,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"bool"}}],[11,"hash","","",190,null],[11,"clone","","",190,{"i":[{"n":"self"}],"o":{"n":"exprwhile"}}],[11,"from","","",68,{"i":[{"n":"exprwhile"}],"o":{"n":"expr"}}],[11,"fmt","","",191,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",191,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"bool"}}],[11,"ne","","",191,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"bool"}}],[11,"hash","","",191,null],[11,"clone","","",191,{"i":[{"n":"self"}],"o":{"n":"exprwhilelet"}}],[11,"from","","",68,{"i":[{"n":"exprwhilelet"}],"o":{"n":"expr"}}],[11,"fmt","","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",192,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"bool"}}],[11,"ne","","",192,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"bool"}}],[11,"hash","","",192,null],[11,"clone","","",192,{"i":[{"n":"self"}],"o":{"n":"exprforloop"}}],[11,"from","","",68,{"i":[{"n":"exprforloop"}],"o":{"n":"expr"}}],[11,"fmt","","",193,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",193,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"bool"}}],[11,"ne","","",193,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"bool"}}],[11,"hash","","",193,null],[11,"clone","","",193,{"i":[{"n":"self"}],"o":{"n":"exprloop"}}],[11,"from","","",68,{"i":[{"n":"exprloop"}],"o":{"n":"expr"}}],[11,"fmt","","",194,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",194,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"bool"}}],[11,"ne","","",194,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"bool"}}],[11,"hash","","",194,null],[11,"clone","","",194,{"i":[{"n":"self"}],"o":{"n":"exprmatch"}}],[11,"from","","",68,{"i":[{"n":"exprmatch"}],"o":{"n":"expr"}}],[11,"fmt","","",195,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",195,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"bool"}}],[11,"ne","","",195,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"bool"}}],[11,"hash","","",195,null],[11,"clone","","",195,{"i":[{"n":"self"}],"o":{"n":"exprclosure"}}],[11,"from","","",68,{"i":[{"n":"exprclosure"}],"o":{"n":"expr"}}],[11,"fmt","","",196,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",196,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"bool"}}],[11,"ne","","",196,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"bool"}}],[11,"hash","","",196,null],[11,"clone","","",196,{"i":[{"n":"self"}],"o":{"n":"exprunsafe"}}],[11,"from","","",68,{"i":[{"n":"exprunsafe"}],"o":{"n":"expr"}}],[11,"fmt","","",197,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",197,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"bool"}}],[11,"ne","","",197,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"bool"}}],[11,"hash","","",197,null],[11,"clone","","",197,{"i":[{"n":"self"}],"o":{"n":"exprblock"}}],[11,"from","","",68,{"i":[{"n":"exprblock"}],"o":{"n":"expr"}}],[11,"fmt","","",198,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",198,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"bool"}}],[11,"ne","","",198,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"bool"}}],[11,"hash","","",198,null],[11,"clone","","",198,{"i":[{"n":"self"}],"o":{"n":"exprassign"}}],[11,"from","","",68,{"i":[{"n":"exprassign"}],"o":{"n":"expr"}}],[11,"fmt","","",199,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",199,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"bool"}}],[11,"ne","","",199,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"bool"}}],[11,"hash","","",199,null],[11,"clone","","",199,{"i":[{"n":"self"}],"o":{"n":"exprassignop"}}],[11,"from","","",68,{"i":[{"n":"exprassignop"}],"o":{"n":"expr"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"exprfield"}}],[11,"from","","",68,{"i":[{"n":"exprfield"}],"o":{"n":"expr"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"bool"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"exprindex"}}],[11,"from","","",68,{"i":[{"n":"exprindex"}],"o":{"n":"expr"}}],[11,"fmt","","",200,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",200,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"bool"}}],[11,"ne","","",200,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"bool"}}],[11,"hash","","",200,null],[11,"clone","","",200,{"i":[{"n":"self"}],"o":{"n":"exprrange"}}],[11,"from","","",68,{"i":[{"n":"exprrange"}],"o":{"n":"expr"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"bool"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"exprpath"}}],[11,"from","","",68,{"i":[{"n":"exprpath"}],"o":{"n":"expr"}}],[11,"fmt","","",201,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",201,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"bool"}}],[11,"ne","","",201,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"bool"}}],[11,"hash","","",201,null],[11,"clone","","",201,{"i":[{"n":"self"}],"o":{"n":"exprreference"}}],[11,"from","","",68,{"i":[{"n":"exprreference"}],"o":{"n":"expr"}}],[11,"fmt","","",202,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",202,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"bool"}}],[11,"ne","","",202,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"bool"}}],[11,"hash","","",202,null],[11,"clone","","",202,{"i":[{"n":"self"}],"o":{"n":"exprbreak"}}],[11,"from","","",68,{"i":[{"n":"exprbreak"}],"o":{"n":"expr"}}],[11,"fmt","","",203,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",203,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"bool"}}],[11,"ne","","",203,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"bool"}}],[11,"hash","","",203,null],[11,"clone","","",203,{"i":[{"n":"self"}],"o":{"n":"exprcontinue"}}],[11,"from","","",68,{"i":[{"n":"exprcontinue"}],"o":{"n":"expr"}}],[11,"fmt","","",204,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",204,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"bool"}}],[11,"ne","","",204,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"bool"}}],[11,"hash","","",204,null],[11,"clone","","",204,{"i":[{"n":"self"}],"o":{"n":"exprreturn"}}],[11,"from","","",68,{"i":[{"n":"exprreturn"}],"o":{"n":"expr"}}],[11,"fmt","","",205,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",205,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"bool"}}],[11,"ne","","",205,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"bool"}}],[11,"hash","","",205,null],[11,"clone","","",205,{"i":[{"n":"self"}],"o":{"n":"exprmacro"}}],[11,"from","","",68,{"i":[{"n":"exprmacro"}],"o":{"n":"expr"}}],[11,"fmt","","",206,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",206,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"bool"}}],[11,"ne","","",206,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"bool"}}],[11,"hash","","",206,null],[11,"clone","","",206,{"i":[{"n":"self"}],"o":{"n":"exprstruct"}}],[11,"from","","",68,{"i":[{"n":"exprstruct"}],"o":{"n":"expr"}}],[11,"fmt","","",207,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",207,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"bool"}}],[11,"ne","","",207,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"bool"}}],[11,"hash","","",207,null],[11,"clone","","",207,{"i":[{"n":"self"}],"o":{"n":"exprrepeat"}}],[11,"from","","",68,{"i":[{"n":"exprrepeat"}],"o":{"n":"expr"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"bool"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"exprparen"}}],[11,"from","","",68,{"i":[{"n":"exprparen"}],"o":{"n":"expr"}}],[11,"fmt","","",208,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",208,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"bool"}}],[11,"ne","","",208,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"bool"}}],[11,"hash","","",208,null],[11,"clone","","",208,{"i":[{"n":"self"}],"o":{"n":"exprgroup"}}],[11,"from","","",68,{"i":[{"n":"exprgroup"}],"o":{"n":"expr"}}],[11,"fmt","","",209,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",209,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"bool"}}],[11,"ne","","",209,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"bool"}}],[11,"hash","","",209,null],[11,"clone","","",209,{"i":[{"n":"self"}],"o":{"n":"exprtry"}}],[11,"from","","",68,{"i":[{"n":"exprtry"}],"o":{"n":"expr"}}],[11,"fmt","","",210,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",210,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"bool"}}],[11,"ne","","",210,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"bool"}}],[11,"hash","","",210,null],[11,"clone","","",210,{"i":[{"n":"self"}],"o":{"n":"exprcatch"}}],[11,"from","","",68,{"i":[{"n":"exprcatch"}],"o":{"n":"expr"}}],[11,"fmt","","",211,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",211,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"bool"}}],[11,"ne","","",211,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"bool"}}],[11,"hash","","",211,null],[11,"clone","","",211,{"i":[{"n":"self"}],"o":{"n":"expryield"}}],[11,"from","","",68,{"i":[{"n":"expryield"}],"o":{"n":"expr"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"exprverbatim"}}],[11,"from","","",68,{"i":[{"n":"exprverbatim"}],"o":{"n":"expr"}}],[11,"to_tokens","","",68,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",19,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"bool"}}],[11,"ne","","",69,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"bool"}}],[11,"hash","","",69,null],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"member"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"index"}}],[11,"from","","",20,{"i":[{"n":"usize"}],"o":{"n":"index"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",20,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",23,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",23,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",70,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",70,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",24,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",24,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",21,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",21,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",29,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",29,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",72,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",72,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",28,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",28,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",71,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",71,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",22,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",22,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",30,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",30,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",73,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",73,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",23,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",212,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",213,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",214,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",21,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",24,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",29,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",28,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",71,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",22,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",30,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",27,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",26,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",25,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"default","","",23,{"o":{"n":"generics"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"hash","","",23,null],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"generics"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"ne","","",70,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"hash","","",70,null],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"genericparam"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"bool"}}],[11,"hash","","",29,null],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"typeparam"}}],[11,"from","","",70,{"i":[{"n":"typeparam"}],"o":{"n":"genericparam"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"bool"}}],[11,"hash","","",24,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"lifetimedef"}}],[11,"from","","",70,{"i":[{"n":"lifetimedef"}],"o":{"n":"genericparam"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"bool"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"constparam"}}],[11,"from","","",70,{"i":[{"n":"constparam"}],"o":{"n":"genericparam"}}],[11,"to_tokens","","",70,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"fmt","","",212,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",212,{"i":[{"n":"self"},{"n":"implgenerics"}],"o":{"n":"bool"}}],[11,"ne","","",212,{"i":[{"n":"self"},{"n":"implgenerics"}],"o":{"n":"bool"}}],[11,"hash","","",212,null],[11,"clone","","",212,{"i":[{"n":"self"}],"o":{"n":"implgenerics"}}],[11,"fmt","","",213,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",213,{"i":[{"n":"self"},{"n":"typegenerics"}],"o":{"n":"bool"}}],[11,"ne","","",213,{"i":[{"n":"self"},{"n":"typegenerics"}],"o":{"n":"bool"}}],[11,"hash","","",213,null],[11,"clone","","",213,{"i":[{"n":"self"}],"o":{"n":"typegenerics"}}],[11,"fmt","","",214,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",214,{"i":[{"n":"self"},{"n":"turbofish"}],"o":{"n":"bool"}}],[11,"ne","","",214,{"i":[{"n":"self"},{"n":"turbofish"}],"o":{"n":"bool"}}],[11,"hash","","",214,null],[11,"clone","","",214,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",213,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"default","","",21,{"o":{"n":"boundlifetimes"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"bool"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"boundlifetimes"}}],[11,"new","","",24,{"i":[{"n":"lifetime"}],"o":{"n":"self"}}],[11,"from","","",29,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"bool"}}],[11,"ne","","",72,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"bool"}}],[11,"hash","","",72,null],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"typeparambound"}}],[11,"from","","",72,{"i":[{"n":"traitbound"}],"o":{"n":"typeparambound"}}],[11,"from","","",72,{"i":[{"n":"lifetime"}],"o":{"n":"typeparambound"}}],[11,"to_tokens","","",72,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"bool"}}],[11,"hash","","",28,null],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"traitbound"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"bool"}}],[11,"hash","","",71,null],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"traitboundmodifier"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"bool"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"bool"}}],[11,"ne","","",73,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"bool"}}],[11,"hash","","",73,null],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"wherepredicate"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"bool"}}],[11,"hash","","",27,null],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"predicatetype"}}],[11,"from","","",73,{"i":[{"n":"predicatetype"}],"o":{"n":"wherepredicate"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"bool"}}],[11,"hash","","",26,null],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"predicatelifetime"}}],[11,"from","","",73,{"i":[{"n":"predicatelifetime"}],"o":{"n":"wherepredicate"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"bool"}}],[11,"hash","","",25,null],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"predicateeq"}}],[11,"from","","",73,{"i":[{"n":"predicateeq"}],"o":{"n":"wherepredicate"}}],[11,"to_tokens","","",73,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",31,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",31,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",31,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"lifetime"}}],[11,"new","","",31,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",31,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",31,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"ordering"}}],[11,"hash","","",31,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",76,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",76,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",215,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",215,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",216,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",216,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",217,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",217,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",218,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",218,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",219,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",219,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",220,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",220,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",32,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",32,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",215,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",216,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",217,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",218,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",219,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",220,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",32,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",33,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,{"i":[{"n":"literal"}],"o":{"n":"self"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"ne","","",76,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"hash","","",76,null],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"fmt","","",215,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",215,{"i":[{"n":"self"}],"o":{"n":"litstr"}}],[11,"from","","",76,{"i":[{"n":"litstr"}],"o":{"n":"lit"}}],[11,"fmt","","",216,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",216,{"i":[{"n":"self"}],"o":{"n":"litbytestr"}}],[11,"from","","",76,{"i":[{"n":"litbytestr"}],"o":{"n":"lit"}}],[11,"fmt","","",217,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",217,{"i":[{"n":"self"}],"o":{"n":"litbyte"}}],[11,"from","","",76,{"i":[{"n":"litbyte"}],"o":{"n":"lit"}}],[11,"fmt","","",218,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",218,{"i":[{"n":"self"}],"o":{"n":"litchar"}}],[11,"from","","",76,{"i":[{"n":"litchar"}],"o":{"n":"lit"}}],[11,"fmt","","",219,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",219,{"i":[{"n":"self"}],"o":{"n":"litint"}}],[11,"from","","",76,{"i":[{"n":"litint"}],"o":{"n":"lit"}}],[11,"fmt","","",220,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",220,{"i":[{"n":"self"}],"o":{"n":"litfloat"}}],[11,"from","","",76,{"i":[{"n":"litfloat"}],"o":{"n":"lit"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"litbool"}}],[11,"from","","",76,{"i":[{"n":"litbool"}],"o":{"n":"lit"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"litverbatim"}}],[11,"from","","",76,{"i":[{"n":"litverbatim"}],"o":{"n":"lit"}}],[11,"to_tokens","","",76,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","",215,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",215,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",215,{"i":[{"n":"self"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"span","","",215,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",215,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",216,null],[11,"value","","",216,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"span","","",216,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",216,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",217,{"i":[{"n":"u8"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",217,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"span","","",217,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",217,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",218,{"i":[{"n":"char"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",218,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"span","","",218,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",218,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",219,{"i":[{"n":"u64"},{"n":"intsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",219,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"suffix","","",219,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"span","","",219,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",219,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",220,{"i":[{"n":"f64"},{"n":"floatsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",220,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"suffix","","",220,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"span","","",220,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",220,{"i":[{"n":"self"},{"n":"span"}]}],[11,"span","","",33,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",33,{"i":[{"n":"self"},{"n":"span"}]}],[11,"eq","","",215,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",215,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",216,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",216,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",217,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",217,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",218,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",218,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",219,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",219,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",220,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",220,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",32,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",33,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"strstyle"}],"o":{"n":"bool"}}],[11,"ne","","",77,{"i":[{"n":"self"},{"n":"strstyle"}],"o":{"n":"bool"}}],[11,"hash","","",77,null],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"strstyle"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"intsuffix"}],"o":{"n":"bool"}}],[11,"hash","","",75,null],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"floatsuffix"}],"o":{"n":"bool"}}],[11,"hash","","",74,null],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"parse","","",34,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",34,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",34,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"bool"}}],[11,"ne","","",78,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"bool"}}],[11,"hash","","",78,null],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"macrodelimiter"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",34,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",38,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",38,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",38,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"bool"}}],[11,"hash","","",38,null],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"ne","","",79,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"hash","","",79,null],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"bool"}}],[11,"hash","","",36,null],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"datastruct"}}],[11,"from","","",79,{"i":[{"n":"datastruct"}],"o":{"n":"data"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"bool"}}],[11,"hash","","",35,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"dataenum"}}],[11,"from","","",79,{"i":[{"n":"dataenum"}],"o":{"n":"data"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"bool"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"dataunion"}}],[11,"from","","",79,{"i":[{"n":"dataunion"}],"o":{"n":"data"}}],[11,"parse_binop","","",80,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",81,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",81,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",80,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",81,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"bool"}}],[11,"ne","","",80,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"bool"}}],[11,"hash","","",80,null],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"binop"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"bool"}}],[11,"ne","","",81,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"bool"}}],[11,"hash","","",81,null],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"unop"}}],[11,"parse","","",84,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",84,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",84,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",52,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",52,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",41,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",41,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",50,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",50,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",51,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",51,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",42,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",42,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",47,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",47,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",45,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",45,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",54,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",54,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",46,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",46,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",49,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",49,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",83,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",83,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",83,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",53,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",53,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",53,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",44,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",44,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",43,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",43,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",48,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",48,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",40,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",40,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",82,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",82,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",39,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",39,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",52,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",41,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",50,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",51,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",42,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",47,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",54,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",49,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",53,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",44,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",43,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",48,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",45,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",46,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",55,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",83,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",40,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",82,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",39,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"hash","","",84,null],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"bool"}}],[11,"hash","","",52,null],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"typeslice"}}],[11,"from","","",84,{"i":[{"n":"typeslice"}],"o":{"n":"type"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"bool"}}],[11,"hash","","",41,null],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"typearray"}}],[11,"from","","",84,{"i":[{"n":"typearray"}],"o":{"n":"type"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"bool"}}],[11,"ne","","",50,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"bool"}}],[11,"hash","","",50,null],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"typeptr"}}],[11,"from","","",84,{"i":[{"n":"typeptr"}],"o":{"n":"type"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"bool"}}],[11,"hash","","",51,null],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"typereference"}}],[11,"from","","",84,{"i":[{"n":"typereference"}],"o":{"n":"type"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"bool"}}],[11,"hash","","",42,null],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"typebarefn"}}],[11,"from","","",84,{"i":[{"n":"typebarefn"}],"o":{"n":"type"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"bool"}}],[11,"hash","","",47,null],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"typenever"}}],[11,"from","","",84,{"i":[{"n":"typenever"}],"o":{"n":"type"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"bool"}}],[11,"hash","","",54,null],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"typetuple"}}],[11,"from","","",84,{"i":[{"n":"typetuple"}],"o":{"n":"type"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"bool"}}],[11,"hash","","",49,null],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"typepath"}}],[11,"from","","",84,{"i":[{"n":"typepath"}],"o":{"n":"type"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"bool"}}],[11,"ne","","",53,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"bool"}}],[11,"hash","","",53,null],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"typetraitobject"}}],[11,"from","","",84,{"i":[{"n":"typetraitobject"}],"o":{"n":"type"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"bool"}}],[11,"hash","","",44,null],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"typeimpltrait"}}],[11,"from","","",84,{"i":[{"n":"typeimpltrait"}],"o":{"n":"type"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"bool"}}],[11,"hash","","",48,null],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"typeparen"}}],[11,"from","","",84,{"i":[{"n":"typeparen"}],"o":{"n":"type"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"bool"}}],[11,"hash","","",43,null],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"typegroup"}}],[11,"from","","",84,{"i":[{"n":"typegroup"}],"o":{"n":"type"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"bool"}}],[11,"hash","","",45,null],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"typeinfer"}}],[11,"from","","",84,{"i":[{"n":"typeinfer"}],"o":{"n":"type"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"bool"}}],[11,"hash","","",46,null],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"typemacro"}}],[11,"from","","",84,{"i":[{"n":"typemacro"}],"o":{"n":"type"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"typeverbatim"}}],[11,"from","","",84,{"i":[{"n":"typeverbatim"}],"o":{"n":"type"}}],[11,"to_tokens","","",84,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",55,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"bool"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"abi"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"bool"}}],[11,"hash","","",40,null],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"barefnarg"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"bool"}}],[11,"ne","","",82,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"bool"}}],[11,"hash","","",82,null],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"barefnargname"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"bool"}}],[11,"hash","","",83,null],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"returntype"}}],[11,"parse","","",60,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",60,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",85,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",57,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",57,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",59,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",59,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",61,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",61,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",58,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",58,{"o":{"g":["str"],"n":"option"}}],[11,"parse_mod_style","","",60,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",60,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",61,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",86,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",85,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",57,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",58,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",59,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",56,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"ne","","",60,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"hash","","",60,null],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"global","","",60,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"pathtokens"}],"o":{"n":"bool"}}],[11,"ne","","",56,{"i":[{"n":"self"},{"n":"pathtokens"}],"o":{"n":"bool"}}],[11,"hash","","",56,null],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"pathtokens"}}],[11,"from","","",60,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"bool"}}],[11,"ne","","",61,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"bool"}}],[11,"hash","","",61,null],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"pathsegment"}}],[11,"from","","",61,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"bool"}}],[11,"hash","","",86,null],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"patharguments"}}],[11,"default","","",86,{"o":{"n":"self"}}],[11,"is_empty","","",86,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"bool"}}],[11,"ne","","",85,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"bool"}}],[11,"hash","","",85,null],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"genericargument"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"bool"}}],[11,"ne","","",57,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"bool"}}],[11,"hash","","",57,null],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"anglebracketedgenericarguments"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"bool"}}],[11,"hash","","",58,null],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"binding"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"bool"}}],[11,"ne","","",59,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"bool"}}],[11,"hash","","",59,null],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"parenthesizedgenericarguments"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"bool"}}],[11,"hash","","",62,null],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",221,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",221,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",221,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"clone","","",222,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"eq","","",222,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"ne","","",222,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",222,{"o":{"n":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",222,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",222,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"option"}}],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",222,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",222,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",223,null],[13,"End","","",223,null],[11,"to_tokens","","",224,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",223,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",224,{"i":[{"n":"self"},{"n":"punctuated"}],"o":{"n":"bool"}}],[11,"ne","","",224,{"i":[{"n":"self"},{"n":"punctuated"}],"o":{"n":"bool"}}],[11,"hash","","",224,null],[11,"clone","","",224,{"i":[{"n":"self"}],"o":{"n":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",224,{"o":{"n":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",224,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",224,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",224,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",224,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",224,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",224,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",224,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",224,{"i":[{"n":"self"}],"o":{"n":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",224,{"i":[{"n":"self"}],"o":{"n":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",224,{"i":[{"n":"self"}],"o":{"n":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",224,{"i":[{"n":"self"},{"n":"t"}]}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",224,{"i":[{"n":"self"},{"n":"p"}]}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",224,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",224,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",224,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",224,{"i":[{"n":"self"},{"n":"t"}]}],[11,"insert","","Inserts an element at position `index`.",224,{"i":[{"n":"self"},{"n":"usize"},{"n":"t"}]}],[11,"fmt","","",224,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_iter","","",224,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",224,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",224,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",224,{"i":[{"n":"self"},{"n":"i"}]}],[11,"into_iter","","",224,null],[11,"default","","",224,{"o":{"n":"self"}}],[11,"next","","",225,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",225,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",226,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",226,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",227,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",227,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",228,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",228,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",229,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",229,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",230,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",230,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",223,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",223,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",223,{"i":[{"n":"t"},{"n":"option"}],"o":{"n":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",223,null],[11,"index","","",224,null],[11,"index_mut","","",224,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",224,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",224,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",224,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",224,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",224,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",224,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",224,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",224,null],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[0,"ext","","Extension traits that are made available within the `call!` parser.",null,null],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",null,null],[10,"parse_any","","Parses any identifier including keywords.",231,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_any","syn","",181,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[6,"PResult","syn::synom","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",232,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","A short name of the type being parsed.",232,{"o":{"g":["str"],"n":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",233,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",233,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",233,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",233,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","syn","",181,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",181,{"o":{"g":["str"],"n":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",234,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"i":[{"n":"v"},{"n":"abi"}]}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"anglebracketedgenericarguments"}]}],[5,"visit_attr_style","","",null,{"i":[{"n":"v"},{"n":"attrstyle"}]}],[5,"visit_attribute","","",null,{"i":[{"n":"v"},{"n":"attribute"}]}],[5,"visit_bare_fn_arg","","",null,{"i":[{"n":"v"},{"n":"barefnarg"}]}],[5,"visit_bare_fn_arg_name","","",null,{"i":[{"n":"v"},{"n":"barefnargname"}]}],[5,"visit_bin_op","","",null,{"i":[{"n":"v"},{"n":"binop"}]}],[5,"visit_binding","","",null,{"i":[{"n":"v"},{"n":"binding"}]}],[5,"visit_bound_lifetimes","","",null,{"i":[{"n":"v"},{"n":"boundlifetimes"}]}],[5,"visit_const_param","","",null,{"i":[{"n":"v"},{"n":"constparam"}]}],[5,"visit_data","","",null,{"i":[{"n":"v"},{"n":"data"}]}],[5,"visit_data_enum","","",null,{"i":[{"n":"v"},{"n":"dataenum"}]}],[5,"visit_data_struct","","",null,{"i":[{"n":"v"},{"n":"datastruct"}]}],[5,"visit_data_union","","",null,{"i":[{"n":"v"},{"n":"dataunion"}]}],[5,"visit_derive_input","","",null,{"i":[{"n":"v"},{"n":"deriveinput"}]}],[5,"visit_expr","","",null,{"i":[{"n":"v"},{"n":"expr"}]}],[5,"visit_expr_binary","","",null,{"i":[{"n":"v"},{"n":"exprbinary"}]}],[5,"visit_expr_call","","",null,{"i":[{"n":"v"},{"n":"exprcall"}]}],[5,"visit_expr_cast","","",null,{"i":[{"n":"v"},{"n":"exprcast"}]}],[5,"visit_expr_field","","",null,{"i":[{"n":"v"},{"n":"exprfield"}]}],[5,"visit_expr_index","","",null,{"i":[{"n":"v"},{"n":"exprindex"}]}],[5,"visit_expr_lit","","",null,{"i":[{"n":"v"},{"n":"exprlit"}]}],[5,"visit_expr_paren","","",null,{"i":[{"n":"v"},{"n":"exprparen"}]}],[5,"visit_expr_path","","",null,{"i":[{"n":"v"},{"n":"exprpath"}]}],[5,"visit_expr_unary","","",null,{"i":[{"n":"v"},{"n":"exprunary"}]}],[5,"visit_expr_verbatim","","",null,{"i":[{"n":"v"},{"n":"exprverbatim"}]}],[5,"visit_field","","",null,{"i":[{"n":"v"},{"n":"field"}]}],[5,"visit_fields","","",null,{"i":[{"n":"v"},{"n":"fields"}]}],[5,"visit_fields_named","","",null,{"i":[{"n":"v"},{"n":"fieldsnamed"}]}],[5,"visit_fields_unnamed","","",null,{"i":[{"n":"v"},{"n":"fieldsunnamed"}]}],[5,"visit_generic_argument","","",null,{"i":[{"n":"v"},{"n":"genericargument"}]}],[5,"visit_generic_param","","",null,{"i":[{"n":"v"},{"n":"genericparam"}]}],[5,"visit_generics","","",null,{"i":[{"n":"v"},{"n":"generics"}]}],[5,"visit_ident","","",null,{"i":[{"n":"v"},{"n":"ident"}]}],[5,"visit_index","","",null,{"i":[{"n":"v"},{"n":"index"}]}],[5,"visit_lifetime","","",null,{"i":[{"n":"v"},{"n":"lifetime"}]}],[5,"visit_lifetime_def","","",null,{"i":[{"n":"v"},{"n":"lifetimedef"}]}],[5,"visit_lit","","",null,{"i":[{"n":"v"},{"n":"lit"}]}],[5,"visit_lit_bool","","",null,{"i":[{"n":"v"},{"n":"litbool"}]}],[5,"visit_lit_byte","","",null,{"i":[{"n":"v"},{"n":"litbyte"}]}],[5,"visit_lit_byte_str","","",null,{"i":[{"n":"v"},{"n":"litbytestr"}]}],[5,"visit_lit_char","","",null,{"i":[{"n":"v"},{"n":"litchar"}]}],[5,"visit_lit_float","","",null,{"i":[{"n":"v"},{"n":"litfloat"}]}],[5,"visit_lit_int","","",null,{"i":[{"n":"v"},{"n":"litint"}]}],[5,"visit_lit_str","","",null,{"i":[{"n":"v"},{"n":"litstr"}]}],[5,"visit_lit_verbatim","","",null,{"i":[{"n":"v"},{"n":"litverbatim"}]}],[5,"visit_macro","","",null,{"i":[{"n":"v"},{"n":"macro"}]}],[5,"visit_macro_delimiter","","",null,{"i":[{"n":"v"},{"n":"macrodelimiter"}]}],[5,"visit_member","","",null,{"i":[{"n":"v"},{"n":"member"}]}],[5,"visit_meta","","",null,{"i":[{"n":"v"},{"n":"meta"}]}],[5,"visit_meta_list","","",null,{"i":[{"n":"v"},{"n":"metalist"}]}],[5,"visit_meta_name_value","","",null,{"i":[{"n":"v"},{"n":"metanamevalue"}]}],[5,"visit_nested_meta","","",null,{"i":[{"n":"v"},{"n":"nestedmeta"}]}],[5,"visit_parenthesized_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"parenthesizedgenericarguments"}]}],[5,"visit_path","","",null,{"i":[{"n":"v"},{"n":"path"}]}],[5,"visit_path_arguments","","",null,{"i":[{"n":"v"},{"n":"patharguments"}]}],[5,"visit_path_segment","","",null,{"i":[{"n":"v"},{"n":"pathsegment"}]}],[5,"visit_predicate_eq","","",null,{"i":[{"n":"v"},{"n":"predicateeq"}]}],[5,"visit_predicate_lifetime","","",null,{"i":[{"n":"v"},{"n":"predicatelifetime"}]}],[5,"visit_predicate_type","","",null,{"i":[{"n":"v"},{"n":"predicatetype"}]}],[5,"visit_qself","","",null,{"i":[{"n":"v"},{"n":"qself"}]}],[5,"visit_return_type","","",null,{"i":[{"n":"v"},{"n":"returntype"}]}],[5,"visit_span","","",null,{"i":[{"n":"v"},{"n":"span"}]}],[5,"visit_trait_bound","","",null,{"i":[{"n":"v"},{"n":"traitbound"}]}],[5,"visit_trait_bound_modifier","","",null,{"i":[{"n":"v"},{"n":"traitboundmodifier"}]}],[5,"visit_type","","",null,{"i":[{"n":"v"},{"n":"type"}]}],[5,"visit_type_array","","",null,{"i":[{"n":"v"},{"n":"typearray"}]}],[5,"visit_type_bare_fn","","",null,{"i":[{"n":"v"},{"n":"typebarefn"}]}],[5,"visit_type_group","","",null,{"i":[{"n":"v"},{"n":"typegroup"}]}],[5,"visit_type_impl_trait","","",null,{"i":[{"n":"v"},{"n":"typeimpltrait"}]}],[5,"visit_type_infer","","",null,{"i":[{"n":"v"},{"n":"typeinfer"}]}],[5,"visit_type_macro","","",null,{"i":[{"n":"v"},{"n":"typemacro"}]}],[5,"visit_type_never","","",null,{"i":[{"n":"v"},{"n":"typenever"}]}],[5,"visit_type_param","","",null,{"i":[{"n":"v"},{"n":"typeparam"}]}],[5,"visit_type_param_bound","","",null,{"i":[{"n":"v"},{"n":"typeparambound"}]}],[5,"visit_type_paren","","",null,{"i":[{"n":"v"},{"n":"typeparen"}]}],[5,"visit_type_path","","",null,{"i":[{"n":"v"},{"n":"typepath"}]}],[5,"visit_type_ptr","","",null,{"i":[{"n":"v"},{"n":"typeptr"}]}],[5,"visit_type_reference","","",null,{"i":[{"n":"v"},{"n":"typereference"}]}],[5,"visit_type_slice","","",null,{"i":[{"n":"v"},{"n":"typeslice"}]}],[5,"visit_type_trait_object","","",null,{"i":[{"n":"v"},{"n":"typetraitobject"}]}],[5,"visit_type_tuple","","",null,{"i":[{"n":"v"},{"n":"typetuple"}]}],[5,"visit_type_verbatim","","",null,{"i":[{"n":"v"},{"n":"typeverbatim"}]}],[5,"visit_un_op","","",null,{"i":[{"n":"v"},{"n":"unop"}]}],[5,"visit_variant","","",null,{"i":[{"n":"v"},{"n":"variant"}]}],[5,"visit_vis_crate","","",null,{"i":[{"n":"v"},{"n":"viscrate"}]}],[5,"visit_vis_public","","",null,{"i":[{"n":"v"},{"n":"vispublic"}]}],[5,"visit_vis_restricted","","",null,{"i":[{"n":"v"},{"n":"visrestricted"}]}],[5,"visit_visibility","","",null,{"i":[{"n":"v"},{"n":"visibility"}]}],[5,"visit_where_clause","","",null,{"i":[{"n":"v"},{"n":"whereclause"}]}],[5,"visit_where_predicate","","",null,{"i":[{"n":"v"},{"n":"wherepredicate"}]}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",235,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",235,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_attr_style","","",235,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",235,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",235,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",235,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",235,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",235,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_bound_lifetimes","","",235,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",235,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",235,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",235,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",235,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",235,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",235,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",235,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_binary","","",235,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_call","","",235,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",235,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_field","","",235,{"i":[{"n":"self"},{"n":"exprfield"}]}],[11,"visit_expr_index","","",235,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",235,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_paren","","",235,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",235,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_unary","","",235,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_verbatim","","",235,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_field","","",235,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_fields","","",235,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",235,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",235,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_generic_argument","","",235,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_param","","",235,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",235,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",235,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_index","","",235,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_lifetime","","",235,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",235,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",235,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",235,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",235,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",235,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",235,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",235,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",235,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",235,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",235,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_macro","","",235,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",235,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",235,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",235,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",235,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",235,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_nested_meta","","",235,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",235,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_path","","",235,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",235,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",235,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",235,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",235,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",235,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",235,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_return_type","","",235,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",235,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_trait_bound","","",235,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",235,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_type","","",235,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",235,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",235,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",235,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",235,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",235,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",235,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",235,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",235,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",235,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",235,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",235,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",235,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",235,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",235,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",235,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",235,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",235,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",235,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_variant","","",235,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",235,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",235,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",235,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",235,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",235,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",235,{"i":[{"n":"self"},{"n":"wherepredicate"}]}],[11,"fmt","syn::synom","",236,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",236,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",236,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"custom_keyword","","Parse the given word as a keyword.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",181,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",181,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",181,null],[11,"fmt","","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",181,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"eq","","",181,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"clone","","",181,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"partial_cmp","","",181,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",181,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"hash","","",181,null],[11,"fmt","","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"to_tokens","","",181,null],[11,"visit_abi","syn::visit","",235,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",235,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_attr_style","","",235,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",235,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",235,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",235,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",235,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",235,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_bound_lifetimes","","",235,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",235,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",235,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",235,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",235,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",235,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",235,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",235,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_binary","","",235,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_call","","",235,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",235,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_field","","",235,{"i":[{"n":"self"},{"n":"exprfield"}]}],[11,"visit_expr_index","","",235,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",235,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_paren","","",235,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",235,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_unary","","",235,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_verbatim","","",235,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_field","","",235,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_fields","","",235,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",235,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",235,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_generic_argument","","",235,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_param","","",235,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",235,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",235,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_index","","",235,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_lifetime","","",235,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",235,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",235,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",235,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",235,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",235,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",235,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",235,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",235,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",235,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",235,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_macro","","",235,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",235,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",235,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",235,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",235,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",235,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_nested_meta","","",235,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",235,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_path","","",235,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",235,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",235,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",235,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",235,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",235,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",235,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_return_type","","",235,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",235,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_trait_bound","","",235,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",235,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_type","","",235,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",235,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",235,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",235,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",235,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",235,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",235,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",235,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",235,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",235,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",235,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",235,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",235,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",235,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",235,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",235,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",235,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",235,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",235,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_variant","","",235,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",235,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",235,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",235,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",235,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",235,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",235,{"i":[{"n":"self"},{"n":"wherepredicate"}]}]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["synstructure"] = {"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",null,null],[12,"binding","","The name which this BindingInfo will bind to.",0,null],[12,"style","","The type of binding which this BindingInfo will create.",0,null],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn::Variant`, however this type may also be used as the sole variant for a struct.",null,null],[12,"attrs","","",1,null],[12,"ident","","",1,null],[12,"fields","","",1,null],[12,"discriminant","","",1,null],[3,"VariantInfo","","A wrapper around a `syn::DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",null,null],[12,"prefix","","",2,null],[3,"Structure","","A wrapper around a `syn::DeriveInput` which provides utilities for creating custom derive trait implementations.",null,null],[4,"BindStyle","","The type of binding to use when generating a pattern.",null,null],[13,"Move","","`x`",3,null],[13,"MoveMut","","`mut x`",3,null],[13,"Ref","","`ref x`",3,null],[13,"RefMut","","`ref mut x`",3,null],[5,"unpretty_print","","Dumps an unpretty version of a tokenstream. Takes any type which implements `Display`.",null,{"i":[{"n":"t"}],"o":{"n":"string"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bindstyle"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bindstyle"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"bindinginfo"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"bindinginfo"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"bindinginfo"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"pat","","Generates the pattern fragment for this field binding.",0,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,{"i":[{"n":"self"}],"o":{"g":["ident"],"n":"vec"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"variantast"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"variantast"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"variantast"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"variantinfo"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"variantinfo"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"variantinfo"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,null],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,null],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,{"i":[{"n":"self"}],"o":{"n":"variantast"}}],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"construct","","Generates the token stream required to construct the current variant.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokenstream"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokenstream"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,{"i":[{"n":"self"},{"n":"i"},{"n":"f"}],"o":{"n":"tokenstream"}}],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"remove_binding","","Remove the binding at the given index.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,{"i":[{"n":"self"}],"o":{"g":["ident"],"n":"vec"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"structure"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"structure"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"structure"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,{"i":[{"n":"deriveinput"}],"o":{"n":"self"}}],[11,"variants","","Returns a slice of the variants in this Structure.",4,null],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,null],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokenstream"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,{"i":[{"n":"self"},{"n":"i"},{"n":"f"}],"o":{"n":"tokenstream"}}],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokenstream"}}],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"remove_variant","","Remove the variant at the given index.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,{"i":[{"n":"self"}],"o":{"g":["ident"],"n":"vec"}}],[11,"add_impl_generic","","Adds an `impl<>` generic parameter. This can be used when the trait to be derived needs some extra generic parameters.",4,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"self"}}],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,{"i":[{"n":"self"},{"n":"traitbound"},{"n":"option"}]}],[11,"bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokenstream"}}],[11,"unsafe_bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokenstream"}}],[11,"unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokenstream"}}],[11,"unsafe_unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokenstream"}}],[11,"gen_impl","","Generate an impl block for the given struct. This impl block will automatically use hygiene tricks to avoid polluting the caller's namespace, and will automatically add trait bounds for generic type parameters.",4,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[14,"quote","","The whole point.",null,null],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming `TokenStream` into a `synstructure::Structure` object, and pass it into the inner function.",null,null],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",null,null]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["tm","parseerror"],"n":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"o":{"n":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"o":{"n":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"o":{"n":"f64"}}],[5,"tzset","","",null,{}],[5,"empty_tm","","",null,{"o":{"n":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"i":[{"n":"timespec"}],"o":{"n":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"o":{"n":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"i":[{"n":"timespec"}],"o":{"n":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"o":{"n":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"i":[{"n":"str"},{"n":"tm"}],"o":{"g":["string","parseerror"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"ordering"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"i":[{"n":"f"}],"o":{"n":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"o":{"n":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"o":{"n":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"o":{"n":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"i":[{"n":"stdduration"}],"o":{"g":["duration","outofrangeerror"],"n":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"i":[{"n":"self"}],"o":{"g":["stdduration","outofrangeerror"],"n":"result"}}],[11,"neg","","",4,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"mul","","",4,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"div","","",4,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"outofrangeerror"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"outofrangeerror"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"outofrangeerror"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"ordering"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"i":[{"n":"i64"},{"n":"i32"}],"o":{"n":"timespec"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timespec"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timespec"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"duration"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"o":{"n":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"i":[{"n":"self"},{"n":"precisetime"}],"o":{"n":"duration"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"steadytime"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"ordering"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"o":{"n":"steadytime"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"duration"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"steadytime"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"steadytime"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"tm"}}],[11,"sub","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"duration"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["tmfmt","parseerror"],"n":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
